{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/picture/cmd_logic.5970ea4d.png","path":"picture/cmd_logic.5970ea4d.png","modified":0,"renderable":0},{"_id":"source/picture/image-20211223210005615.png","path":"picture/image-20211223210005615.png","modified":0,"renderable":0},{"_id":"source/picture/image-20221119164738929.png","path":"picture/image-20221119164738929.png","modified":0,"renderable":0},{"_id":"source/picture/image-20230117222904780.png","path":"picture/image-20230117222904780.png","modified":0,"renderable":0},{"_id":"source/picture/image-20230117222926334.png","path":"picture/image-20230117222926334.png","modified":0,"renderable":0},{"_id":"source/picture/image-20230117223015800.png","path":"picture/image-20230117223015800.png","modified":0,"renderable":0},{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/bb.css","path":"css/bb.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/contact.png","path":"medias/contact.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","path":"libs/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","path":"libs/prism/prism.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"91b54899d29f86267a84f0433da962fa716485c9","modified":1650006709246},{"_id":"source/404/index.md","hash":"830258729bd26765d2f2bfe378ba1e3fc6de6cf6","modified":1649990435551},{"_id":"source/_data/friends.json","hash":"8b454e8017b9fe5f257c8c75c5a39666198bf99d","modified":1649990391772},{"_id":"source/_posts/MySQL中limit和offset的用法.md","hash":"613c70d5b0e1b4dec1b829681f7190421fe59fdf","modified":1646566145264},{"_id":"source/_posts/grep、sed、awk三剑客.md","hash":"6a5c4f1a238a42b66b9627fb4a4ab388338295ac","modified":1670245186038},{"_id":"source/_posts/hexo博客搭建.md","hash":"afa08e3bcc557faf4740c4662264bf3b7f89c00d","modified":1650008575262},{"_id":"source/_posts/docker入门.md","hash":"ecbad02d02279dfd43f902417b5f8d4c9a76427f","modified":1673970275862},{"_id":"source/_posts/git笔记.md","hash":"9855c5b99f5ac17555a4293944748b04f6777e05","modified":1670079227342},{"_id":"source/_posts/linux常用命令.md","hash":"48ae9b5a38e88af4b5b04a40628aaed1d4b0eb0e","modified":1670239227648},{"_id":"source/_posts/map函数的使用.md","hash":"51a2e3515bc8771d1b9bab17b155519ea6fa0c9a","modified":1646398030617},{"_id":"source/_posts/requests源码学习.md","hash":"b57ec782cdde662da4481e903c0da77120e80726","modified":1680194371399},{"_id":"source/_posts/requests学习.md","hash":"465110f25d4c0395e89e7cec6a1f8083e21436ae","modified":1650869473860},{"_id":"source/_posts/二叉树的前中后序遍历.md","hash":"74278bddd076a159a767ae0d13fe522c2685ff7f","modified":1646919643005},{"_id":"source/_posts/shell入门.md","hash":"21744445bb1251ec5470d0aa8adfdcb3b8530cca","modified":1670079197661},{"_id":"source/_posts/日常笔记.md","hash":"08c313e8a1ee1fedc62435a8dd316427f70e5be8","modified":1674056960977},{"_id":"source/_posts/反转链表.md","hash":"cd2821d10df4eb99acb0e1dc07dfe49bab8673bc","modified":1650007091740},{"_id":"source/categories/index.md","hash":"53a5bc2db55c6aa4230adec4d4e91848f0be75de","modified":1649990041189},{"_id":"source/about/index.md","hash":"95eff173667144b1bbcc94111c070645a9b64669","modified":1649990106713},{"_id":"source/friends/index.md","hash":"c3267b5766e8b04b2c1746eee29e9d9e360b047b","modified":1649990343944},{"_id":"source/contact/index.md","hash":"e8c3cecb75e2f72d870ea22bdb72517b5afa7d79","modified":1649990148704},{"_id":"source/tags/index.md","hash":"493575f5095dcabd157b2e0fd7d9f797b5e81a3b","modified":1649990072356},{"_id":"source/picture/image-20211223210005615.png","hash":"96ced0b37710838fc4f364efd30534744d68e825","modified":1669393593771},{"_id":"source/picture/image-20221119164738929.png","hash":"de3ac24a5f3035742b43ce1468fd0e745222f71a","modified":1669953251747},{"_id":"source/picture/image-20230117223015800.png","hash":"d8a449de621a0f5b7d34ddabd08cafbd211352b8","modified":1673965815806},{"_id":"source/picture/image-20230117222904780.png","hash":"08d414f8852b5cd854c9a30fa2c19ec800cb0848","modified":1673965744795},{"_id":"source/picture/image-20230117222926334.png","hash":"08d414f8852b5cd854c9a30fa2c19ec800cb0848","modified":1673965766351},{"_id":"themes/hexo-theme-matery/.gitignore","hash":"727607929a51db7ea10968f547c26041eee9cfff","modified":1606456707000},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1606456707000},{"_id":"themes/hexo-theme-matery/CHANGELOG.md","hash":"084ec8b110a20170d08a0aa5fd8accf601051835","modified":1606456707000},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"089de96e2165ea2a8a3adf38ebda85b65e7f716e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/README.md","hash":"0366f3d50b18d095b0581e7b5974e3283d693884","modified":1606456707000},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"54ccc01b097c5bf6820f0edfcece1a87b78ab32d","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/404.ejs","hash":"9c8ca67377211e5d60fdde272a975faa9a91a22a","modified":1606456707000},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"af29c47d55684d6a2c8425dac7522764522fa17f","modified":1669906991802},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"a957b05f70265a86a87d922e18488571809d2472","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"cdac701de8370f9f3794a0eed4165983993a1ca7","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"41849f9300b8dc47048333fcf4a897dd8a2a13ca","modified":1606456707000},{"_id":"themes/hexo-theme-matery/languages/zh-HK.yml","hash":"ae34ac0e175c3037675722e436637efbceea32f0","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/bb.ejs","hash":"21959d702f17a3d98b716daf44c8b5eecd59c7c5","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"00019bca11fb46477f22017cb1f5ad8444da0580","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"19d62e521c4253496db559478db5164ddfd2480e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"92892bab5578ccf758ce57e19fca08be80d0d5b9","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"974b44eb3e343cd3ee57ebad34bbb0eff4184400","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"4dc6f08e7709cc04e886be72dbf0d06469f0effc","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"90b5a4c1f70e4756db569c15a7c6cad0c77c4500","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"85a4b05bd8a6ad0f17ff2e97dae56949b379c204","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"47ee36a042bb6d52bbe1d0f329637e8ffcf1d0aa","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"3bbcdb474ca1dcad514bdc4b7763e17c55df04fd","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2cebcc5ea3614d7f76ec36670e68050cbe611202","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/background.ejs","hash":"aef6edeeb11209831a11d8c7f5d59992e2573335","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"28617bf2a35a4269eba6df466acd174e416d2d1e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/changyan.ejs","hash":"cd919d31564e118c2ee8d5cbfb7d51ee6da15d82","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"3be24e4c370671eda53bdfd99fb748f4a22948ba","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"b2dc2c8b5ed56815e55cc2ea54a6dc4eeba2375d","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"2aa8fbb04b046fa7679092a48372d7e036835dff","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90f6218512ef2eab63ada7ad2fc766ae635a2297","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"59e38c70f3d8e7165e686e5e84a627835f4321b0","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"f8438ac80df005934a330b029de292d26f0b6ecb","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"76b4a37e0364380b143fdf94bf1a5e6941564414","modified":1669907004103},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"cb0cb452be1cd1857ba600f04025b506f3b6fc79","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/minivaline.ejs","hash":"5f09386aece8f9cf31f6059bbde79cd6c5171493","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"78b70ff24b3039c871331ebec114b936c1756cc8","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"e2df12cf92a82b1a7a7add2eac1db1d954bc5511","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"d1c873c5de54498c722e155aadb8c0ec39485dfa","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"3ff94aff01936242a9f4e1f31adb9b43bfab8d53","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"880ebaf78a947631a38ad0b3d65201315845a264","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"04889f9031743c6b081d02fa4027b0dbfcc45ecf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"c76b78782ea82340104fccc089417572e0adece4","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"0ce3f9361f558b99cc2f059c5e50b0e2a152ae38","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"150529c9fb9aa8ddb42ec3e02645d301faa2503b","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"c941730a2471d6aab367cbb6e09ed08b56c83143","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"ffc55bc7e73bc698bfc58d8e3780c336b83282cf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"6f871bd3a70f720e4e451f1f4f625cbc6d8994a4","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"0e4c0a6154aa34007849928ca88f05b6185b256e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"1b3df1009234c0112424b497b18b4ad8240b3bc7","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"1d8747fda89a0b2ca3c7008867cbfeecad0578a6","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"65a2d2f9722f84c7fd98f6bdf79087a14848ebd8","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"9a472ad5591100cdb65d0df9d01034163bd6dd9d","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"e9e3e327d5de9d7aeadbde32e1d558652d9e9195","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"ef60b64021fa349b0048425d858dfcf6c906fede","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"89a0092df72d23093128f2fbbdc8ca7f83ebcfd9","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"48821e644bc73553d7c5c56d2e8ee111a70cd776","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"ab5f986f428215941aeaa0c88aefd440c47d3bcf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"8551137e94ca4e2e3b8b63d5626255884cb60cb5","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"fc42b72cddc231f7485cdc1fd6852b66be6add26","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"487aacb2454d6bf0d21cdb07ddd1fd5ddbca9038","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"a0e002377af2a7f7e4da6d9a644de97adb035925","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"a630f6e8643904073dce9eada57b5c16c4dba5e2","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"e1482406c58ea2a0eb178d7e4efb2c879cdddc80","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/contact.png","hash":"443ea472dd49b74d9d70295837eb381c8c64f02c","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","hash":"fbb58c37e2c74f127ae0c566afa9b48889aab79f","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","hash":"62e5474893dece076534352f564ceabd6e088a5a","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"18f3011c0956082f71de98c80e0e23791a150950","modified":1669905273011},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"4811662775a3be254e4e6b5fe69c48b5238d1c3d","modified":1669905377454},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1606456707000},{"_id":"source/picture/cmd_logic.5970ea4d.png","hash":"135a456e69d62e355f1213f8baefc0f175ef1ee0","modified":1673969521021},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1606456707000},{"_id":"public/atom.xml","hash":"244f32f0d7fec1f2609bcbe1e94effd6ca823197","modified":1680194424661},{"_id":"public/search.xml","hash":"933f2687199ca30cfc8f91160e6056b1a018bcc0","modified":1680194424661},{"_id":"public/404/index.html","hash":"54696070e69515398db78e64b35c0d5f77a0acaf","modified":1674055819423},{"_id":"public/about/index.html","hash":"eb91727ec7eb178f8f7d36c7ee8ca17fda0deecb","modified":1680187866809},{"_id":"public/friends/index.html","hash":"0a5874f9404fea109c7e137a4a9e259fcceab2b9","modified":1674055819423},{"_id":"public/categories/index.html","hash":"60c0e038033a1dfd0a28623decb68a0102145dce","modified":1674055819423},{"_id":"public/tags/index.html","hash":"4c088290fa94cfd5b7ce8314f8af25d00d2d1ad5","modified":1674055819423},{"_id":"public/contact/index.html","hash":"5066b0d54f9c9ffd229ae2b1f3b25bf92bbf8182","modified":1674055819423},{"_id":"public/2023/01/18/ri-chang-bi-ji/index.html","hash":"a8cd9567caae2fcbcb008e71dab4f7129323c73b","modified":1680187866809},{"_id":"public/2023/01/16/hexo-bo-ke-da-jian/index.html","hash":"2e17b249069bc8ef3e040ba62277a23c10c1123e","modified":1674055819423},{"_id":"public/2022/12/02/linux-chang-yong-ming-ling/index.html","hash":"9dc3024fd71a0bac99232aacf58ff0700cee7794","modified":1674055819423},{"_id":"public/2022/12/01/grep-sed-awk-san-jian-ke/index.html","hash":"7207d3096980900185826a22f759af25cc6ee4f0","modified":1674055819423},{"_id":"public/2022/11/26/git-bi-ji/index.html","hash":"2b9acd85db4f9b2abbd4883ee1e512e5208cf287","modified":1674055819423},{"_id":"public/2022/11/26/docker-ru-men/index.html","hash":"5927fba5d27c901c6d293a0d564f28012d772147","modified":1674055819423},{"_id":"public/2022/11/26/shell-ru-men/index.html","hash":"faa586f0c80bc218d2e59d3cbc01b7630c93e6e1","modified":1674055819423},{"_id":"public/2022/04/25/requests-yuan-ma-xue-xi/index.html","hash":"107ebd64b1133296ced5d88be8990ee58f90562b","modified":1680194424661},{"_id":"public/2022/04/17/requests-xue-xi/index.html","hash":"0912a9c0ee70423e318370b99ade07c851be07ea","modified":1674055819423},{"_id":"public/2022/03/12/fan-zhuan-lian-biao/index.html","hash":"bd92125fada6fd4034fe9780899bc1417f8febb4","modified":1674055819423},{"_id":"public/2022/03/10/er-cha-shu-de-qian-zhong-hou-xu-bian-li/index.html","hash":"306ee7a118749275835a9b48e54518c3c6f62057","modified":1674055819423},{"_id":"public/2022/03/06/mysql-zhong-limit-he-offset-de-yong-fa/index.html","hash":"5499710c791c689e203d525f00ea55eab4094e1d","modified":1674055819423},{"_id":"public/2022/03/04/map-han-shu-de-shi-yong/index.html","hash":"d94248bb7753616882ca05d1d54188241814dfac","modified":1674055819423},{"_id":"public/archives/index.html","hash":"eca9665259de09c22a39e83fd14b90d8b3913917","modified":1680194424661},{"_id":"public/archives/page/2/index.html","hash":"63b28e53f86c3f60d2630c3f6b63acfa4e1d7a74","modified":1680194424661},{"_id":"public/archives/2022/index.html","hash":"029ac63a4a13ccf4b2b4f49d41b0e6fe2faa2cea","modified":1680194424661},{"_id":"public/archives/2022/page/2/index.html","hash":"635e4fbd37142295060b3534adcc03b30f6b5c8d","modified":1680194424661},{"_id":"public/archives/2022/03/index.html","hash":"e8c22da7e6175f937f31e5ab600c1d773ec59d02","modified":1680194424661},{"_id":"public/archives/2022/04/index.html","hash":"1e6d75fdaec574a1c61f40aed9548d15dbad93e8","modified":1680194424661},{"_id":"public/archives/2022/11/index.html","hash":"1506a61d1130e7d2da8efece043deeec866c6970","modified":1680194424661},{"_id":"public/archives/2022/12/index.html","hash":"b805c91410b5a78a9e8f395c182cfa7c10230744","modified":1680194424661},{"_id":"public/archives/2023/index.html","hash":"9a74c5810107f5f88ea4e7ea727fa17ce0ae23df","modified":1680194424661},{"_id":"public/archives/2023/01/index.html","hash":"cbb28d644c361771f69eb6bc9ffe6ec7f2cbd420","modified":1680194424661},{"_id":"public/categories/docker/index.html","hash":"2b83615de64d97e8c284e1a772ba375a764e31ba","modified":1674055819423},{"_id":"public/categories/git/index.html","hash":"fd561fff64e17b4e75464f53457ed794e9843c74","modified":1674055819423},{"_id":"public/categories/linux/index.html","hash":"4619e77f74d46191dcef395831a325880a29332e","modified":1674055819423},{"_id":"public/index.html","hash":"5f04c035565276cdad68ac9b290fc1fc4ad15639","modified":1680187866809},{"_id":"public/categories/requests/index.html","hash":"fa268f9d589fe57bd1be930365d9e5b38c0e0130","modified":1674055819423},{"_id":"public/categories/数据结构与算法/index.html","hash":"ca04886dd29366d34bec17f6ae4252da8d573800","modified":1674055819423},{"_id":"public/page/2/index.html","hash":"932592503039b3f2383f762f84f5e6dd9fad5481","modified":1674055819423},{"_id":"public/tags/MySQL/index.html","hash":"f4dfe23598841d99d5672eb5aeb7cb075c3635ed","modified":1674055819423},{"_id":"public/tags/docker/index.html","hash":"ddf54e81d5a74f9bace261d04d8c5008362e24b1","modified":1674055819423},{"_id":"public/tags/基础/index.html","hash":"82d85c93a673d8345b15be2a9bdd12375294aa3b","modified":1674055819423},{"_id":"public/tags/git/index.html","hash":"6204c005756a803085f8174a9cd953649f1a0210","modified":1674055819423},{"_id":"public/tags/hexo/index.html","hash":"6b1c8832f14557b18b4b36e4c444e1e0077e97bd","modified":1674055819423},{"_id":"public/tags/三剑客/index.html","hash":"da072fd27a3906a1a3c4faf6c19709a149f47a4f","modified":1674055819423},{"_id":"public/tags/linux/index.html","hash":"4d37daeb8fa893a47edd5320eaa56b49377e12f8","modified":1674055819423},{"_id":"public/tags/python基础/index.html","hash":"df966c55156027ccfde56f2692723a2e63950c48","modified":1674055819423},{"_id":"public/tags/源码学习/index.html","hash":"c67f5964d813d73fbd33402aefa85d394c835867","modified":1674055819423},{"_id":"public/tags/requests/index.html","hash":"a458565edfbcfad72f6e2a59551837f0318f6f40","modified":1674055819423},{"_id":"public/tags/数据结构/index.html","hash":"e5931473407a2a440bc8f6ce856e1ec57c196b09","modified":1674055819423},{"_id":"public/tags/shell/index.html","hash":"b8f641c132c641350b6b0fda991a4f714fbde666","modified":1674055819423},{"_id":"public/tags/数据结构与算法/index.html","hash":"160b6c6c3962df361e3d3acdd385ae63166b4954","modified":1674055819423},{"_id":"public/CNAME","hash":"91b54899d29f86267a84f0433da962fa716485c9","modified":1674055819423},{"_id":"public/picture/image-20221119164738929.png","hash":"de3ac24a5f3035742b43ce1468fd0e745222f71a","modified":1674055819423},{"_id":"public/picture/image-20211223210005615.png","hash":"96ced0b37710838fc4f364efd30534744d68e825","modified":1674055819423},{"_id":"public/picture/image-20230117223015800.png","hash":"d8a449de621a0f5b7d34ddabd08cafbd211352b8","modified":1674055819423},{"_id":"public/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1674055819423},{"_id":"public/medias/contact.png","hash":"443ea472dd49b74d9d70295837eb381c8c64f02c","modified":1674055819423},{"_id":"public/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1674055819423},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1674055819423},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1674055819423},{"_id":"public/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1674055819423},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1674055819423},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1674055819423},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1674055819423},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1674055819423},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1674055819423},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1674055819423},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1674055819423},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1674055819423},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1674055819423},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1674055819423},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1674055819423},{"_id":"public/medias/reward/alipay.jpg","hash":"4811662775a3be254e4e6b5fe69c48b5238d1c3d","modified":1674055819423},{"_id":"public/medias/reward/wechat.png","hash":"18f3011c0956082f71de98c80e0e23791a150950","modified":1674055819423},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1674055819423},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1674055819423},{"_id":"public/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1674055819423},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1674055819423},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1674055819423},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1674055819423},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1674055819423},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1674055819423},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1674055819423},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1674055819423},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1674055819423},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1674055819423},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1674055819423},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1674055819423},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1674055819423},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1674055819423},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1674055819423},{"_id":"public/picture/image-20230117222904780.png","hash":"08d414f8852b5cd854c9a30fa2c19ec800cb0848","modified":1674055819423},{"_id":"public/picture/image-20230117222926334.png","hash":"08d414f8852b5cd854c9a30fa2c19ec800cb0848","modified":1674055819423},{"_id":"public/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1674055819423},{"_id":"public/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1674055819423},{"_id":"public/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1674055819423},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1674055819423},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1674055819423},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1674055819423},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1674055819423},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1674055819423},{"_id":"public/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1674055819423},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1674055819423},{"_id":"public/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1674055819423},{"_id":"public/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1674055819423},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1674055819423},{"_id":"public/js/search.js","hash":"e1482406c58ea2a0eb178d7e4efb2c879cdddc80","modified":1674055819423},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1674055819423},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1674055819423},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1674055819423},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1674055819423},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1674055819423},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1674055819423},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1674055819423},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1674055819423},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1674055819423},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1674055819423},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1674055819423},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1674055819423},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1674055819423},{"_id":"public/libs/prism/prism.css","hash":"62e5474893dece076534352f564ceabd6e088a5a","modified":1674055819423},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1674055819423},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1674055819423},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1674055819423},{"_id":"public/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1674055819423},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1674055819423},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1674055819423},{"_id":"public/css/matery.css","hash":"a630f6e8643904073dce9eada57b5c16c4dba5e2","modified":1674055819423},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1674055819423},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1674055819423},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1674055819423},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1674055819423},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1674055819423},{"_id":"public/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1674055819423},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1674055819423},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1674055819423},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1674055819423},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1674055819423},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1674055819423},{"_id":"public/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1674055819423},{"_id":"public/libs/minivaline/MiniValine.js","hash":"fbb58c37e2c74f127ae0c566afa9b48889aab79f","modified":1674055819423},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1674055819423},{"_id":"public/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1674055819423},{"_id":"public/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1674055819423},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1674055819423},{"_id":"public/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1674055819423},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1674055819423},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1674055819423},{"_id":"public/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1674055819423},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1674055819423},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1674055819423},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1674055819423},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1674055819423},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1674055819423},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1674055819423},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1674055819423},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1674055819423},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1674055819423},{"_id":"public/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1674055819423},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1674055819423},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1674055819423},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1674055819423},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1674055819423},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1674055819423},{"_id":"public/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1674055819423},{"_id":"public/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1674055819423},{"_id":"public/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1674055819423},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1674055819423},{"_id":"public/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1674055819423},{"_id":"public/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1674055819423},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1674055819423},{"_id":"public/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1674055819423},{"_id":"public/picture/cmd_logic.5970ea4d.png","hash":"135a456e69d62e355f1213f8baefc0f175ef1ee0","modified":1674055819423},{"_id":"public/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1674055819423},{"_id":"public/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1674055819423}],"Category":[{"name":"docker","_id":"cld1tm1iw0007bsw780t2duw2"},{"name":"git","_id":"cld1tm1j0000gbsw7h2cw631l"},{"name":"linux","_id":"cld1tm1j3000lbsw72x8y3zll"},{"name":"requests","_id":"cld1tm1j7000wbsw7fzcsda90"},{"name":"数据结构与算法","_id":"cld1tm1j90012bsw72qwg3h9k"}],"Data":[{"_id":"friends","data":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}],"Page":[{"title":"404","date":"2022-04-15T02:40:16.000Z","type":"404","layout":"404","description":"Oops～，我崩溃了！找不到你想要的页面 :(","_content":"","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2022-04-15 10:40:16\ntype: \"404\"\nlayout: \"404\"\ndescription: \"Oops～，我崩溃了！找不到你想要的页面 :(\"\n---\n","updated":"2022-04-15T02:40:35.551Z","path":"404/index.html","comments":1,"_id":"cld1tm1io0000bsw7f2t0ha1r","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"about","date":"2022-04-15T02:34:51.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2022-04-15 10:34:51\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2022-04-15T02:35:06.713Z","path":"about/index.html","comments":1,"_id":"cld1tm1it0002bsw7gf8eez14","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"friends","date":"2022-04-15T02:38:40.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2022-04-15 10:38:40\ntype: \"friends\"\nlayout: \"friends\"\n---\n","updated":"2022-04-15T02:39:03.944Z","path":"friends/index.html","comments":1,"_id":"cld1tm1iv0005bsw793582zko","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"categories","date":"2022-04-15T02:33:16.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-04-15 10:33:16\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2022-04-15T02:34:01.189Z","path":"categories/index.html","comments":1,"_id":"cld1tm1ix0008bsw7chxxc8nu","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"tags","date":"2022-04-15T02:34:15.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-04-15 10:34:15\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2022-04-15T02:34:32.356Z","path":"tags/index.html","comments":1,"_id":"cld1tm1iz000absw7esly3uv1","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"contact","date":"2022-04-15T02:35:36.000Z","type":"contact","layout":"contact","_content":"","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2022-04-15 10:35:36\ntype: \"contact\"\nlayout: \"contact\"\n---\n","updated":"2022-04-15T02:35:48.704Z","path":"contact/index.html","comments":1,"_id":"cld1tm1j0000ebsw74uy99sg4","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""}],"Post":[{"title":"MySQL中limit和offset的用法","date":"2022-03-06T11:26:21.000Z","_content":"\n```python\nselect* from article LIMIT 1,3 等价于 select * from article LIMIT 3 OFFSET 1\t取出第2-4条数据\n\nselect* from article LIMIT 0,3  等价于 select* from article LIMIT 3  \n```\n\n","source":"_posts/MySQL中limit和offset的用法.md","raw":"---\ntitle: MySQL中limit和offset的用法\ndate: 2022-03-06 19:26:21\ntags: MySQL\n---\n\n```python\nselect* from article LIMIT 1,3 等价于 select * from article LIMIT 3 OFFSET 1\t取出第2-4条数据\n\nselect* from article LIMIT 0,3  等价于 select* from article LIMIT 3  \n```\n\n","slug":"MySQL中limit和offset的用法","published":1,"updated":"2022-03-06T11:29:05.264Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld1tm1iq0001bsw78sa3e9j9","content":"<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">select<span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> article LIMIT <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span> 等价于 select <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> article LIMIT <span class=\"token number\">3</span> OFFSET <span class=\"token number\">1</span>\t取出第<span class=\"token number\">2</span><span class=\"token operator\">-</span><span class=\"token number\">4</span>条数据\n\nselect<span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> article LIMIT <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span>  等价于 select<span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> article LIMIT <span class=\"token number\">3</span>  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">select<span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> article LIMIT <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span> 等价于 select <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> article LIMIT <span class=\"token number\">3</span> OFFSET <span class=\"token number\">1</span>\t取出第<span class=\"token number\">2</span><span class=\"token operator\">-</span><span class=\"token number\">4</span>条数据\n\nselect<span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> article LIMIT <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span>  等价于 select<span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> article LIMIT <span class=\"token number\">3</span>  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"docker入门","date":"2022-11-25T16:24:22.000Z","author":"三岁浪迹天涯","_content":"\n## docker概念\n\n![image-20230117222926334](D:\\Sheep1433.github.io\\source\\picture\\image-20230117222926334.png)\n\n![image-20230117223015800](D:\\Sheep1433.github.io\\source\\picture\\image-20230117223015800.png)\n\n核心概念：镜像、容器、仓库\n\n## docker安装\n\n不支持windows10家庭版\n\nCentOS 安装配置\n\nyum install -y yum-utils device-mapper-persistent-data lvm2\t\t安装依赖\n\n yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\t添加源\n\nyum -y install docker-ce \t安装docker\t\n\n\n\n或者curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun\n\n\n\n此时直接使用docker ps查看进程是无效的，需要先systemctl start docker启动\n\n设置开机自启动：\tsystemctl enable docker\n\ndocker-compose安装\n\n```\n# curl -L https://github.com/docker/compose/releases/download/1.8.1/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\n# chmod +x /usr/local/bin/docker-compose\n```\n\n## docker常用命令\n\n**一张图总结 Docker 的命令**\n\n![img](D:\\Sheep1433.github.io\\source\\picture\\cmd_logic.5970ea4d.png)\n\n```\nexec\tbuild\t\tcommit\texec\tlogs\tps\t \tpull\npush\trestart\t\trm\t\trmi\t\trun\t\tsearch\tstart\ntag\t\tversion\t\tinfo\tsave\thistory\t……\n```\n\n\n\n```shell\ndocker version\tdocker版本信息\ndocker info\t\tdocker系统信息\n# 镜像相关\ndocker images\t查看所有镜像\ndocker search busybox \t在网上搜索镜像\ndocker pull busybOx:latest\t拉取下载\ndocker save busybox > busybox.tar\t导出\ndocker load < busybox.tar\t导入\ndocker rmi busybox:latest\t删除镜像\ndocker tag busybox:latest busybox:test \t更改镜像名\ndocker history busybox \t查看镜像创建历史\n# 容器相关 \n# docker run中-p：端口映射，--name：命名，-v：挂载目录\ndocker run -d -it busybox /bin/bash\t# 这种运行方式，容器不会立刻被退出 -d以守护态运行\ndocker run -d --name=busybox busybox:latest ping 114.114.114.114\t运行容器\n\ndocker ps, docker ps -a\t\t查看运行的容器\ndocker top busybox \t\t查看容器中运行的进程\ndocker stats busybox \t查看资源占用\n# 处于终止状态的容器，可以通过 `docker start` 命令来重新启动。\n# 此外，`docker restart` 命令会将一个运行态的容器终止，然后再重新启动它。\ndocker start/restart/stop/kill busybox 容器\ndocker pause/unpause busybox \t暂停容器\ndocker rm -f busybox \t强制删除容器\ndocker exec -it busybox ls\t执行命令\ndocker exec -it elasticsearch /bin/bash\t在该容器下执行bash命令\ndocker cp busyboxL/etc/hosts hosts\t\t复制文件\ndocker logs -f busybox\t\t查看容器日志\ndocker inspect busybox\t\t查看容器/镜像的元信息\ndocker inspect -f'{{.Id}}' busybox\t\t格式化输出\n\ndocker build -t {tag} .\t基于dockerfile在构建镜像\ndocker commit -m \"提交信息\" {容器id} {命名}\t将容器转化为镜像\n```\n\n当利用 `docker run` 来创建容器时，Docker 在后台运行的标准操作包括：\n\n- 检查本地是否存在指定的镜像，不存在就从公有仓库下载\n- 利用镜像创建并启动一个容器\n- 分配一个文件系统，并在只读的镜像层外面挂载一层可读写层\n- 从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去\n- 从地址池配置一个 ip 地址给容器\n- 执行用户指定的应用程序\n- 执行完毕后容器被终止\n\nNginx容器\n\n```bash\ndocker run -d --name nginx -p 8088:80 nginx1.17.9\t\t\t# 运行\ndocker run -d --name nginx1 -p 8089:80 -v ${PWD}/html:/usr/share/nginx/html/nginx:1.17.9\t挂载目录\ndocker stop 停止\n```\n\nJenkins容器\n\n```bash\ndocker run -p 8888:8080 --name myjenkins --user root myjenkins -v /data/jenkins_home:/var/jenkins_home jenkins/jenkins:lts\ndocker exec -it --user root <container id> /bin/bash\n```\n\n\n\n## Dockerfile\n\n**示例**\n\n```dockerfile\n# Dockerfile\nFROM        ubuntu:14.04\nRUN         apt-get update\nRUN         apt-get -y install redis-server\nEXPOSE      6379\nENTRYPOINT  [\"/usr/bin/redis-server\"]\n```\n\n### RUN\n\n格式为 `RUN <command>` 或 `RUN [\"executable\", \"param1\", \"param2\"]`。\n\n前者将在 shell 终端中运行命令，即 `/bin/sh -c`；后者则使用 `exec` 执行。指定使用其它终端可以通过第二种方式实现，例如 `RUN [\"/bin/bash\", \"-c\", \"echo hello\"]`。\n\n每条 `RUN` 指令将在当前镜像基础上执行指定命令，并提交为新的镜像。当命令较长时可以使用 `\\` 来换行\n\n### CMD\n\n支持三种格式\n\n- `CMD [\"executable\",\"param1\",\"param2\"]` 使用 `exec` 执行，推荐方式；\n- `CMD command param1 param2` 在 `/bin/sh` 中执行，提供给需要交互的应用；\n- `CMD [\"param1\",\"param2\"]` 提供给 `ENTRYPOINT` 的默认参数；\n\n指定启动容器时执行的命令，每个 Dockerfile 只能有一条 `CMD` 命令。如果指定了多条命令，只有最后一条会被执行。\n\n如果用户启动容器时候指定了运行的命令，则会覆盖掉 `CMD` 指定的命令。\n\n### ENV\n\n格式为 `ENV <key> <value>`。 指定一个环境变量，会被后续 `RUN` 指令使用，并在容器运行时保持。\n\n例如\n\n```\nENV PG_MAJOR 9.3\nENV PG_VERSION 9.3.4\nRUN curl -SL http://example.com/postgres-$PG_VERSION.tar.xz | tar -xJC /usr/src/postgress && …\nENV PATH /usr/local/postgres-$PG_MAJOR/bin:$PATH\n```\n\n### EXPOSE\n\n格式为 `EXPOSE <port> [<port>...]`。\n\n告诉 Docker 服务端容器暴露的端口号，供互联系统使用。在启动容器时需要通过 -P，Docker 主机会自动分配一个端口转发到指定的端口。\n\n### ADD\n\n格式为 `ADD <src> <dest>`。\n\n该命令将复制指定的 `<src>` 到容器中的 `<dest>`。 其中 `<src>` 可以是Dockerfile所在目录的一个相对路径；也可以是一个 URL；还可以是一个 tar 文件（自动解压为目录）。\n\n### COPY\n\n格式为 `COPY <src> <dest>`。\n\n复制本地主机的 `<src>`（为 Dockerfile 所在目录的相对路径）到容器中的 `<dest>`。\n\n当使用本地目录为源目录时，推荐使用 `COPY`。\n\n### WORKDIR\n\n格式为 `WORKDIR /path/to/workdir`。\n\n为后续的 `RUN`、`CMD`、`ENTRYPOINT` 指令配置工作目录。\n\n可以使用多个 `WORKDIR` 指令，后续命令如果参数是相对路径，则会基于之前命令指定的路径\n\n## docker-compose常用命令\n\nDockerfile 可以让用户管理一个单独的应用容器；而 Compose 则允许用户在一个模板（YAML 格式）中定义一组相关联的应用容器（被称为一个 `project`，即项目），例如一个 Web 服务容器再加上后端的数据库服务容器等。\n\n常用命令\n\n```bash\nbuild\t\t# 构建或重新构建服务。服务一旦构建后，将会带上一个标记名，例如 web_db。可以随时在项目目录下运行 `docker-compose build` 来重新构建服务。\nhelp\t\t\nkill\t\t# 通过发送 `SIGKILL` 信号来强制停止服务容器。支持通过参数来指定发送的信号，例如\nlogs\nport\nps\npull\nrm\nrun\nstart\nstop\nup\t\t\t#\t构建，（重新）创建，启动，链接一个服务相关的容器。链接的服务都将会启动，除非他们已经运行。默认情况， `docker-compose up` 将会整合所有容器的输出，并且退出时，所有容器将会停止。如果使用 `docker-compose up -d` ，将会在后台启动并运行所有的容器。默认情况，如果该服务的容器已经存在，`docker-compose up` 将会停止并尝试重新创建他们（保持使用`volumes-from` 挂载的卷），以保证 `docker-compose.yml` 的修改生效。如果你不想容器被停止重新创建，可以使用 `docker-compose up --no-recreate`。如果需要的话，这样将会启动已经停止的容器\n```\n\n## docker-compose.yml常用字段\n\n默认的模板文件是 `docker-compose.yml`，其中定义的每个服务都必须通过 `image` 指令指定镜像或 `build` 指令（需要 Dockerfile）来自动构建。\n\n其它大部分指令都跟 `docker run` 中的类似。\n\n如果使用 `build` 指令，在 `Dockerfile` 中设置的选项(例如：`CMD`, `EXPOSE`, `VOLUME`, `ENV` 等) 将会自动被获取，无需在 `docker-compose.yml` 中再次设置。\n\n### image\n\n指定为镜像名称或镜像 ID。如果镜像在本地不存在，`Compose` 将会尝试拉去这个镜像。\n\n例如：\n\n```sh\nimage: ubuntu\nimage: orchardup/postgresql\nimage: a4bc65fd\n```\n\n### build\n\n指定 `Dockerfile` 所在文件夹的路径。 `Compose` 将会利用它自动构建这个镜像，然后使用这个镜像。\n\n```\nbuild: /path/to/build/dir\n```\n\n### command\n\n覆盖容器启动后默认执行的命令。\n\n```sh\ncommand: bundle exec thin -p 3000\n```\n\n### link\n\n链接到其它服务中的容器。使用服务名称（同时作为别名）或服务名称：服务别名 `（SERVICE:ALIAS）` 格式都可以。\n\n```sh\nlinks:\n - db\n - db:database\n - redis\n```\n\n使用的别名将会自动在服务容器中的 `/etc/hosts` 里创建。例如：\n\n```sh\n172.17.2.186  db\n172.17.2.186  database\n172.17.2.187  redis\n```\n\n相应的环境变量也将被创建。\n\n### external_links\n\n链接到 docker-compose.yml 外部的容器，甚至 并非 `Compose` 管理的容器。参数格式跟 `links` 类似。\n\n```\nexternal_links:\n - redis_1\n - project_db_1:mysql\n - project_db_1:postgresql\n```\n\n### ports\n\n暴露端口信息。\n\n使用宿主：容器 `（HOST:CONTAINER）`格式或者仅仅指定容器的端口（宿主将会随机选择端口）都可以。\n\n```\nports:\n - \"3000\"\n - \"8000:8000\"\n - \"49100:22\"\n - \"127.0.0.1:8001:8001\"\n```\n\n*注：当使用 `HOST:CONTAINER` 格式来映射端口时，如果你使用的容器端口小于 60 你可能会得到错误得结果，因为 `YAML` 将会解析 `xx:yy` 这种数字格式为 60 进制。所以建议采用字符串格式。*\n\n### expose\n\n暴露端口，但不映射到宿主机，只被连接的服务访问。\n\n仅可以指定内部端口为参数\n\n```sh\nexpose:\n - \"3000\"\n - \"8000\"\n```\n\n### volumes\n\n卷挂载路径设置。可以设置宿主机路径 （`HOST:CONTAINER`） 或加上访问模式 （`HOST:CONTAINER:ro`）。\n\n```sh\nvolumes:\n - /var/lib/mysql\n - cache/:/tmp/cache\n - ~/configs:/etc/configs/:ro\n```\n\n### volumes_from\n\n从另一个服务或容器挂载它的所有卷。\n\n```sh\nvolumes_from:\n - service_name\n - container_name\n```\n\n### environment\n\n设置环境变量。你可以使用数组或字典两种格式。\n\n只给定名称的变量会自动获取它在 Compose 主机上的值，可以用来防止泄露不必要的数据。\n\n```\nenvironment:\n  RACK_ENV: development\n  SESSION_SECRET:\n\nenvironment:\n  - RACK_ENV=development\n  - SESSION_SECRET\n```\n\n### env_file\n\n从文件中获取环境变量，可以为单独的文件路径或列表。\n\n如果通过 `docker-compose -f FILE` 指定了模板文件，则 `env_file` 中路径会基于模板文件路径。\n\n如果有变量名称与 `environment` 指令冲突，则以后者为准。\n\n```sh\nenv_file: .env\n\nenv_file:\n  - ./common.env\n  - ./apps/web.env\n  - /opt/secrets.env\n```\n\n环境变量文件中每一行必须符合格式，支持 `#` 开头的注释行。\n\n```sh\n# common.env: Set Rails/Rack environment\nRACK_ENV=development\n```\n\n### extends\n\n基于已有的服务进行扩展。例如我们已经有了一个 webapp 服务，模板文件为 `common.yml`。\n\n```sh\n# common.yml\nwebapp:\n  build: ./webapp\n  environment:\n    - DEBUG=false\n    - SEND_EMAILS=false\n```\n\n编写一个新的 `development.yml` 文件，使用 `common.yml` 中的 webapp 服务进行扩展。\n\n```sh\n# development.yml\nweb:\n  extends:\n    file: common.yml\n    service: webapp\n  ports:\n    - \"8000:8000\"\n  links:\n    - db\n  environment:\n    - DEBUG=true\ndb:\n  image: postgres\n```\n\n后者会自动继承 common.yml 中的 webapp 服务及相关环节变量。\n\n\n\n","source":"_posts/docker入门.md","raw":"---\ntitle: docker入门\ndate: 2022-11-26 00:24:22\nauthor: 三岁浪迹天涯\ncategories: docker\ntags:\n  - docker\n  - 基础\n---\n\n## docker概念\n\n![image-20230117222926334](D:\\Sheep1433.github.io\\source\\picture\\image-20230117222926334.png)\n\n![image-20230117223015800](D:\\Sheep1433.github.io\\source\\picture\\image-20230117223015800.png)\n\n核心概念：镜像、容器、仓库\n\n## docker安装\n\n不支持windows10家庭版\n\nCentOS 安装配置\n\nyum install -y yum-utils device-mapper-persistent-data lvm2\t\t安装依赖\n\n yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\t添加源\n\nyum -y install docker-ce \t安装docker\t\n\n\n\n或者curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun\n\n\n\n此时直接使用docker ps查看进程是无效的，需要先systemctl start docker启动\n\n设置开机自启动：\tsystemctl enable docker\n\ndocker-compose安装\n\n```\n# curl -L https://github.com/docker/compose/releases/download/1.8.1/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\n# chmod +x /usr/local/bin/docker-compose\n```\n\n## docker常用命令\n\n**一张图总结 Docker 的命令**\n\n![img](D:\\Sheep1433.github.io\\source\\picture\\cmd_logic.5970ea4d.png)\n\n```\nexec\tbuild\t\tcommit\texec\tlogs\tps\t \tpull\npush\trestart\t\trm\t\trmi\t\trun\t\tsearch\tstart\ntag\t\tversion\t\tinfo\tsave\thistory\t……\n```\n\n\n\n```shell\ndocker version\tdocker版本信息\ndocker info\t\tdocker系统信息\n# 镜像相关\ndocker images\t查看所有镜像\ndocker search busybox \t在网上搜索镜像\ndocker pull busybOx:latest\t拉取下载\ndocker save busybox > busybox.tar\t导出\ndocker load < busybox.tar\t导入\ndocker rmi busybox:latest\t删除镜像\ndocker tag busybox:latest busybox:test \t更改镜像名\ndocker history busybox \t查看镜像创建历史\n# 容器相关 \n# docker run中-p：端口映射，--name：命名，-v：挂载目录\ndocker run -d -it busybox /bin/bash\t# 这种运行方式，容器不会立刻被退出 -d以守护态运行\ndocker run -d --name=busybox busybox:latest ping 114.114.114.114\t运行容器\n\ndocker ps, docker ps -a\t\t查看运行的容器\ndocker top busybox \t\t查看容器中运行的进程\ndocker stats busybox \t查看资源占用\n# 处于终止状态的容器，可以通过 `docker start` 命令来重新启动。\n# 此外，`docker restart` 命令会将一个运行态的容器终止，然后再重新启动它。\ndocker start/restart/stop/kill busybox 容器\ndocker pause/unpause busybox \t暂停容器\ndocker rm -f busybox \t强制删除容器\ndocker exec -it busybox ls\t执行命令\ndocker exec -it elasticsearch /bin/bash\t在该容器下执行bash命令\ndocker cp busyboxL/etc/hosts hosts\t\t复制文件\ndocker logs -f busybox\t\t查看容器日志\ndocker inspect busybox\t\t查看容器/镜像的元信息\ndocker inspect -f'{{.Id}}' busybox\t\t格式化输出\n\ndocker build -t {tag} .\t基于dockerfile在构建镜像\ndocker commit -m \"提交信息\" {容器id} {命名}\t将容器转化为镜像\n```\n\n当利用 `docker run` 来创建容器时，Docker 在后台运行的标准操作包括：\n\n- 检查本地是否存在指定的镜像，不存在就从公有仓库下载\n- 利用镜像创建并启动一个容器\n- 分配一个文件系统，并在只读的镜像层外面挂载一层可读写层\n- 从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去\n- 从地址池配置一个 ip 地址给容器\n- 执行用户指定的应用程序\n- 执行完毕后容器被终止\n\nNginx容器\n\n```bash\ndocker run -d --name nginx -p 8088:80 nginx1.17.9\t\t\t# 运行\ndocker run -d --name nginx1 -p 8089:80 -v ${PWD}/html:/usr/share/nginx/html/nginx:1.17.9\t挂载目录\ndocker stop 停止\n```\n\nJenkins容器\n\n```bash\ndocker run -p 8888:8080 --name myjenkins --user root myjenkins -v /data/jenkins_home:/var/jenkins_home jenkins/jenkins:lts\ndocker exec -it --user root <container id> /bin/bash\n```\n\n\n\n## Dockerfile\n\n**示例**\n\n```dockerfile\n# Dockerfile\nFROM        ubuntu:14.04\nRUN         apt-get update\nRUN         apt-get -y install redis-server\nEXPOSE      6379\nENTRYPOINT  [\"/usr/bin/redis-server\"]\n```\n\n### RUN\n\n格式为 `RUN <command>` 或 `RUN [\"executable\", \"param1\", \"param2\"]`。\n\n前者将在 shell 终端中运行命令，即 `/bin/sh -c`；后者则使用 `exec` 执行。指定使用其它终端可以通过第二种方式实现，例如 `RUN [\"/bin/bash\", \"-c\", \"echo hello\"]`。\n\n每条 `RUN` 指令将在当前镜像基础上执行指定命令，并提交为新的镜像。当命令较长时可以使用 `\\` 来换行\n\n### CMD\n\n支持三种格式\n\n- `CMD [\"executable\",\"param1\",\"param2\"]` 使用 `exec` 执行，推荐方式；\n- `CMD command param1 param2` 在 `/bin/sh` 中执行，提供给需要交互的应用；\n- `CMD [\"param1\",\"param2\"]` 提供给 `ENTRYPOINT` 的默认参数；\n\n指定启动容器时执行的命令，每个 Dockerfile 只能有一条 `CMD` 命令。如果指定了多条命令，只有最后一条会被执行。\n\n如果用户启动容器时候指定了运行的命令，则会覆盖掉 `CMD` 指定的命令。\n\n### ENV\n\n格式为 `ENV <key> <value>`。 指定一个环境变量，会被后续 `RUN` 指令使用，并在容器运行时保持。\n\n例如\n\n```\nENV PG_MAJOR 9.3\nENV PG_VERSION 9.3.4\nRUN curl -SL http://example.com/postgres-$PG_VERSION.tar.xz | tar -xJC /usr/src/postgress && …\nENV PATH /usr/local/postgres-$PG_MAJOR/bin:$PATH\n```\n\n### EXPOSE\n\n格式为 `EXPOSE <port> [<port>...]`。\n\n告诉 Docker 服务端容器暴露的端口号，供互联系统使用。在启动容器时需要通过 -P，Docker 主机会自动分配一个端口转发到指定的端口。\n\n### ADD\n\n格式为 `ADD <src> <dest>`。\n\n该命令将复制指定的 `<src>` 到容器中的 `<dest>`。 其中 `<src>` 可以是Dockerfile所在目录的一个相对路径；也可以是一个 URL；还可以是一个 tar 文件（自动解压为目录）。\n\n### COPY\n\n格式为 `COPY <src> <dest>`。\n\n复制本地主机的 `<src>`（为 Dockerfile 所在目录的相对路径）到容器中的 `<dest>`。\n\n当使用本地目录为源目录时，推荐使用 `COPY`。\n\n### WORKDIR\n\n格式为 `WORKDIR /path/to/workdir`。\n\n为后续的 `RUN`、`CMD`、`ENTRYPOINT` 指令配置工作目录。\n\n可以使用多个 `WORKDIR` 指令，后续命令如果参数是相对路径，则会基于之前命令指定的路径\n\n## docker-compose常用命令\n\nDockerfile 可以让用户管理一个单独的应用容器；而 Compose 则允许用户在一个模板（YAML 格式）中定义一组相关联的应用容器（被称为一个 `project`，即项目），例如一个 Web 服务容器再加上后端的数据库服务容器等。\n\n常用命令\n\n```bash\nbuild\t\t# 构建或重新构建服务。服务一旦构建后，将会带上一个标记名，例如 web_db。可以随时在项目目录下运行 `docker-compose build` 来重新构建服务。\nhelp\t\t\nkill\t\t# 通过发送 `SIGKILL` 信号来强制停止服务容器。支持通过参数来指定发送的信号，例如\nlogs\nport\nps\npull\nrm\nrun\nstart\nstop\nup\t\t\t#\t构建，（重新）创建，启动，链接一个服务相关的容器。链接的服务都将会启动，除非他们已经运行。默认情况， `docker-compose up` 将会整合所有容器的输出，并且退出时，所有容器将会停止。如果使用 `docker-compose up -d` ，将会在后台启动并运行所有的容器。默认情况，如果该服务的容器已经存在，`docker-compose up` 将会停止并尝试重新创建他们（保持使用`volumes-from` 挂载的卷），以保证 `docker-compose.yml` 的修改生效。如果你不想容器被停止重新创建，可以使用 `docker-compose up --no-recreate`。如果需要的话，这样将会启动已经停止的容器\n```\n\n## docker-compose.yml常用字段\n\n默认的模板文件是 `docker-compose.yml`，其中定义的每个服务都必须通过 `image` 指令指定镜像或 `build` 指令（需要 Dockerfile）来自动构建。\n\n其它大部分指令都跟 `docker run` 中的类似。\n\n如果使用 `build` 指令，在 `Dockerfile` 中设置的选项(例如：`CMD`, `EXPOSE`, `VOLUME`, `ENV` 等) 将会自动被获取，无需在 `docker-compose.yml` 中再次设置。\n\n### image\n\n指定为镜像名称或镜像 ID。如果镜像在本地不存在，`Compose` 将会尝试拉去这个镜像。\n\n例如：\n\n```sh\nimage: ubuntu\nimage: orchardup/postgresql\nimage: a4bc65fd\n```\n\n### build\n\n指定 `Dockerfile` 所在文件夹的路径。 `Compose` 将会利用它自动构建这个镜像，然后使用这个镜像。\n\n```\nbuild: /path/to/build/dir\n```\n\n### command\n\n覆盖容器启动后默认执行的命令。\n\n```sh\ncommand: bundle exec thin -p 3000\n```\n\n### link\n\n链接到其它服务中的容器。使用服务名称（同时作为别名）或服务名称：服务别名 `（SERVICE:ALIAS）` 格式都可以。\n\n```sh\nlinks:\n - db\n - db:database\n - redis\n```\n\n使用的别名将会自动在服务容器中的 `/etc/hosts` 里创建。例如：\n\n```sh\n172.17.2.186  db\n172.17.2.186  database\n172.17.2.187  redis\n```\n\n相应的环境变量也将被创建。\n\n### external_links\n\n链接到 docker-compose.yml 外部的容器，甚至 并非 `Compose` 管理的容器。参数格式跟 `links` 类似。\n\n```\nexternal_links:\n - redis_1\n - project_db_1:mysql\n - project_db_1:postgresql\n```\n\n### ports\n\n暴露端口信息。\n\n使用宿主：容器 `（HOST:CONTAINER）`格式或者仅仅指定容器的端口（宿主将会随机选择端口）都可以。\n\n```\nports:\n - \"3000\"\n - \"8000:8000\"\n - \"49100:22\"\n - \"127.0.0.1:8001:8001\"\n```\n\n*注：当使用 `HOST:CONTAINER` 格式来映射端口时，如果你使用的容器端口小于 60 你可能会得到错误得结果，因为 `YAML` 将会解析 `xx:yy` 这种数字格式为 60 进制。所以建议采用字符串格式。*\n\n### expose\n\n暴露端口，但不映射到宿主机，只被连接的服务访问。\n\n仅可以指定内部端口为参数\n\n```sh\nexpose:\n - \"3000\"\n - \"8000\"\n```\n\n### volumes\n\n卷挂载路径设置。可以设置宿主机路径 （`HOST:CONTAINER`） 或加上访问模式 （`HOST:CONTAINER:ro`）。\n\n```sh\nvolumes:\n - /var/lib/mysql\n - cache/:/tmp/cache\n - ~/configs:/etc/configs/:ro\n```\n\n### volumes_from\n\n从另一个服务或容器挂载它的所有卷。\n\n```sh\nvolumes_from:\n - service_name\n - container_name\n```\n\n### environment\n\n设置环境变量。你可以使用数组或字典两种格式。\n\n只给定名称的变量会自动获取它在 Compose 主机上的值，可以用来防止泄露不必要的数据。\n\n```\nenvironment:\n  RACK_ENV: development\n  SESSION_SECRET:\n\nenvironment:\n  - RACK_ENV=development\n  - SESSION_SECRET\n```\n\n### env_file\n\n从文件中获取环境变量，可以为单独的文件路径或列表。\n\n如果通过 `docker-compose -f FILE` 指定了模板文件，则 `env_file` 中路径会基于模板文件路径。\n\n如果有变量名称与 `environment` 指令冲突，则以后者为准。\n\n```sh\nenv_file: .env\n\nenv_file:\n  - ./common.env\n  - ./apps/web.env\n  - /opt/secrets.env\n```\n\n环境变量文件中每一行必须符合格式，支持 `#` 开头的注释行。\n\n```sh\n# common.env: Set Rails/Rack environment\nRACK_ENV=development\n```\n\n### extends\n\n基于已有的服务进行扩展。例如我们已经有了一个 webapp 服务，模板文件为 `common.yml`。\n\n```sh\n# common.yml\nwebapp:\n  build: ./webapp\n  environment:\n    - DEBUG=false\n    - SEND_EMAILS=false\n```\n\n编写一个新的 `development.yml` 文件，使用 `common.yml` 中的 webapp 服务进行扩展。\n\n```sh\n# development.yml\nweb:\n  extends:\n    file: common.yml\n    service: webapp\n  ports:\n    - \"8000:8000\"\n  links:\n    - db\n  environment:\n    - DEBUG=true\ndb:\n  image: postgres\n```\n\n后者会自动继承 common.yml 中的 webapp 服务及相关环节变量。\n\n\n\n","slug":"docker入门","published":1,"updated":"2023-01-17T15:44:35.862Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld1tm1it0003bsw7grv33thl","content":"<h2 id=\"docker概念\"><a href=\"#docker概念\" class=\"headerlink\" title=\"docker概念\"></a>docker概念</h2><p><img src=\"D:\\Sheep1433.github.io\\source\\picture\\image-20230117222926334.png\" alt=\"image-20230117222926334\"></p>\n<p><img src=\"D:\\Sheep1433.github.io\\source\\picture\\image-20230117223015800.png\" alt=\"image-20230117223015800\"></p>\n<p>核心概念：镜像、容器、仓库</p>\n<h2 id=\"docker安装\"><a href=\"#docker安装\" class=\"headerlink\" title=\"docker安装\"></a>docker安装</h2><p>不支持windows10家庭版</p>\n<p>CentOS 安装配置</p>\n<p>yum install -y yum-utils device-mapper-persistent-data lvm2\t\t安装依赖</p>\n<p> yum-config-manager –add-repo <a href=\"http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</a>\t添加源</p>\n<p>yum -y install docker-ce \t安装docker\t</p>\n<p>或者curl -fsSL <a href=\"https://get.docker.com/\">https://get.docker.com</a> | bash -s docker –mirror Aliyun</p>\n<p>此时直接使用docker ps查看进程是无效的，需要先systemctl start docker启动</p>\n<p>设置开机自启动：\tsystemctl enable docker</p>\n<p>docker-compose安装</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># curl -L https:&#x2F;&#x2F;github.com&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;1.8.1&#x2F;docker-compose-&#96;uname -s&#96;-&#96;uname -m&#96; &gt; &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose\n# chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"docker常用命令\"><a href=\"#docker常用命令\" class=\"headerlink\" title=\"docker常用命令\"></a>docker常用命令</h2><p><strong>一张图总结 Docker 的命令</strong></p>\n<p><img src=\"D:\\Sheep1433.github.io\\source\\picture\\cmd_logic.5970ea4d.png\" alt=\"img\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">exec\tbuild\t\tcommit\texec\tlogs\tps\t \tpull\npush\trestart\t\trm\t\trmi\t\trun\t\tsearch\tstart\ntag\t\tversion\t\tinfo\tsave\thistory\t……<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">docker version\tdocker版本信息\ndocker info\t\tdocker系统信息\n# 镜像相关\ndocker images\t查看所有镜像\ndocker search busybox \t在网上搜索镜像\ndocker pull busybOx:latest\t拉取下载\ndocker save busybox &gt; busybox.tar\t导出\ndocker load &lt; busybox.tar\t导入\ndocker rmi busybox:latest\t删除镜像\ndocker tag busybox:latest busybox:test \t更改镜像名\ndocker history busybox \t查看镜像创建历史\n# 容器相关 \n# docker run中-p：端口映射，--name：命名，-v：挂载目录\ndocker run -d -it busybox &#x2F;bin&#x2F;bash\t# 这种运行方式，容器不会立刻被退出 -d以守护态运行\ndocker run -d --name&#x3D;busybox busybox:latest ping 114.114.114.114\t运行容器\n\ndocker ps, docker ps -a\t\t查看运行的容器\ndocker top busybox \t\t查看容器中运行的进程\ndocker stats busybox \t查看资源占用\n# 处于终止状态的容器，可以通过 &#96;docker start&#96; 命令来重新启动。\n# 此外，&#96;docker restart&#96; 命令会将一个运行态的容器终止，然后再重新启动它。\ndocker start&#x2F;restart&#x2F;stop&#x2F;kill busybox 容器\ndocker pause&#x2F;unpause busybox \t暂停容器\ndocker rm -f busybox \t强制删除容器\ndocker exec -it busybox ls\t执行命令\ndocker exec -it elasticsearch &#x2F;bin&#x2F;bash\t在该容器下执行bash命令\ndocker cp busyboxL&#x2F;etc&#x2F;hosts hosts\t\t复制文件\ndocker logs -f busybox\t\t查看容器日志\ndocker inspect busybox\t\t查看容器&#x2F;镜像的元信息\ndocker inspect -f&#39;&#123;&#123;.Id&#125;&#125;&#39; busybox\t\t格式化输出\n\ndocker build -t &#123;tag&#125; .\t基于dockerfile在构建镜像\ndocker commit -m &quot;提交信息&quot; &#123;容器id&#125; &#123;命名&#125;\t将容器转化为镜像<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>当利用 <code>docker run</code> 来创建容器时，Docker 在后台运行的标准操作包括：</p>\n<ul>\n<li>检查本地是否存在指定的镜像，不存在就从公有仓库下载</li>\n<li>利用镜像创建并启动一个容器</li>\n<li>分配一个文件系统，并在只读的镜像层外面挂载一层可读写层</li>\n<li>从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去</li>\n<li>从地址池配置一个 ip 地址给容器</li>\n<li>执行用户指定的应用程序</li>\n<li>执行完毕后容器被终止</li>\n</ul>\n<p>Nginx容器</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run -d --name nginx -p <span class=\"token number\">8088</span>:80 nginx1.17.9\t\t\t<span class=\"token comment\"># 运行</span>\n<span class=\"token function\">docker</span> run -d --name nginx1 -p <span class=\"token number\">8089</span>:80 -v <span class=\"token variable\">$&#123;<span class=\"token environment constant\">PWD</span>&#125;</span>/html:/usr/share/nginx/html/nginx:1.17.9\t挂载目录\n<span class=\"token function\">docker</span> stop 停止<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>Jenkins容器</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run -p <span class=\"token number\">8888</span>:8080 --name myjenkins --user root myjenkins -v /data/jenkins_home:/var/jenkins_home jenkins/jenkins:lts\n<span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> -it --user root <span class=\"token operator\">&lt;</span>container id<span class=\"token operator\">></span> /bin/bash<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h2><p><strong>示例</strong></p>\n<pre class=\"line-numbers language-dockerfile\" data-language=\"dockerfile\"><code class=\"language-dockerfile\"># Dockerfile\nFROM        ubuntu:14.04\nRUN         apt-get update\nRUN         apt-get -y install redis-server\nEXPOSE      6379\nENTRYPOINT  [&quot;&#x2F;usr&#x2F;bin&#x2F;redis-server&quot;]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"RUN\"><a href=\"#RUN\" class=\"headerlink\" title=\"RUN\"></a>RUN</h3><p>格式为 <code>RUN &lt;command&gt;</code> 或 <code>RUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</code>。</p>\n<p>前者将在 shell 终端中运行命令，即 <code>/bin/sh -c</code>；后者则使用 <code>exec</code> 执行。指定使用其它终端可以通过第二种方式实现，例如 <code>RUN [&quot;/bin/bash&quot;, &quot;-c&quot;, &quot;echo hello&quot;]</code>。</p>\n<p>每条 <code>RUN</code> 指令将在当前镜像基础上执行指定命令，并提交为新的镜像。当命令较长时可以使用 <code>\\</code> 来换行</p>\n<h3 id=\"CMD\"><a href=\"#CMD\" class=\"headerlink\" title=\"CMD\"></a>CMD</h3><p>支持三种格式</p>\n<ul>\n<li><code>CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]</code> 使用 <code>exec</code> 执行，推荐方式；</li>\n<li><code>CMD command param1 param2</code> 在 <code>/bin/sh</code> 中执行，提供给需要交互的应用；</li>\n<li><code>CMD [&quot;param1&quot;,&quot;param2&quot;]</code> 提供给 <code>ENTRYPOINT</code> 的默认参数；</li>\n</ul>\n<p>指定启动容器时执行的命令，每个 Dockerfile 只能有一条 <code>CMD</code> 命令。如果指定了多条命令，只有最后一条会被执行。</p>\n<p>如果用户启动容器时候指定了运行的命令，则会覆盖掉 <code>CMD</code> 指定的命令。</p>\n<h3 id=\"ENV\"><a href=\"#ENV\" class=\"headerlink\" title=\"ENV\"></a>ENV</h3><p>格式为 <code>ENV &lt;key&gt; &lt;value&gt;</code>。 指定一个环境变量，会被后续 <code>RUN</code> 指令使用，并在容器运行时保持。</p>\n<p>例如</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">ENV PG_MAJOR 9.3\nENV PG_VERSION 9.3.4\nRUN curl -SL http:&#x2F;&#x2F;example.com&#x2F;postgres-$PG_VERSION.tar.xz | tar -xJC &#x2F;usr&#x2F;src&#x2F;postgress &amp;&amp; …\nENV PATH &#x2F;usr&#x2F;local&#x2F;postgres-$PG_MAJOR&#x2F;bin:$PATH<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"EXPOSE\"><a href=\"#EXPOSE\" class=\"headerlink\" title=\"EXPOSE\"></a>EXPOSE</h3><p>格式为 <code>EXPOSE &lt;port&gt; [&lt;port&gt;...]</code>。</p>\n<p>告诉 Docker 服务端容器暴露的端口号，供互联系统使用。在启动容器时需要通过 -P，Docker 主机会自动分配一个端口转发到指定的端口。</p>\n<h3 id=\"ADD\"><a href=\"#ADD\" class=\"headerlink\" title=\"ADD\"></a>ADD</h3><p>格式为 <code>ADD &lt;src&gt; &lt;dest&gt;</code>。</p>\n<p>该命令将复制指定的 <code>&lt;src&gt;</code> 到容器中的 <code>&lt;dest&gt;</code>。 其中 <code>&lt;src&gt;</code> 可以是Dockerfile所在目录的一个相对路径；也可以是一个 URL；还可以是一个 tar 文件（自动解压为目录）。</p>\n<h3 id=\"COPY\"><a href=\"#COPY\" class=\"headerlink\" title=\"COPY\"></a>COPY</h3><p>格式为 <code>COPY &lt;src&gt; &lt;dest&gt;</code>。</p>\n<p>复制本地主机的 <code>&lt;src&gt;</code>（为 Dockerfile 所在目录的相对路径）到容器中的 <code>&lt;dest&gt;</code>。</p>\n<p>当使用本地目录为源目录时，推荐使用 <code>COPY</code>。</p>\n<h3 id=\"WORKDIR\"><a href=\"#WORKDIR\" class=\"headerlink\" title=\"WORKDIR\"></a>WORKDIR</h3><p>格式为 <code>WORKDIR /path/to/workdir</code>。</p>\n<p>为后续的 <code>RUN</code>、<code>CMD</code>、<code>ENTRYPOINT</code> 指令配置工作目录。</p>\n<p>可以使用多个 <code>WORKDIR</code> 指令，后续命令如果参数是相对路径，则会基于之前命令指定的路径</p>\n<h2 id=\"docker-compose常用命令\"><a href=\"#docker-compose常用命令\" class=\"headerlink\" title=\"docker-compose常用命令\"></a>docker-compose常用命令</h2><p>Dockerfile 可以让用户管理一个单独的应用容器；而 Compose 则允许用户在一个模板（YAML 格式）中定义一组相关联的应用容器（被称为一个 <code>project</code>，即项目），例如一个 Web 服务容器再加上后端的数据库服务容器等。</p>\n<p>常用命令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">build\t\t<span class=\"token comment\"># 构建或重新构建服务。服务一旦构建后，将会带上一个标记名，例如 web_db。可以随时在项目目录下运行 `docker-compose build` 来重新构建服务。</span>\n<span class=\"token builtin class-name\">help</span>\t\t\n<span class=\"token function\">kill</span>\t\t<span class=\"token comment\"># 通过发送 `SIGKILL` 信号来强制停止服务容器。支持通过参数来指定发送的信号，例如</span>\nlogs\nport\n<span class=\"token function\">ps</span>\npull\n<span class=\"token function\">rm</span>\nrun\nstart\nstop\nup\t\t\t<span class=\"token comment\">#\t构建，（重新）创建，启动，链接一个服务相关的容器。链接的服务都将会启动，除非他们已经运行。默认情况， `docker-compose up` 将会整合所有容器的输出，并且退出时，所有容器将会停止。如果使用 `docker-compose up -d` ，将会在后台启动并运行所有的容器。默认情况，如果该服务的容器已经存在，`docker-compose up` 将会停止并尝试重新创建他们（保持使用`volumes-from` 挂载的卷），以保证 `docker-compose.yml` 的修改生效。如果你不想容器被停止重新创建，可以使用 `docker-compose up --no-recreate`。如果需要的话，这样将会启动已经停止的容器</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"docker-compose-yml常用字段\"><a href=\"#docker-compose-yml常用字段\" class=\"headerlink\" title=\"docker-compose.yml常用字段\"></a>docker-compose.yml常用字段</h2><p>默认的模板文件是 <code>docker-compose.yml</code>，其中定义的每个服务都必须通过 <code>image</code> 指令指定镜像或 <code>build</code> 指令（需要 Dockerfile）来自动构建。</p>\n<p>其它大部分指令都跟 <code>docker run</code> 中的类似。</p>\n<p>如果使用 <code>build</code> 指令，在 <code>Dockerfile</code> 中设置的选项(例如：<code>CMD</code>, <code>EXPOSE</code>, <code>VOLUME</code>, <code>ENV</code> 等) 将会自动被获取，无需在 <code>docker-compose.yml</code> 中再次设置。</p>\n<h3 id=\"image\"><a href=\"#image\" class=\"headerlink\" title=\"image\"></a>image</h3><p>指定为镜像名称或镜像 ID。如果镜像在本地不存在，<code>Compose</code> 将会尝试拉去这个镜像。</p>\n<p>例如：</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">image: ubuntu\nimage: orchardup&#x2F;postgresql\nimage: a4bc65fd<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"build\"><a href=\"#build\" class=\"headerlink\" title=\"build\"></a>build</h3><p>指定 <code>Dockerfile</code> 所在文件夹的路径。 <code>Compose</code> 将会利用它自动构建这个镜像，然后使用这个镜像。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">build: &#x2F;path&#x2F;to&#x2F;build&#x2F;dir<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"command\"><a href=\"#command\" class=\"headerlink\" title=\"command\"></a>command</h3><p>覆盖容器启动后默认执行的命令。</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">command: bundle exec thin -p 3000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"link\"><a href=\"#link\" class=\"headerlink\" title=\"link\"></a>link</h3><p>链接到其它服务中的容器。使用服务名称（同时作为别名）或服务名称：服务别名 <code>（SERVICE:ALIAS）</code> 格式都可以。</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">links:\n - db\n - db:database\n - redis<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>使用的别名将会自动在服务容器中的 <code>/etc/hosts</code> 里创建。例如：</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">172.17.2.186  db\n172.17.2.186  database\n172.17.2.187  redis<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>相应的环境变量也将被创建。</p>\n<h3 id=\"external-links\"><a href=\"#external-links\" class=\"headerlink\" title=\"external_links\"></a>external_links</h3><p>链接到 docker-compose.yml 外部的容器，甚至 并非 <code>Compose</code> 管理的容器。参数格式跟 <code>links</code> 类似。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">external_links:\n - redis_1\n - project_db_1:mysql\n - project_db_1:postgresql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"ports\"><a href=\"#ports\" class=\"headerlink\" title=\"ports\"></a>ports</h3><p>暴露端口信息。</p>\n<p>使用宿主：容器 <code>（HOST:CONTAINER）</code>格式或者仅仅指定容器的端口（宿主将会随机选择端口）都可以。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">ports:\n - &quot;3000&quot;\n - &quot;8000:8000&quot;\n - &quot;49100:22&quot;\n - &quot;127.0.0.1:8001:8001&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><em>注：当使用 <code>HOST:CONTAINER</code> 格式来映射端口时，如果你使用的容器端口小于 60 你可能会得到错误得结果，因为 <code>YAML</code> 将会解析 <code>xx:yy</code> 这种数字格式为 60 进制。所以建议采用字符串格式。</em></p>\n<h3 id=\"expose\"><a href=\"#expose\" class=\"headerlink\" title=\"expose\"></a>expose</h3><p>暴露端口，但不映射到宿主机，只被连接的服务访问。</p>\n<p>仅可以指定内部端口为参数</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">expose:\n - &quot;3000&quot;\n - &quot;8000&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"volumes\"><a href=\"#volumes\" class=\"headerlink\" title=\"volumes\"></a>volumes</h3><p>卷挂载路径设置。可以设置宿主机路径 （<code>HOST:CONTAINER</code>） 或加上访问模式 （<code>HOST:CONTAINER:ro</code>）。</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">volumes:\n - &#x2F;var&#x2F;lib&#x2F;mysql\n - cache&#x2F;:&#x2F;tmp&#x2F;cache\n - ~&#x2F;configs:&#x2F;etc&#x2F;configs&#x2F;:ro<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"volumes-from\"><a href=\"#volumes-from\" class=\"headerlink\" title=\"volumes_from\"></a>volumes_from</h3><p>从另一个服务或容器挂载它的所有卷。</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">volumes_from:\n - service_name\n - container_name<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"environment\"><a href=\"#environment\" class=\"headerlink\" title=\"environment\"></a>environment</h3><p>设置环境变量。你可以使用数组或字典两种格式。</p>\n<p>只给定名称的变量会自动获取它在 Compose 主机上的值，可以用来防止泄露不必要的数据。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">environment:\n  RACK_ENV: development\n  SESSION_SECRET:\n\nenvironment:\n  - RACK_ENV&#x3D;development\n  - SESSION_SECRET<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"env-file\"><a href=\"#env-file\" class=\"headerlink\" title=\"env_file\"></a>env_file</h3><p>从文件中获取环境变量，可以为单独的文件路径或列表。</p>\n<p>如果通过 <code>docker-compose -f FILE</code> 指定了模板文件，则 <code>env_file</code> 中路径会基于模板文件路径。</p>\n<p>如果有变量名称与 <code>environment</code> 指令冲突，则以后者为准。</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">env_file: .env\n\nenv_file:\n  - .&#x2F;common.env\n  - .&#x2F;apps&#x2F;web.env\n  - &#x2F;opt&#x2F;secrets.env<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>环境变量文件中每一行必须符合格式，支持 <code>#</code> 开头的注释行。</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\"># common.env: Set Rails&#x2F;Rack environment\nRACK_ENV&#x3D;development<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"extends\"><a href=\"#extends\" class=\"headerlink\" title=\"extends\"></a>extends</h3><p>基于已有的服务进行扩展。例如我们已经有了一个 webapp 服务，模板文件为 <code>common.yml</code>。</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\"># common.yml\nwebapp:\n  build: .&#x2F;webapp\n  environment:\n    - DEBUG&#x3D;false\n    - SEND_EMAILS&#x3D;false<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>编写一个新的 <code>development.yml</code> 文件，使用 <code>common.yml</code> 中的 webapp 服务进行扩展。</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\"># development.yml\nweb:\n  extends:\n    file: common.yml\n    service: webapp\n  ports:\n    - &quot;8000:8000&quot;\n  links:\n    - db\n  environment:\n    - DEBUG&#x3D;true\ndb:\n  image: postgres<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>后者会自动继承 common.yml 中的 webapp 服务及相关环节变量。</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"docker概念\"><a href=\"#docker概念\" class=\"headerlink\" title=\"docker概念\"></a>docker概念</h2><p><img src=\"D:\\Sheep1433.github.io\\source\\picture\\image-20230117222926334.png\" alt=\"image-20230117222926334\"></p>\n<p><img src=\"D:\\Sheep1433.github.io\\source\\picture\\image-20230117223015800.png\" alt=\"image-20230117223015800\"></p>\n<p>核心概念：镜像、容器、仓库</p>\n<h2 id=\"docker安装\"><a href=\"#docker安装\" class=\"headerlink\" title=\"docker安装\"></a>docker安装</h2><p>不支持windows10家庭版</p>\n<p>CentOS 安装配置</p>\n<p>yum install -y yum-utils device-mapper-persistent-data lvm2\t\t安装依赖</p>\n<p> yum-config-manager –add-repo <a href=\"http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</a>\t添加源</p>\n<p>yum -y install docker-ce \t安装docker\t</p>\n<p>或者curl -fsSL <a href=\"https://get.docker.com/\">https://get.docker.com</a> | bash -s docker –mirror Aliyun</p>\n<p>此时直接使用docker ps查看进程是无效的，需要先systemctl start docker启动</p>\n<p>设置开机自启动：\tsystemctl enable docker</p>\n<p>docker-compose安装</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># curl -L https:&#x2F;&#x2F;github.com&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;1.8.1&#x2F;docker-compose-&#96;uname -s&#96;-&#96;uname -m&#96; &gt; &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose\n# chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"docker常用命令\"><a href=\"#docker常用命令\" class=\"headerlink\" title=\"docker常用命令\"></a>docker常用命令</h2><p><strong>一张图总结 Docker 的命令</strong></p>\n<p><img src=\"D:\\Sheep1433.github.io\\source\\picture\\cmd_logic.5970ea4d.png\" alt=\"img\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">exec\tbuild\t\tcommit\texec\tlogs\tps\t \tpull\npush\trestart\t\trm\t\trmi\t\trun\t\tsearch\tstart\ntag\t\tversion\t\tinfo\tsave\thistory\t……<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">docker version\tdocker版本信息\ndocker info\t\tdocker系统信息\n# 镜像相关\ndocker images\t查看所有镜像\ndocker search busybox \t在网上搜索镜像\ndocker pull busybOx:latest\t拉取下载\ndocker save busybox &gt; busybox.tar\t导出\ndocker load &lt; busybox.tar\t导入\ndocker rmi busybox:latest\t删除镜像\ndocker tag busybox:latest busybox:test \t更改镜像名\ndocker history busybox \t查看镜像创建历史\n# 容器相关 \n# docker run中-p：端口映射，--name：命名，-v：挂载目录\ndocker run -d -it busybox &#x2F;bin&#x2F;bash\t# 这种运行方式，容器不会立刻被退出 -d以守护态运行\ndocker run -d --name&#x3D;busybox busybox:latest ping 114.114.114.114\t运行容器\n\ndocker ps, docker ps -a\t\t查看运行的容器\ndocker top busybox \t\t查看容器中运行的进程\ndocker stats busybox \t查看资源占用\n# 处于终止状态的容器，可以通过 &#96;docker start&#96; 命令来重新启动。\n# 此外，&#96;docker restart&#96; 命令会将一个运行态的容器终止，然后再重新启动它。\ndocker start&#x2F;restart&#x2F;stop&#x2F;kill busybox 容器\ndocker pause&#x2F;unpause busybox \t暂停容器\ndocker rm -f busybox \t强制删除容器\ndocker exec -it busybox ls\t执行命令\ndocker exec -it elasticsearch &#x2F;bin&#x2F;bash\t在该容器下执行bash命令\ndocker cp busyboxL&#x2F;etc&#x2F;hosts hosts\t\t复制文件\ndocker logs -f busybox\t\t查看容器日志\ndocker inspect busybox\t\t查看容器&#x2F;镜像的元信息\ndocker inspect -f&#39;&#123;&#123;.Id&#125;&#125;&#39; busybox\t\t格式化输出\n\ndocker build -t &#123;tag&#125; .\t基于dockerfile在构建镜像\ndocker commit -m &quot;提交信息&quot; &#123;容器id&#125; &#123;命名&#125;\t将容器转化为镜像<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>当利用 <code>docker run</code> 来创建容器时，Docker 在后台运行的标准操作包括：</p>\n<ul>\n<li>检查本地是否存在指定的镜像，不存在就从公有仓库下载</li>\n<li>利用镜像创建并启动一个容器</li>\n<li>分配一个文件系统，并在只读的镜像层外面挂载一层可读写层</li>\n<li>从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去</li>\n<li>从地址池配置一个 ip 地址给容器</li>\n<li>执行用户指定的应用程序</li>\n<li>执行完毕后容器被终止</li>\n</ul>\n<p>Nginx容器</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run -d --name nginx -p <span class=\"token number\">8088</span>:80 nginx1.17.9\t\t\t<span class=\"token comment\"># 运行</span>\n<span class=\"token function\">docker</span> run -d --name nginx1 -p <span class=\"token number\">8089</span>:80 -v <span class=\"token variable\">$&#123;<span class=\"token environment constant\">PWD</span>&#125;</span>/html:/usr/share/nginx/html/nginx:1.17.9\t挂载目录\n<span class=\"token function\">docker</span> stop 停止<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>Jenkins容器</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run -p <span class=\"token number\">8888</span>:8080 --name myjenkins --user root myjenkins -v /data/jenkins_home:/var/jenkins_home jenkins/jenkins:lts\n<span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> -it --user root <span class=\"token operator\">&lt;</span>container id<span class=\"token operator\">></span> /bin/bash<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h2><p><strong>示例</strong></p>\n<pre class=\"line-numbers language-dockerfile\" data-language=\"dockerfile\"><code class=\"language-dockerfile\"># Dockerfile\nFROM        ubuntu:14.04\nRUN         apt-get update\nRUN         apt-get -y install redis-server\nEXPOSE      6379\nENTRYPOINT  [&quot;&#x2F;usr&#x2F;bin&#x2F;redis-server&quot;]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"RUN\"><a href=\"#RUN\" class=\"headerlink\" title=\"RUN\"></a>RUN</h3><p>格式为 <code>RUN &lt;command&gt;</code> 或 <code>RUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</code>。</p>\n<p>前者将在 shell 终端中运行命令，即 <code>/bin/sh -c</code>；后者则使用 <code>exec</code> 执行。指定使用其它终端可以通过第二种方式实现，例如 <code>RUN [&quot;/bin/bash&quot;, &quot;-c&quot;, &quot;echo hello&quot;]</code>。</p>\n<p>每条 <code>RUN</code> 指令将在当前镜像基础上执行指定命令，并提交为新的镜像。当命令较长时可以使用 <code>\\</code> 来换行</p>\n<h3 id=\"CMD\"><a href=\"#CMD\" class=\"headerlink\" title=\"CMD\"></a>CMD</h3><p>支持三种格式</p>\n<ul>\n<li><code>CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]</code> 使用 <code>exec</code> 执行，推荐方式；</li>\n<li><code>CMD command param1 param2</code> 在 <code>/bin/sh</code> 中执行，提供给需要交互的应用；</li>\n<li><code>CMD [&quot;param1&quot;,&quot;param2&quot;]</code> 提供给 <code>ENTRYPOINT</code> 的默认参数；</li>\n</ul>\n<p>指定启动容器时执行的命令，每个 Dockerfile 只能有一条 <code>CMD</code> 命令。如果指定了多条命令，只有最后一条会被执行。</p>\n<p>如果用户启动容器时候指定了运行的命令，则会覆盖掉 <code>CMD</code> 指定的命令。</p>\n<h3 id=\"ENV\"><a href=\"#ENV\" class=\"headerlink\" title=\"ENV\"></a>ENV</h3><p>格式为 <code>ENV &lt;key&gt; &lt;value&gt;</code>。 指定一个环境变量，会被后续 <code>RUN</code> 指令使用，并在容器运行时保持。</p>\n<p>例如</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">ENV PG_MAJOR 9.3\nENV PG_VERSION 9.3.4\nRUN curl -SL http:&#x2F;&#x2F;example.com&#x2F;postgres-$PG_VERSION.tar.xz | tar -xJC &#x2F;usr&#x2F;src&#x2F;postgress &amp;&amp; …\nENV PATH &#x2F;usr&#x2F;local&#x2F;postgres-$PG_MAJOR&#x2F;bin:$PATH<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"EXPOSE\"><a href=\"#EXPOSE\" class=\"headerlink\" title=\"EXPOSE\"></a>EXPOSE</h3><p>格式为 <code>EXPOSE &lt;port&gt; [&lt;port&gt;...]</code>。</p>\n<p>告诉 Docker 服务端容器暴露的端口号，供互联系统使用。在启动容器时需要通过 -P，Docker 主机会自动分配一个端口转发到指定的端口。</p>\n<h3 id=\"ADD\"><a href=\"#ADD\" class=\"headerlink\" title=\"ADD\"></a>ADD</h3><p>格式为 <code>ADD &lt;src&gt; &lt;dest&gt;</code>。</p>\n<p>该命令将复制指定的 <code>&lt;src&gt;</code> 到容器中的 <code>&lt;dest&gt;</code>。 其中 <code>&lt;src&gt;</code> 可以是Dockerfile所在目录的一个相对路径；也可以是一个 URL；还可以是一个 tar 文件（自动解压为目录）。</p>\n<h3 id=\"COPY\"><a href=\"#COPY\" class=\"headerlink\" title=\"COPY\"></a>COPY</h3><p>格式为 <code>COPY &lt;src&gt; &lt;dest&gt;</code>。</p>\n<p>复制本地主机的 <code>&lt;src&gt;</code>（为 Dockerfile 所在目录的相对路径）到容器中的 <code>&lt;dest&gt;</code>。</p>\n<p>当使用本地目录为源目录时，推荐使用 <code>COPY</code>。</p>\n<h3 id=\"WORKDIR\"><a href=\"#WORKDIR\" class=\"headerlink\" title=\"WORKDIR\"></a>WORKDIR</h3><p>格式为 <code>WORKDIR /path/to/workdir</code>。</p>\n<p>为后续的 <code>RUN</code>、<code>CMD</code>、<code>ENTRYPOINT</code> 指令配置工作目录。</p>\n<p>可以使用多个 <code>WORKDIR</code> 指令，后续命令如果参数是相对路径，则会基于之前命令指定的路径</p>\n<h2 id=\"docker-compose常用命令\"><a href=\"#docker-compose常用命令\" class=\"headerlink\" title=\"docker-compose常用命令\"></a>docker-compose常用命令</h2><p>Dockerfile 可以让用户管理一个单独的应用容器；而 Compose 则允许用户在一个模板（YAML 格式）中定义一组相关联的应用容器（被称为一个 <code>project</code>，即项目），例如一个 Web 服务容器再加上后端的数据库服务容器等。</p>\n<p>常用命令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">build\t\t<span class=\"token comment\"># 构建或重新构建服务。服务一旦构建后，将会带上一个标记名，例如 web_db。可以随时在项目目录下运行 `docker-compose build` 来重新构建服务。</span>\n<span class=\"token builtin class-name\">help</span>\t\t\n<span class=\"token function\">kill</span>\t\t<span class=\"token comment\"># 通过发送 `SIGKILL` 信号来强制停止服务容器。支持通过参数来指定发送的信号，例如</span>\nlogs\nport\n<span class=\"token function\">ps</span>\npull\n<span class=\"token function\">rm</span>\nrun\nstart\nstop\nup\t\t\t<span class=\"token comment\">#\t构建，（重新）创建，启动，链接一个服务相关的容器。链接的服务都将会启动，除非他们已经运行。默认情况， `docker-compose up` 将会整合所有容器的输出，并且退出时，所有容器将会停止。如果使用 `docker-compose up -d` ，将会在后台启动并运行所有的容器。默认情况，如果该服务的容器已经存在，`docker-compose up` 将会停止并尝试重新创建他们（保持使用`volumes-from` 挂载的卷），以保证 `docker-compose.yml` 的修改生效。如果你不想容器被停止重新创建，可以使用 `docker-compose up --no-recreate`。如果需要的话，这样将会启动已经停止的容器</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"docker-compose-yml常用字段\"><a href=\"#docker-compose-yml常用字段\" class=\"headerlink\" title=\"docker-compose.yml常用字段\"></a>docker-compose.yml常用字段</h2><p>默认的模板文件是 <code>docker-compose.yml</code>，其中定义的每个服务都必须通过 <code>image</code> 指令指定镜像或 <code>build</code> 指令（需要 Dockerfile）来自动构建。</p>\n<p>其它大部分指令都跟 <code>docker run</code> 中的类似。</p>\n<p>如果使用 <code>build</code> 指令，在 <code>Dockerfile</code> 中设置的选项(例如：<code>CMD</code>, <code>EXPOSE</code>, <code>VOLUME</code>, <code>ENV</code> 等) 将会自动被获取，无需在 <code>docker-compose.yml</code> 中再次设置。</p>\n<h3 id=\"image\"><a href=\"#image\" class=\"headerlink\" title=\"image\"></a>image</h3><p>指定为镜像名称或镜像 ID。如果镜像在本地不存在，<code>Compose</code> 将会尝试拉去这个镜像。</p>\n<p>例如：</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">image: ubuntu\nimage: orchardup&#x2F;postgresql\nimage: a4bc65fd<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"build\"><a href=\"#build\" class=\"headerlink\" title=\"build\"></a>build</h3><p>指定 <code>Dockerfile</code> 所在文件夹的路径。 <code>Compose</code> 将会利用它自动构建这个镜像，然后使用这个镜像。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">build: &#x2F;path&#x2F;to&#x2F;build&#x2F;dir<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"command\"><a href=\"#command\" class=\"headerlink\" title=\"command\"></a>command</h3><p>覆盖容器启动后默认执行的命令。</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">command: bundle exec thin -p 3000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"link\"><a href=\"#link\" class=\"headerlink\" title=\"link\"></a>link</h3><p>链接到其它服务中的容器。使用服务名称（同时作为别名）或服务名称：服务别名 <code>（SERVICE:ALIAS）</code> 格式都可以。</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">links:\n - db\n - db:database\n - redis<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>使用的别名将会自动在服务容器中的 <code>/etc/hosts</code> 里创建。例如：</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">172.17.2.186  db\n172.17.2.186  database\n172.17.2.187  redis<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>相应的环境变量也将被创建。</p>\n<h3 id=\"external-links\"><a href=\"#external-links\" class=\"headerlink\" title=\"external_links\"></a>external_links</h3><p>链接到 docker-compose.yml 外部的容器，甚至 并非 <code>Compose</code> 管理的容器。参数格式跟 <code>links</code> 类似。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">external_links:\n - redis_1\n - project_db_1:mysql\n - project_db_1:postgresql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"ports\"><a href=\"#ports\" class=\"headerlink\" title=\"ports\"></a>ports</h3><p>暴露端口信息。</p>\n<p>使用宿主：容器 <code>（HOST:CONTAINER）</code>格式或者仅仅指定容器的端口（宿主将会随机选择端口）都可以。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">ports:\n - &quot;3000&quot;\n - &quot;8000:8000&quot;\n - &quot;49100:22&quot;\n - &quot;127.0.0.1:8001:8001&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><em>注：当使用 <code>HOST:CONTAINER</code> 格式来映射端口时，如果你使用的容器端口小于 60 你可能会得到错误得结果，因为 <code>YAML</code> 将会解析 <code>xx:yy</code> 这种数字格式为 60 进制。所以建议采用字符串格式。</em></p>\n<h3 id=\"expose\"><a href=\"#expose\" class=\"headerlink\" title=\"expose\"></a>expose</h3><p>暴露端口，但不映射到宿主机，只被连接的服务访问。</p>\n<p>仅可以指定内部端口为参数</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">expose:\n - &quot;3000&quot;\n - &quot;8000&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"volumes\"><a href=\"#volumes\" class=\"headerlink\" title=\"volumes\"></a>volumes</h3><p>卷挂载路径设置。可以设置宿主机路径 （<code>HOST:CONTAINER</code>） 或加上访问模式 （<code>HOST:CONTAINER:ro</code>）。</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">volumes:\n - &#x2F;var&#x2F;lib&#x2F;mysql\n - cache&#x2F;:&#x2F;tmp&#x2F;cache\n - ~&#x2F;configs:&#x2F;etc&#x2F;configs&#x2F;:ro<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"volumes-from\"><a href=\"#volumes-from\" class=\"headerlink\" title=\"volumes_from\"></a>volumes_from</h3><p>从另一个服务或容器挂载它的所有卷。</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">volumes_from:\n - service_name\n - container_name<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"environment\"><a href=\"#environment\" class=\"headerlink\" title=\"environment\"></a>environment</h3><p>设置环境变量。你可以使用数组或字典两种格式。</p>\n<p>只给定名称的变量会自动获取它在 Compose 主机上的值，可以用来防止泄露不必要的数据。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">environment:\n  RACK_ENV: development\n  SESSION_SECRET:\n\nenvironment:\n  - RACK_ENV&#x3D;development\n  - SESSION_SECRET<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"env-file\"><a href=\"#env-file\" class=\"headerlink\" title=\"env_file\"></a>env_file</h3><p>从文件中获取环境变量，可以为单独的文件路径或列表。</p>\n<p>如果通过 <code>docker-compose -f FILE</code> 指定了模板文件，则 <code>env_file</code> 中路径会基于模板文件路径。</p>\n<p>如果有变量名称与 <code>environment</code> 指令冲突，则以后者为准。</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">env_file: .env\n\nenv_file:\n  - .&#x2F;common.env\n  - .&#x2F;apps&#x2F;web.env\n  - &#x2F;opt&#x2F;secrets.env<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>环境变量文件中每一行必须符合格式，支持 <code>#</code> 开头的注释行。</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\"># common.env: Set Rails&#x2F;Rack environment\nRACK_ENV&#x3D;development<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"extends\"><a href=\"#extends\" class=\"headerlink\" title=\"extends\"></a>extends</h3><p>基于已有的服务进行扩展。例如我们已经有了一个 webapp 服务，模板文件为 <code>common.yml</code>。</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\"># common.yml\nwebapp:\n  build: .&#x2F;webapp\n  environment:\n    - DEBUG&#x3D;false\n    - SEND_EMAILS&#x3D;false<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>编写一个新的 <code>development.yml</code> 文件，使用 <code>common.yml</code> 中的 webapp 服务进行扩展。</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\"># development.yml\nweb:\n  extends:\n    file: common.yml\n    service: webapp\n  ports:\n    - &quot;8000:8000&quot;\n  links:\n    - db\n  environment:\n    - DEBUG&#x3D;true\ndb:\n  image: postgres<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>后者会自动继承 common.yml 中的 webapp 服务及相关环节变量。</p>\n"},{"title":"git笔记","date":"2022-11-25T16:26:18.000Z","author":"三岁浪迹天涯","_content":"\n## git核心\n\n![Screenshot_20220416_171404_tv.danmaku.bili](D:\\Huawei Share\\Huawei Share\\Screenshot_20220416_171404_tv.danmaku.bili.jpg)\n\n## git登录 \n\n查看当前登录账号：\n\n```shell\ngit config user.name\n```\n\n查看当前登录邮箱\n\n```shell\ngit config user.email\n```\n\n修改用户名和邮箱：\n\n```shell\ngit config --global user.name \"Your_username\"\ngit config --global user.email \"Your_email\"\n```\n\n初始化一个Git仓库，使用`git init`命令。\n\n添加文件到Git仓库，分两步：\n\n1. 使用命令`git add <file>`，注意，可反复多次使用，添加多个文件；\n2. 使用命令`git commit -m <message>`，完成。\n\n- 要随时掌握工作区的状态，使用`git status`命令。\n- 如果`git status`告诉你有文件被修改过，用`git diff`可以查看修改内容。\n\n## 版本切换\n\n- `HEAD`指向的版本就是当前版本，HEAD^表示上一个版本，HEAD^^表示上上个版本，HEAD~100表示往上100个版本，因此，Git允许我们在版本的历史之间穿梭，使用命令`git reset --hard commit_id`，commit_id版本号不需要写全，只需要写前几个。\n- 穿梭前，用`git log`可以查看提交历史，以便确定要回退到哪个版本。\n- 要重返未来，用`git reflog`查看命令历史，以便确定要回到未来的哪个版本。\n\ngit把本地仓库推到github上\n\n```\ngit remote add origin https://github.com/Sheep1433/learngit.git\n```\n\n![image-20211223210005615](C:\\Users\\Administrator\\blog\\newblog\\source\\picture\\image-20211223210005615.png)\n\n```\ngit checkout -- file 撤销对file的修改\n```\n\n在本机上创建ssh key，然后在主目录的.ssh文件夹中将公钥复制到github或者gitee中即可。\n\n```\nssh-keygen -t rsa -C \"youremail@example.com\"\n```\n\n然后在本地仓库目录下运行以下命令，将本地仓库和远程库关联\n\n```\ngit remote add origin git@github.com:Sheep1433/learngit.git\n或者git remote add origin https://github.com/Sheep1433/learngit.git\n# git支持多种协议，如ssh和https,默认的git://使用的是ssh协议，速度快\n```\n\n将本地仓库内容推送到远程库\n\n```\ngit push -u origin master\n```\n\n第一次推送master分支时，加上-u参数，会同时将本地master和远程库的master关联起来，以后的推送或拉取可以简化命令\n\n如\n\n```\ngit push 或者 git push origin master\n```\n\n**解除本地仓库和远程库的链接**\n\n查看远程库信息\n\n```\ngit remote -v\n```\n\n然后删除\n\n```\ngit remote rm origin\n```\n\n## 分支管理\n\n创建dev分支并且切换\n\n```\ngit checkout -b dev\t\t等同于 git branch dev 加上git checkout dev也等同于git switch -c dev\n```\n\n使用git branch查看分支\n\n在dev分支中完成代码工作后，并使用git add和git commit 提交后，切换至master分支，是无法看到dev分支的工作的，通过在master分支中使用git merge dev命令合并分支。\t\t\n\n```\n删除分支\tgit branch -d dev\n创建分支并切换\t\tgit checkout -b dev\n查看分支\tgit branch\n查看日志\tgit log\n合并分支\tgit merge dev\n禁用Fast-Forward模式进行合并分支\tgit merge --no-ff -m \"merge with no-ff\" dev\ngit stash命令的场景假设：\n\t保留工作现场\t\tgit stash\n\t切换master分支 \t git checkout master\n\t创建新分支\t\tgit checkout -b issue001\n\tgit add 和git commit -m提交修复\n\t切回master分支\t git switch master\n\t将issue分支合并入master分支\tgit merge --no-ff -m \"merge with no-ff\" issue001\n\t切回dev分支\t\tgit switch dev\n\t查看工作现场\t\tgit stash list\n\t恢复现场并删除\t\tgit stash apply和git stash drop等同于git stash pop\n恢复指定的stash\tgit stash apply stash@{0}\n删除还没有合并的分支\tgit branch -D feature-vulcan\n从本地推送分支\t\tgit push origin branch-name\n如果推送失败，先用git pull抓取\n在本地创建和远程分支对应的分支\t\tgit checkout -b branch-name origin/branch-name\n建立本地分支和远程分支的管理\t\tgit branch --set-upstream-to branch-name rigin/branch-name\n查看日志\tgit log\n查看日志\tgit log --pretty=oneline --abbrev-commit\n打上标签\tgit tag v1.0\n查看标签\tgit tag\n针对指定commit id打上标签\tgit tag v0.9 f52c633\n\n删除远程分支 git push origin --delete 远程分支名\n\n```\n\n将推送的远程库名字改成不同的，就可以将一个本地库推送到多个平台\n\n```\ngit remote add github git@github.com:Sheep1433/learngit.git\ngit remote add gitee git@github.com:Sheep1433/learngit.git\n```\n\n删除github上的文件夹，在本地仓库使用git rm -r --cached 文件夹名，再使用git commit和git push\n\n下载源码时切换版本\tgit clone 源码， git tag 列出所有版本，git checkout 版本号\n\n参与到别人的开源项目中\n\n在github中fork项目，然后git clone自己的仓库，这样才能提交推送，如果想让官方接受修改，在github上pr(pull requests)\n","source":"_posts/git笔记.md","raw":"---\ntitle: git笔记\ndate: 2022-11-26 00:26:18\nauthor: 三岁浪迹天涯\ncategories: git\ntags:\n  - git\n  - 基础\n---\n\n## git核心\n\n![Screenshot_20220416_171404_tv.danmaku.bili](D:\\Huawei Share\\Huawei Share\\Screenshot_20220416_171404_tv.danmaku.bili.jpg)\n\n## git登录 \n\n查看当前登录账号：\n\n```shell\ngit config user.name\n```\n\n查看当前登录邮箱\n\n```shell\ngit config user.email\n```\n\n修改用户名和邮箱：\n\n```shell\ngit config --global user.name \"Your_username\"\ngit config --global user.email \"Your_email\"\n```\n\n初始化一个Git仓库，使用`git init`命令。\n\n添加文件到Git仓库，分两步：\n\n1. 使用命令`git add <file>`，注意，可反复多次使用，添加多个文件；\n2. 使用命令`git commit -m <message>`，完成。\n\n- 要随时掌握工作区的状态，使用`git status`命令。\n- 如果`git status`告诉你有文件被修改过，用`git diff`可以查看修改内容。\n\n## 版本切换\n\n- `HEAD`指向的版本就是当前版本，HEAD^表示上一个版本，HEAD^^表示上上个版本，HEAD~100表示往上100个版本，因此，Git允许我们在版本的历史之间穿梭，使用命令`git reset --hard commit_id`，commit_id版本号不需要写全，只需要写前几个。\n- 穿梭前，用`git log`可以查看提交历史，以便确定要回退到哪个版本。\n- 要重返未来，用`git reflog`查看命令历史，以便确定要回到未来的哪个版本。\n\ngit把本地仓库推到github上\n\n```\ngit remote add origin https://github.com/Sheep1433/learngit.git\n```\n\n![image-20211223210005615](C:\\Users\\Administrator\\blog\\newblog\\source\\picture\\image-20211223210005615.png)\n\n```\ngit checkout -- file 撤销对file的修改\n```\n\n在本机上创建ssh key，然后在主目录的.ssh文件夹中将公钥复制到github或者gitee中即可。\n\n```\nssh-keygen -t rsa -C \"youremail@example.com\"\n```\n\n然后在本地仓库目录下运行以下命令，将本地仓库和远程库关联\n\n```\ngit remote add origin git@github.com:Sheep1433/learngit.git\n或者git remote add origin https://github.com/Sheep1433/learngit.git\n# git支持多种协议，如ssh和https,默认的git://使用的是ssh协议，速度快\n```\n\n将本地仓库内容推送到远程库\n\n```\ngit push -u origin master\n```\n\n第一次推送master分支时，加上-u参数，会同时将本地master和远程库的master关联起来，以后的推送或拉取可以简化命令\n\n如\n\n```\ngit push 或者 git push origin master\n```\n\n**解除本地仓库和远程库的链接**\n\n查看远程库信息\n\n```\ngit remote -v\n```\n\n然后删除\n\n```\ngit remote rm origin\n```\n\n## 分支管理\n\n创建dev分支并且切换\n\n```\ngit checkout -b dev\t\t等同于 git branch dev 加上git checkout dev也等同于git switch -c dev\n```\n\n使用git branch查看分支\n\n在dev分支中完成代码工作后，并使用git add和git commit 提交后，切换至master分支，是无法看到dev分支的工作的，通过在master分支中使用git merge dev命令合并分支。\t\t\n\n```\n删除分支\tgit branch -d dev\n创建分支并切换\t\tgit checkout -b dev\n查看分支\tgit branch\n查看日志\tgit log\n合并分支\tgit merge dev\n禁用Fast-Forward模式进行合并分支\tgit merge --no-ff -m \"merge with no-ff\" dev\ngit stash命令的场景假设：\n\t保留工作现场\t\tgit stash\n\t切换master分支 \t git checkout master\n\t创建新分支\t\tgit checkout -b issue001\n\tgit add 和git commit -m提交修复\n\t切回master分支\t git switch master\n\t将issue分支合并入master分支\tgit merge --no-ff -m \"merge with no-ff\" issue001\n\t切回dev分支\t\tgit switch dev\n\t查看工作现场\t\tgit stash list\n\t恢复现场并删除\t\tgit stash apply和git stash drop等同于git stash pop\n恢复指定的stash\tgit stash apply stash@{0}\n删除还没有合并的分支\tgit branch -D feature-vulcan\n从本地推送分支\t\tgit push origin branch-name\n如果推送失败，先用git pull抓取\n在本地创建和远程分支对应的分支\t\tgit checkout -b branch-name origin/branch-name\n建立本地分支和远程分支的管理\t\tgit branch --set-upstream-to branch-name rigin/branch-name\n查看日志\tgit log\n查看日志\tgit log --pretty=oneline --abbrev-commit\n打上标签\tgit tag v1.0\n查看标签\tgit tag\n针对指定commit id打上标签\tgit tag v0.9 f52c633\n\n删除远程分支 git push origin --delete 远程分支名\n\n```\n\n将推送的远程库名字改成不同的，就可以将一个本地库推送到多个平台\n\n```\ngit remote add github git@github.com:Sheep1433/learngit.git\ngit remote add gitee git@github.com:Sheep1433/learngit.git\n```\n\n删除github上的文件夹，在本地仓库使用git rm -r --cached 文件夹名，再使用git commit和git push\n\n下载源码时切换版本\tgit clone 源码， git tag 列出所有版本，git checkout 版本号\n\n参与到别人的开源项目中\n\n在github中fork项目，然后git clone自己的仓库，这样才能提交推送，如果想让官方接受修改，在github上pr(pull requests)\n","slug":"git笔记","published":1,"updated":"2022-12-03T14:53:47.342Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld1tm1iw0006bsw7c0so834y","content":"<h2 id=\"git核心\"><a href=\"#git核心\" class=\"headerlink\" title=\"git核心\"></a>git核心</h2><p>![Screenshot_20220416_171404_tv.danmaku.bili](D:\\Huawei Share\\Huawei Share\\Screenshot_20220416_171404_tv.danmaku.bili.jpg)</p>\n<h2 id=\"git登录\"><a href=\"#git登录\" class=\"headerlink\" title=\"git登录\"></a>git登录</h2><p>查看当前登录账号：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> config user.name<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>查看当前登录邮箱</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> config user.email<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>修改用户名和邮箱：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> config --global user.name <span class=\"token string\">\"Your_username\"</span>\n<span class=\"token function\">git</span> config --global user.email <span class=\"token string\">\"Your_email\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>初始化一个Git仓库，使用<code>git init</code>命令。</p>\n<p>添加文件到Git仓库，分两步：</p>\n<ol>\n<li>使用命令<code>git add &lt;file&gt;</code>，注意，可反复多次使用，添加多个文件；</li>\n<li>使用命令<code>git commit -m &lt;message&gt;</code>，完成。</li>\n</ol>\n<ul>\n<li>要随时掌握工作区的状态，使用<code>git status</code>命令。</li>\n<li>如果<code>git status</code>告诉你有文件被修改过，用<code>git diff</code>可以查看修改内容。</li>\n</ul>\n<h2 id=\"版本切换\"><a href=\"#版本切换\" class=\"headerlink\" title=\"版本切换\"></a>版本切换</h2><ul>\n<li><code>HEAD</code>指向的版本就是当前版本，HEAD^表示上一个版本，HEAD^^表示上上个版本，HEAD~100表示往上100个版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code>，commit_id版本号不需要写全，只需要写前几个。</li>\n<li>穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。</li>\n<li>要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</li>\n</ul>\n<p>git把本地仓库推到github上</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">git remote add origin https:&#x2F;&#x2F;github.com&#x2F;Sheep1433&#x2F;learngit.git<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"C:\\Users\\Administrator\\blog\\newblog\\source\\picture\\image-20211223210005615.png\" alt=\"image-20211223210005615\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">git checkout -- file 撤销对file的修改<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>在本机上创建ssh key，然后在主目录的.ssh文件夹中将公钥复制到github或者gitee中即可。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">ssh-keygen -t rsa -C &quot;youremail@example.com&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后在本地仓库目录下运行以下命令，将本地仓库和远程库关联</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">git remote add origin git@github.com:Sheep1433&#x2F;learngit.git\n或者git remote add origin https:&#x2F;&#x2F;github.com&#x2F;Sheep1433&#x2F;learngit.git\n# git支持多种协议，如ssh和https,默认的git:&#x2F;&#x2F;使用的是ssh协议，速度快<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>将本地仓库内容推送到远程库</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">git push -u origin master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>第一次推送master分支时，加上-u参数，会同时将本地master和远程库的master关联起来，以后的推送或拉取可以简化命令</p>\n<p>如</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">git push 或者 git push origin master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>解除本地仓库和远程库的链接</strong></p>\n<p>查看远程库信息</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">git remote -v<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后删除</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">git remote rm origin<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h2><p>创建dev分支并且切换</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">git checkout -b dev\t\t等同于 git branch dev 加上git checkout dev也等同于git switch -c dev<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>使用git branch查看分支</p>\n<p>在dev分支中完成代码工作后，并使用git add和git commit 提交后，切换至master分支，是无法看到dev分支的工作的，通过在master分支中使用git merge dev命令合并分支。\t\t</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">删除分支\tgit branch -d dev\n创建分支并切换\t\tgit checkout -b dev\n查看分支\tgit branch\n查看日志\tgit log\n合并分支\tgit merge dev\n禁用Fast-Forward模式进行合并分支\tgit merge --no-ff -m &quot;merge with no-ff&quot; dev\ngit stash命令的场景假设：\n\t保留工作现场\t\tgit stash\n\t切换master分支 \t git checkout master\n\t创建新分支\t\tgit checkout -b issue001\n\tgit add 和git commit -m提交修复\n\t切回master分支\t git switch master\n\t将issue分支合并入master分支\tgit merge --no-ff -m &quot;merge with no-ff&quot; issue001\n\t切回dev分支\t\tgit switch dev\n\t查看工作现场\t\tgit stash list\n\t恢复现场并删除\t\tgit stash apply和git stash drop等同于git stash pop\n恢复指定的stash\tgit stash apply stash@&#123;0&#125;\n删除还没有合并的分支\tgit branch -D feature-vulcan\n从本地推送分支\t\tgit push origin branch-name\n如果推送失败，先用git pull抓取\n在本地创建和远程分支对应的分支\t\tgit checkout -b branch-name origin&#x2F;branch-name\n建立本地分支和远程分支的管理\t\tgit branch --set-upstream-to branch-name rigin&#x2F;branch-name\n查看日志\tgit log\n查看日志\tgit log --pretty&#x3D;oneline --abbrev-commit\n打上标签\tgit tag v1.0\n查看标签\tgit tag\n针对指定commit id打上标签\tgit tag v0.9 f52c633\n\n删除远程分支 git push origin --delete 远程分支名\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>将推送的远程库名字改成不同的，就可以将一个本地库推送到多个平台</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">git remote add github git@github.com:Sheep1433&#x2F;learngit.git\ngit remote add gitee git@github.com:Sheep1433&#x2F;learngit.git<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>删除github上的文件夹，在本地仓库使用git rm -r –cached 文件夹名，再使用git commit和git push</p>\n<p>下载源码时切换版本\tgit clone 源码， git tag 列出所有版本，git checkout 版本号</p>\n<p>参与到别人的开源项目中</p>\n<p>在github中fork项目，然后git clone自己的仓库，这样才能提交推送，如果想让官方接受修改，在github上pr(pull requests)</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"git核心\"><a href=\"#git核心\" class=\"headerlink\" title=\"git核心\"></a>git核心</h2><p>![Screenshot_20220416_171404_tv.danmaku.bili](D:\\Huawei Share\\Huawei Share\\Screenshot_20220416_171404_tv.danmaku.bili.jpg)</p>\n<h2 id=\"git登录\"><a href=\"#git登录\" class=\"headerlink\" title=\"git登录\"></a>git登录</h2><p>查看当前登录账号：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> config user.name<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>查看当前登录邮箱</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> config user.email<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>修改用户名和邮箱：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> config --global user.name <span class=\"token string\">\"Your_username\"</span>\n<span class=\"token function\">git</span> config --global user.email <span class=\"token string\">\"Your_email\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>初始化一个Git仓库，使用<code>git init</code>命令。</p>\n<p>添加文件到Git仓库，分两步：</p>\n<ol>\n<li>使用命令<code>git add &lt;file&gt;</code>，注意，可反复多次使用，添加多个文件；</li>\n<li>使用命令<code>git commit -m &lt;message&gt;</code>，完成。</li>\n</ol>\n<ul>\n<li>要随时掌握工作区的状态，使用<code>git status</code>命令。</li>\n<li>如果<code>git status</code>告诉你有文件被修改过，用<code>git diff</code>可以查看修改内容。</li>\n</ul>\n<h2 id=\"版本切换\"><a href=\"#版本切换\" class=\"headerlink\" title=\"版本切换\"></a>版本切换</h2><ul>\n<li><code>HEAD</code>指向的版本就是当前版本，HEAD^表示上一个版本，HEAD^^表示上上个版本，HEAD~100表示往上100个版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code>，commit_id版本号不需要写全，只需要写前几个。</li>\n<li>穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。</li>\n<li>要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</li>\n</ul>\n<p>git把本地仓库推到github上</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">git remote add origin https:&#x2F;&#x2F;github.com&#x2F;Sheep1433&#x2F;learngit.git<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"C:\\Users\\Administrator\\blog\\newblog\\source\\picture\\image-20211223210005615.png\" alt=\"image-20211223210005615\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">git checkout -- file 撤销对file的修改<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>在本机上创建ssh key，然后在主目录的.ssh文件夹中将公钥复制到github或者gitee中即可。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">ssh-keygen -t rsa -C &quot;youremail@example.com&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后在本地仓库目录下运行以下命令，将本地仓库和远程库关联</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">git remote add origin git@github.com:Sheep1433&#x2F;learngit.git\n或者git remote add origin https:&#x2F;&#x2F;github.com&#x2F;Sheep1433&#x2F;learngit.git\n# git支持多种协议，如ssh和https,默认的git:&#x2F;&#x2F;使用的是ssh协议，速度快<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>将本地仓库内容推送到远程库</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">git push -u origin master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>第一次推送master分支时，加上-u参数，会同时将本地master和远程库的master关联起来，以后的推送或拉取可以简化命令</p>\n<p>如</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">git push 或者 git push origin master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>解除本地仓库和远程库的链接</strong></p>\n<p>查看远程库信息</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">git remote -v<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后删除</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">git remote rm origin<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h2><p>创建dev分支并且切换</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">git checkout -b dev\t\t等同于 git branch dev 加上git checkout dev也等同于git switch -c dev<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>使用git branch查看分支</p>\n<p>在dev分支中完成代码工作后，并使用git add和git commit 提交后，切换至master分支，是无法看到dev分支的工作的，通过在master分支中使用git merge dev命令合并分支。\t\t</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">删除分支\tgit branch -d dev\n创建分支并切换\t\tgit checkout -b dev\n查看分支\tgit branch\n查看日志\tgit log\n合并分支\tgit merge dev\n禁用Fast-Forward模式进行合并分支\tgit merge --no-ff -m &quot;merge with no-ff&quot; dev\ngit stash命令的场景假设：\n\t保留工作现场\t\tgit stash\n\t切换master分支 \t git checkout master\n\t创建新分支\t\tgit checkout -b issue001\n\tgit add 和git commit -m提交修复\n\t切回master分支\t git switch master\n\t将issue分支合并入master分支\tgit merge --no-ff -m &quot;merge with no-ff&quot; issue001\n\t切回dev分支\t\tgit switch dev\n\t查看工作现场\t\tgit stash list\n\t恢复现场并删除\t\tgit stash apply和git stash drop等同于git stash pop\n恢复指定的stash\tgit stash apply stash@&#123;0&#125;\n删除还没有合并的分支\tgit branch -D feature-vulcan\n从本地推送分支\t\tgit push origin branch-name\n如果推送失败，先用git pull抓取\n在本地创建和远程分支对应的分支\t\tgit checkout -b branch-name origin&#x2F;branch-name\n建立本地分支和远程分支的管理\t\tgit branch --set-upstream-to branch-name rigin&#x2F;branch-name\n查看日志\tgit log\n查看日志\tgit log --pretty&#x3D;oneline --abbrev-commit\n打上标签\tgit tag v1.0\n查看标签\tgit tag\n针对指定commit id打上标签\tgit tag v0.9 f52c633\n\n删除远程分支 git push origin --delete 远程分支名\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>将推送的远程库名字改成不同的，就可以将一个本地库推送到多个平台</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">git remote add github git@github.com:Sheep1433&#x2F;learngit.git\ngit remote add gitee git@github.com:Sheep1433&#x2F;learngit.git<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>删除github上的文件夹，在本地仓库使用git rm -r –cached 文件夹名，再使用git commit和git push</p>\n<p>下载源码时切换版本\tgit clone 源码， git tag 列出所有版本，git checkout 版本号</p>\n<p>参与到别人的开源项目中</p>\n<p>在github中fork项目，然后git clone自己的仓库，这样才能提交推送，如果想让官方接受修改，在github上pr(pull requests)</p>\n"},{"title":"hexo博客搭建","_content":"\n参照[hexo史上最全搭建教程](https://blog.csdn.net/sinat_37781304/article/details/82729029)搭建了hexo个人网站。\n\n# hexo简介\n\nHexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入[hexo官网](https://hexo.io/zh-cn/)进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。\n\n# hexo搭建步骤\n\n1. ## 安装Git\n2. ## 安装Node.js\n3. ## 安装Hexo\n4. ## GitHub创建个人仓库\n5. ## 生成SSH添加到GitHub\n6. ## 将hexo部署到GitHub\n7. ## 设置个人域名\n8. ## 发布文章\n\n1. ## 安装Git\n\n2. ## 安装Node.js\n\n3. ## 安装Hexo\n\n4. ## GitHub创建个人仓库\n\n5. ## 生成SSH添加到GitHub\n\n6. ## 将hexo部署到GitHub\n\n7. ## 设置个人域名\n\n8. ## 发布文章","source":"_posts/hexo博客搭建.md","raw":"---\ntitle: hexo博客搭建\ntag: hexo\n---\n\n参照[hexo史上最全搭建教程](https://blog.csdn.net/sinat_37781304/article/details/82729029)搭建了hexo个人网站。\n\n# hexo简介\n\nHexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入[hexo官网](https://hexo.io/zh-cn/)进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。\n\n# hexo搭建步骤\n\n1. ## 安装Git\n2. ## 安装Node.js\n3. ## 安装Hexo\n4. ## GitHub创建个人仓库\n5. ## 生成SSH添加到GitHub\n6. ## 将hexo部署到GitHub\n7. ## 设置个人域名\n8. ## 发布文章\n\n1. ## 安装Git\n\n2. ## 安装Node.js\n\n3. ## 安装Hexo\n\n4. ## GitHub创建个人仓库\n\n5. ## 生成SSH添加到GitHub\n\n6. ## 将hexo部署到GitHub\n\n7. ## 设置个人域名\n\n8. ## 发布文章","slug":"hexo博客搭建","published":1,"date":"2023-01-16T13:58:01.197Z","updated":"2022-04-15T07:42:55.262Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld1tm1ix0009bsw7bsdhc0q3","content":"<p>参照<a href=\"https://blog.csdn.net/sinat_37781304/article/details/82729029\">hexo史上最全搭建教程</a>搭建了hexo个人网站。</p>\n<h1 id=\"hexo简介\"><a href=\"#hexo简介\" class=\"headerlink\" title=\"hexo简介\"></a>hexo简介</h1><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入<a href=\"https://hexo.io/zh-cn/\">hexo官网</a>进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。</p>\n<h1 id=\"hexo搭建步骤\"><a href=\"#hexo搭建步骤\" class=\"headerlink\" title=\"hexo搭建步骤\"></a>hexo搭建步骤</h1><ol>\n<li><h2 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h2></li>\n<li><h2 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h2></li>\n<li><h2 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h2></li>\n<li><h2 id=\"GitHub创建个人仓库\"><a href=\"#GitHub创建个人仓库\" class=\"headerlink\" title=\"GitHub创建个人仓库\"></a>GitHub创建个人仓库</h2></li>\n<li><h2 id=\"生成SSH添加到GitHub\"><a href=\"#生成SSH添加到GitHub\" class=\"headerlink\" title=\"生成SSH添加到GitHub\"></a>生成SSH添加到GitHub</h2></li>\n<li><h2 id=\"将hexo部署到GitHub\"><a href=\"#将hexo部署到GitHub\" class=\"headerlink\" title=\"将hexo部署到GitHub\"></a>将hexo部署到GitHub</h2></li>\n<li><h2 id=\"设置个人域名\"><a href=\"#设置个人域名\" class=\"headerlink\" title=\"设置个人域名\"></a>设置个人域名</h2></li>\n<li><h2 id=\"发布文章\"><a href=\"#发布文章\" class=\"headerlink\" title=\"发布文章\"></a>发布文章</h2></li>\n<li><h2 id=\"安装Git-1\"><a href=\"#安装Git-1\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h2></li>\n<li><h2 id=\"安装Node-js-1\"><a href=\"#安装Node-js-1\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h2></li>\n<li><h2 id=\"安装Hexo-1\"><a href=\"#安装Hexo-1\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h2></li>\n<li><h2 id=\"GitHub创建个人仓库-1\"><a href=\"#GitHub创建个人仓库-1\" class=\"headerlink\" title=\"GitHub创建个人仓库\"></a>GitHub创建个人仓库</h2></li>\n<li><h2 id=\"生成SSH添加到GitHub-1\"><a href=\"#生成SSH添加到GitHub-1\" class=\"headerlink\" title=\"生成SSH添加到GitHub\"></a>生成SSH添加到GitHub</h2></li>\n<li><h2 id=\"将hexo部署到GitHub-1\"><a href=\"#将hexo部署到GitHub-1\" class=\"headerlink\" title=\"将hexo部署到GitHub\"></a>将hexo部署到GitHub</h2></li>\n<li><h2 id=\"设置个人域名-1\"><a href=\"#设置个人域名-1\" class=\"headerlink\" title=\"设置个人域名\"></a>设置个人域名</h2></li>\n<li><h2 id=\"发布文章-1\"><a href=\"#发布文章-1\" class=\"headerlink\" title=\"发布文章\"></a>发布文章</h2></li>\n</ol>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>参照<a href=\"https://blog.csdn.net/sinat_37781304/article/details/82729029\">hexo史上最全搭建教程</a>搭建了hexo个人网站。</p>\n<h1 id=\"hexo简介\"><a href=\"#hexo简介\" class=\"headerlink\" title=\"hexo简介\"></a>hexo简介</h1><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入<a href=\"https://hexo.io/zh-cn/\">hexo官网</a>进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。</p>\n<h1 id=\"hexo搭建步骤\"><a href=\"#hexo搭建步骤\" class=\"headerlink\" title=\"hexo搭建步骤\"></a>hexo搭建步骤</h1><ol>\n<li><h2 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h2></li>\n<li><h2 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h2></li>\n<li><h2 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h2></li>\n<li><h2 id=\"GitHub创建个人仓库\"><a href=\"#GitHub创建个人仓库\" class=\"headerlink\" title=\"GitHub创建个人仓库\"></a>GitHub创建个人仓库</h2></li>\n<li><h2 id=\"生成SSH添加到GitHub\"><a href=\"#生成SSH添加到GitHub\" class=\"headerlink\" title=\"生成SSH添加到GitHub\"></a>生成SSH添加到GitHub</h2></li>\n<li><h2 id=\"将hexo部署到GitHub\"><a href=\"#将hexo部署到GitHub\" class=\"headerlink\" title=\"将hexo部署到GitHub\"></a>将hexo部署到GitHub</h2></li>\n<li><h2 id=\"设置个人域名\"><a href=\"#设置个人域名\" class=\"headerlink\" title=\"设置个人域名\"></a>设置个人域名</h2></li>\n<li><h2 id=\"发布文章\"><a href=\"#发布文章\" class=\"headerlink\" title=\"发布文章\"></a>发布文章</h2></li>\n<li><h2 id=\"安装Git-1\"><a href=\"#安装Git-1\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h2></li>\n<li><h2 id=\"安装Node-js-1\"><a href=\"#安装Node-js-1\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h2></li>\n<li><h2 id=\"安装Hexo-1\"><a href=\"#安装Hexo-1\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h2></li>\n<li><h2 id=\"GitHub创建个人仓库-1\"><a href=\"#GitHub创建个人仓库-1\" class=\"headerlink\" title=\"GitHub创建个人仓库\"></a>GitHub创建个人仓库</h2></li>\n<li><h2 id=\"生成SSH添加到GitHub-1\"><a href=\"#生成SSH添加到GitHub-1\" class=\"headerlink\" title=\"生成SSH添加到GitHub\"></a>生成SSH添加到GitHub</h2></li>\n<li><h2 id=\"将hexo部署到GitHub-1\"><a href=\"#将hexo部署到GitHub-1\" class=\"headerlink\" title=\"将hexo部署到GitHub\"></a>将hexo部署到GitHub</h2></li>\n<li><h2 id=\"设置个人域名-1\"><a href=\"#设置个人域名-1\" class=\"headerlink\" title=\"设置个人域名\"></a>设置个人域名</h2></li>\n<li><h2 id=\"发布文章-1\"><a href=\"#发布文章-1\" class=\"headerlink\" title=\"发布文章\"></a>发布文章</h2></li>\n</ol>\n"},{"title":"grep、sed、awk三剑客","date":"2022-12-01T14:02:56.000Z","author":"三岁浪迹天涯","_content":"\n## grep\n\n文本搜索工具，支持使用正则表达式搜索文本，全称为Global Regular Expression Print。\n\n### 参数选项\n\n**[options]主要参数：**\n\n> **-c：只输出匹配行的计数。 -i：不区分大 小写(只适用于单字符)。**\n> -h：查询多文件时不显示文件名。\n> -l：查询多文件时只输出包含匹配字符的文件名。\n> **-n：显示匹配行及 行号。**\n> -s：不显示不存在或无匹配文本的错误信息。\n> **-v：排除，不显示过滤的字符串的行；显示不包含匹配文本的所有行**\n> -e : 指定字符串做为查找文件内容的样式，可以指定多个\n> **-E ：将样式为延伸的正则表达式来使用。**\n> **-o ：输出精确匹配的字符而不是默认的整行**\n> -f ：指定规则文件，其内容含有一个或多个规则样式\n> \t\t让grep查找符合规则条件的文件内容，格式为每行一个规则样式\n\n**Context control：**\n\n> -B 除了显示匹配的一行之外，并显示该行之前的num行\n> -A 除了显示匹配的一行之外，并显示该行之后的num行\n> -C 除了显示匹配的一行之外，并显示该行之前后各num行\n\n**pattern正则表达式主要参数：**\n\n> \\：忽略正则表达式中特殊字符的原有含义。\n> .：所有的单个字符。\n> *：有字符，长度可以为0。^：匹配正则表达式的开始行。\n> $: 匹配正则表达式的结束行。\n> \\<：从匹配正则表达 式的行开始。\n> \\>：到匹配正则表达式的行结束。\n> [ ]：单个字符，如 [Gg]rep 匹配Grep和grep。\n> [ - ]：范围，如[A-Z]，即A、B、C一直到Z都符合要求。\n> [^]：匹配一个不在指定范围内的字符\n> \t\t如：'[^A-FH-Z]rep'匹配不包含A-F和H-Z的一个字母开头，紧跟rep的行\n> x\\{m\\}：重复字符x，m次，如：'0\\{5\\}'匹配包含5个0的行\n> x\\{m,\\}：重复字符x,至少m次，如：'0\\{5,\\}'匹配至少有5个0的行\n> x\\{m,n\\}：重复字符x，至少m次，不多于n次，如：'0\\{5,10\\}'匹配5 -- 10个0的行\n\n### 常用示例\n\n```bash\n# 查找指定进程个数\nps -ef |grep -c sshd\n# 查找test.txt中符合文件test2.txt的规则的内容，test2.txt有多行\ncat test.txt | grep -f test2.txt\n# 查找test.txt中符合文件test2.txt的规则的内容，并显示行号\ncat test.txt | grep -nf test2.txt\n# 从多个文件中查找关键词\ngrep 'linux' test.txt test2.txt\n# 查找以w开头的行内容\ncat test.txt | grep '^w'\n# 查找以w结尾的行内容\ncat test.txt | grep 'w$'\n# 查找非u开头的行内容\ncat test.txt | grep ^[^u]\n# 查找有有连续两个uu以上的行内容\ncat test.txt |grep -E 'u{2,}' grep -v '^$' test.txt\ncat test.txt |grep 'u\\{2,\\}'\n# 查找包含ab或者cd的行内容\ncat test.txt |grep -E 'ab|cd'\ncat test.txt |grep 'ab\\|cd'\n# 查找当前目录以txt结尾的文件中所有包含每个字符串至少有7个连续小写字符的字符串的行\ngrep -E '[a-z]{7,}' *.txt\n# 查找包含ab的行内容并显示接下来的10行\ngrep 'ab' -A 10 test.txt\n# 过滤空行内容并输出\n grep -v '^$' test.txt\n```\n\n## sed\n\n### 参数选项\n\n**参数说明**：\n\n> -e 以选项中指定的script来处理输入的文本文件。\n>\n> -f以选项中指定的script文件来处理输入的文本文件。\n>\n> -h或--help 显示帮助。\n>\n> -n或--quiet或--silent 仅显示script处理后的结果。\n>\n> -V或--version 显示版本信息。\n\n**动作说明**：\n\n> a ：新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～\n>\n> c ：取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！\n>\n> d ：删除，因为是删除啊，所以 d 后面通常不接任何东东；\n>\n> i ：插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；\n>\n> **p ：打印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行～**\n>\n> s ：取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正则表达式！例如 1,20s/old/new/g 就是啦！\n\n### 常用示例\n\n```bash\n# 在test文件的第四行后添加一行，并将结果输出到标准输出\nsed '4a newline' test.txt\n# 将test文件的内容列出并列出行号，同事将2-5行删除\nnl test.txt | sed '2,5d'\n# 在第二行前插入\nnl test.txt | sed '2i newline'\n# 在第二行后加入两行字(使用反斜杠)\nnl test.txt | sed '2a newline\\\nnewline_2'\n# 搜索test中有关键字oo的行\nnl test.txt | sed -n '/oo/p'\n# 将test.txt文件中每行第一次出现的oo用kk替换\nsed -e 's/oo/kk/' test.txt\n# 将test.txt所有的oo用kk替换，并更新文件\nsed -i 's/oo/kk/g' test.txt\n```\n\n## awk\n\n### 参数选项\n\n- -F fs or --field-separator fs\n  指定输入文件折分隔符，fs是一个字符串或者是一个正则表达式，如-F:。\n\n### 常用示例\n\n```bash\n# 每行按空格或TAB分割，输出文本中的1、4项\nawk '{print $1,$4}' log.txt\n# 使用\",\"分割\nawk -F, '{print $1,$2}'   log.txt\n```\n\n","source":"_posts/grep、sed、awk三剑客.md","raw":"---\ntitle: grep、sed、awk三剑客\ndate: 2022-12-01 22:02:56\nauthor: 三岁浪迹天涯\ncategories: linux\ntags:\n  - 三剑客\n  - 基础\n---\n\n## grep\n\n文本搜索工具，支持使用正则表达式搜索文本，全称为Global Regular Expression Print。\n\n### 参数选项\n\n**[options]主要参数：**\n\n> **-c：只输出匹配行的计数。 -i：不区分大 小写(只适用于单字符)。**\n> -h：查询多文件时不显示文件名。\n> -l：查询多文件时只输出包含匹配字符的文件名。\n> **-n：显示匹配行及 行号。**\n> -s：不显示不存在或无匹配文本的错误信息。\n> **-v：排除，不显示过滤的字符串的行；显示不包含匹配文本的所有行**\n> -e : 指定字符串做为查找文件内容的样式，可以指定多个\n> **-E ：将样式为延伸的正则表达式来使用。**\n> **-o ：输出精确匹配的字符而不是默认的整行**\n> -f ：指定规则文件，其内容含有一个或多个规则样式\n> \t\t让grep查找符合规则条件的文件内容，格式为每行一个规则样式\n\n**Context control：**\n\n> -B 除了显示匹配的一行之外，并显示该行之前的num行\n> -A 除了显示匹配的一行之外，并显示该行之后的num行\n> -C 除了显示匹配的一行之外，并显示该行之前后各num行\n\n**pattern正则表达式主要参数：**\n\n> \\：忽略正则表达式中特殊字符的原有含义。\n> .：所有的单个字符。\n> *：有字符，长度可以为0。^：匹配正则表达式的开始行。\n> $: 匹配正则表达式的结束行。\n> \\<：从匹配正则表达 式的行开始。\n> \\>：到匹配正则表达式的行结束。\n> [ ]：单个字符，如 [Gg]rep 匹配Grep和grep。\n> [ - ]：范围，如[A-Z]，即A、B、C一直到Z都符合要求。\n> [^]：匹配一个不在指定范围内的字符\n> \t\t如：'[^A-FH-Z]rep'匹配不包含A-F和H-Z的一个字母开头，紧跟rep的行\n> x\\{m\\}：重复字符x，m次，如：'0\\{5\\}'匹配包含5个0的行\n> x\\{m,\\}：重复字符x,至少m次，如：'0\\{5,\\}'匹配至少有5个0的行\n> x\\{m,n\\}：重复字符x，至少m次，不多于n次，如：'0\\{5,10\\}'匹配5 -- 10个0的行\n\n### 常用示例\n\n```bash\n# 查找指定进程个数\nps -ef |grep -c sshd\n# 查找test.txt中符合文件test2.txt的规则的内容，test2.txt有多行\ncat test.txt | grep -f test2.txt\n# 查找test.txt中符合文件test2.txt的规则的内容，并显示行号\ncat test.txt | grep -nf test2.txt\n# 从多个文件中查找关键词\ngrep 'linux' test.txt test2.txt\n# 查找以w开头的行内容\ncat test.txt | grep '^w'\n# 查找以w结尾的行内容\ncat test.txt | grep 'w$'\n# 查找非u开头的行内容\ncat test.txt | grep ^[^u]\n# 查找有有连续两个uu以上的行内容\ncat test.txt |grep -E 'u{2,}' grep -v '^$' test.txt\ncat test.txt |grep 'u\\{2,\\}'\n# 查找包含ab或者cd的行内容\ncat test.txt |grep -E 'ab|cd'\ncat test.txt |grep 'ab\\|cd'\n# 查找当前目录以txt结尾的文件中所有包含每个字符串至少有7个连续小写字符的字符串的行\ngrep -E '[a-z]{7,}' *.txt\n# 查找包含ab的行内容并显示接下来的10行\ngrep 'ab' -A 10 test.txt\n# 过滤空行内容并输出\n grep -v '^$' test.txt\n```\n\n## sed\n\n### 参数选项\n\n**参数说明**：\n\n> -e 以选项中指定的script来处理输入的文本文件。\n>\n> -f以选项中指定的script文件来处理输入的文本文件。\n>\n> -h或--help 显示帮助。\n>\n> -n或--quiet或--silent 仅显示script处理后的结果。\n>\n> -V或--version 显示版本信息。\n\n**动作说明**：\n\n> a ：新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～\n>\n> c ：取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！\n>\n> d ：删除，因为是删除啊，所以 d 后面通常不接任何东东；\n>\n> i ：插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；\n>\n> **p ：打印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行～**\n>\n> s ：取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正则表达式！例如 1,20s/old/new/g 就是啦！\n\n### 常用示例\n\n```bash\n# 在test文件的第四行后添加一行，并将结果输出到标准输出\nsed '4a newline' test.txt\n# 将test文件的内容列出并列出行号，同事将2-5行删除\nnl test.txt | sed '2,5d'\n# 在第二行前插入\nnl test.txt | sed '2i newline'\n# 在第二行后加入两行字(使用反斜杠)\nnl test.txt | sed '2a newline\\\nnewline_2'\n# 搜索test中有关键字oo的行\nnl test.txt | sed -n '/oo/p'\n# 将test.txt文件中每行第一次出现的oo用kk替换\nsed -e 's/oo/kk/' test.txt\n# 将test.txt所有的oo用kk替换，并更新文件\nsed -i 's/oo/kk/g' test.txt\n```\n\n## awk\n\n### 参数选项\n\n- -F fs or --field-separator fs\n  指定输入文件折分隔符，fs是一个字符串或者是一个正则表达式，如-F:。\n\n### 常用示例\n\n```bash\n# 每行按空格或TAB分割，输出文本中的1、4项\nawk '{print $1,$4}' log.txt\n# 使用\",\"分割\nawk -F, '{print $1,$2}'   log.txt\n```\n\n","slug":"grep、sed、awk三剑客","published":1,"updated":"2022-12-05T12:59:46.038Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld1tm1iz000bbsw7fj8cdn4o","content":"<h2 id=\"grep\"><a href=\"#grep\" class=\"headerlink\" title=\"grep\"></a>grep</h2><p>文本搜索工具，支持使用正则表达式搜索文本，全称为Global Regular Expression Print。</p>\n<h3 id=\"参数选项\"><a href=\"#参数选项\" class=\"headerlink\" title=\"参数选项\"></a>参数选项</h3><p><strong>[options]主要参数：</strong></p>\n<blockquote>\n<p><strong>-c：只输出匹配行的计数。 -i：不区分大 小写(只适用于单字符)。</strong><br>-h：查询多文件时不显示文件名。<br>-l：查询多文件时只输出包含匹配字符的文件名。<br><strong>-n：显示匹配行及 行号。</strong><br>-s：不显示不存在或无匹配文本的错误信息。<br><strong>-v：排除，不显示过滤的字符串的行；显示不包含匹配文本的所有行</strong><br>-e : 指定字符串做为查找文件内容的样式，可以指定多个<br><strong>-E ：将样式为延伸的正则表达式来使用。</strong><br><strong>-o ：输出精确匹配的字符而不是默认的整行</strong><br>-f ：指定规则文件，其内容含有一个或多个规则样式<br>        让grep查找符合规则条件的文件内容，格式为每行一个规则样式</p>\n</blockquote>\n<p><strong>Context control：</strong></p>\n<blockquote>\n<p>-B 除了显示匹配的一行之外，并显示该行之前的num行<br>-A 除了显示匹配的一行之外，并显示该行之后的num行<br>-C 除了显示匹配的一行之外，并显示该行之前后各num行</p>\n</blockquote>\n<p><strong>pattern正则表达式主要参数：</strong></p>\n<blockquote>\n<p>\\：忽略正则表达式中特殊字符的原有含义。<br>.：所有的单个字符。<br>*：有字符，长度可以为0。^：匹配正则表达式的开始行。<br>$: 匹配正则表达式的结束行。<br>&lt;：从匹配正则表达 式的行开始。<br>&gt;：到匹配正则表达式的行结束。<br>[ ]：单个字符，如 [Gg]rep 匹配Grep和grep。<br>[ - ]：范围，如[A-Z]，即A、B、C一直到Z都符合要求。<br>[^]：匹配一个不在指定范围内的字符<br>        如：’[^A-FH-Z]rep’匹配不包含A-F和H-Z的一个字母开头，紧跟rep的行<br>x{m}：重复字符x，m次，如：’0{5}‘匹配包含5个0的行<br>x{m,}：重复字符x,至少m次，如：’0{5,}‘匹配至少有5个0的行<br>x{m,n}：重复字符x，至少m次，不多于n次，如：’0{5,10}‘匹配5 – 10个0的行</p>\n</blockquote>\n<h3 id=\"常用示例\"><a href=\"#常用示例\" class=\"headerlink\" title=\"常用示例\"></a>常用示例</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 查找指定进程个数</span>\n<span class=\"token function\">ps</span> -ef <span class=\"token operator\">|</span><span class=\"token function\">grep</span> -c sshd\n<span class=\"token comment\"># 查找test.txt中符合文件test2.txt的规则的内容，test2.txt有多行</span>\n<span class=\"token function\">cat</span> test.txt <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> -f test2.txt\n<span class=\"token comment\"># 查找test.txt中符合文件test2.txt的规则的内容，并显示行号</span>\n<span class=\"token function\">cat</span> test.txt <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> -nf test2.txt\n<span class=\"token comment\"># 从多个文件中查找关键词</span>\n<span class=\"token function\">grep</span> <span class=\"token string\">'linux'</span> test.txt test2.txt\n<span class=\"token comment\"># 查找以w开头的行内容</span>\n<span class=\"token function\">cat</span> test.txt <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">'^w'</span>\n<span class=\"token comment\"># 查找以w结尾的行内容</span>\n<span class=\"token function\">cat</span> test.txt <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">'w$'</span>\n<span class=\"token comment\"># 查找非u开头的行内容</span>\n<span class=\"token function\">cat</span> test.txt <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> ^<span class=\"token punctuation\">[</span>^u<span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># 查找有有连续两个uu以上的行内容</span>\n<span class=\"token function\">cat</span> test.txt <span class=\"token operator\">|</span><span class=\"token function\">grep</span> -E <span class=\"token string\">'u&#123;2,&#125;'</span> <span class=\"token function\">grep</span> -v <span class=\"token string\">'^$'</span> test.txt\n<span class=\"token function\">cat</span> test.txt <span class=\"token operator\">|</span><span class=\"token function\">grep</span> <span class=\"token string\">'u\\&#123;2,\\&#125;'</span>\n<span class=\"token comment\"># 查找包含ab或者cd的行内容</span>\n<span class=\"token function\">cat</span> test.txt <span class=\"token operator\">|</span><span class=\"token function\">grep</span> -E <span class=\"token string\">'ab|cd'</span>\n<span class=\"token function\">cat</span> test.txt <span class=\"token operator\">|</span><span class=\"token function\">grep</span> <span class=\"token string\">'ab\\|cd'</span>\n<span class=\"token comment\"># 查找当前目录以txt结尾的文件中所有包含每个字符串至少有7个连续小写字符的字符串的行</span>\n<span class=\"token function\">grep</span> -E <span class=\"token string\">'[a-z]&#123;7,&#125;'</span> *.txt\n<span class=\"token comment\"># 查找包含ab的行内容并显示接下来的10行</span>\n<span class=\"token function\">grep</span> <span class=\"token string\">'ab'</span> -A <span class=\"token number\">10</span> test.txt\n<span class=\"token comment\"># 过滤空行内容并输出</span>\n <span class=\"token function\">grep</span> -v <span class=\"token string\">'^$'</span> test.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"sed\"><a href=\"#sed\" class=\"headerlink\" title=\"sed\"></a>sed</h2><h3 id=\"参数选项-1\"><a href=\"#参数选项-1\" class=\"headerlink\" title=\"参数选项\"></a>参数选项</h3><p><strong>参数说明</strong>：</p>\n<blockquote>\n<p>-e 以选项中指定的script来处理输入的文本文件。</p>\n<p>-f以选项中指定的script文件来处理输入的文本文件。</p>\n<p>-h或–help 显示帮助。</p>\n<p>-n或–quiet或–silent 仅显示script处理后的结果。</p>\n<p>-V或–version 显示版本信息。</p>\n</blockquote>\n<p><strong>动作说明</strong>：</p>\n<blockquote>\n<p>a ：新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～</p>\n<p>c ：取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！</p>\n<p>d ：删除，因为是删除啊，所以 d 后面通常不接任何东东；</p>\n<p>i ：插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；</p>\n<p><strong>p ：打印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行～</strong></p>\n<p>s ：取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正则表达式！例如 1,20s&#x2F;old&#x2F;new&#x2F;g 就是啦！</p>\n</blockquote>\n<h3 id=\"常用示例-1\"><a href=\"#常用示例-1\" class=\"headerlink\" title=\"常用示例\"></a>常用示例</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 在test文件的第四行后添加一行，并将结果输出到标准输出</span>\n<span class=\"token function\">sed</span> <span class=\"token string\">'4a newline'</span> test.txt\n<span class=\"token comment\"># 将test文件的内容列出并列出行号，同事将2-5行删除</span>\n<span class=\"token function\">nl</span> test.txt <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token string\">'2,5d'</span>\n<span class=\"token comment\"># 在第二行前插入</span>\n<span class=\"token function\">nl</span> test.txt <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token string\">'2i newline'</span>\n<span class=\"token comment\"># 在第二行后加入两行字(使用反斜杠)</span>\n<span class=\"token function\">nl</span> test.txt <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token string\">'2a newline\\\nnewline_2'</span>\n<span class=\"token comment\"># 搜索test中有关键字oo的行</span>\n<span class=\"token function\">nl</span> test.txt <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> -n <span class=\"token string\">'/oo/p'</span>\n<span class=\"token comment\"># 将test.txt文件中每行第一次出现的oo用kk替换</span>\n<span class=\"token function\">sed</span> -e <span class=\"token string\">'s/oo/kk/'</span> test.txt\n<span class=\"token comment\"># 将test.txt所有的oo用kk替换，并更新文件</span>\n<span class=\"token function\">sed</span> -i <span class=\"token string\">'s/oo/kk/g'</span> test.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"awk\"><a href=\"#awk\" class=\"headerlink\" title=\"awk\"></a>awk</h2><h3 id=\"参数选项-2\"><a href=\"#参数选项-2\" class=\"headerlink\" title=\"参数选项\"></a>参数选项</h3><ul>\n<li>-F fs or –field-separator fs<br>指定输入文件折分隔符，fs是一个字符串或者是一个正则表达式，如-F:。</li>\n</ul>\n<h3 id=\"常用示例-2\"><a href=\"#常用示例-2\" class=\"headerlink\" title=\"常用示例\"></a>常用示例</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 每行按空格或TAB分割，输出文本中的1、4项</span>\n<span class=\"token function\">awk</span> <span class=\"token string\">'&#123;print $1,$4&#125;'</span> log.txt\n<span class=\"token comment\"># 使用\",\"分割</span>\n<span class=\"token function\">awk</span> -F, <span class=\"token string\">'&#123;print $1,$2&#125;'</span>   log.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"grep\"><a href=\"#grep\" class=\"headerlink\" title=\"grep\"></a>grep</h2><p>文本搜索工具，支持使用正则表达式搜索文本，全称为Global Regular Expression Print。</p>\n<h3 id=\"参数选项\"><a href=\"#参数选项\" class=\"headerlink\" title=\"参数选项\"></a>参数选项</h3><p><strong>[options]主要参数：</strong></p>\n<blockquote>\n<p><strong>-c：只输出匹配行的计数。 -i：不区分大 小写(只适用于单字符)。</strong><br>-h：查询多文件时不显示文件名。<br>-l：查询多文件时只输出包含匹配字符的文件名。<br><strong>-n：显示匹配行及 行号。</strong><br>-s：不显示不存在或无匹配文本的错误信息。<br><strong>-v：排除，不显示过滤的字符串的行；显示不包含匹配文本的所有行</strong><br>-e : 指定字符串做为查找文件内容的样式，可以指定多个<br><strong>-E ：将样式为延伸的正则表达式来使用。</strong><br><strong>-o ：输出精确匹配的字符而不是默认的整行</strong><br>-f ：指定规则文件，其内容含有一个或多个规则样式<br>        让grep查找符合规则条件的文件内容，格式为每行一个规则样式</p>\n</blockquote>\n<p><strong>Context control：</strong></p>\n<blockquote>\n<p>-B 除了显示匹配的一行之外，并显示该行之前的num行<br>-A 除了显示匹配的一行之外，并显示该行之后的num行<br>-C 除了显示匹配的一行之外，并显示该行之前后各num行</p>\n</blockquote>\n<p><strong>pattern正则表达式主要参数：</strong></p>\n<blockquote>\n<p>\\：忽略正则表达式中特殊字符的原有含义。<br>.：所有的单个字符。<br>*：有字符，长度可以为0。^：匹配正则表达式的开始行。<br>$: 匹配正则表达式的结束行。<br>&lt;：从匹配正则表达 式的行开始。<br>&gt;：到匹配正则表达式的行结束。<br>[ ]：单个字符，如 [Gg]rep 匹配Grep和grep。<br>[ - ]：范围，如[A-Z]，即A、B、C一直到Z都符合要求。<br>[^]：匹配一个不在指定范围内的字符<br>        如：’[^A-FH-Z]rep’匹配不包含A-F和H-Z的一个字母开头，紧跟rep的行<br>x{m}：重复字符x，m次，如：’0{5}‘匹配包含5个0的行<br>x{m,}：重复字符x,至少m次，如：’0{5,}‘匹配至少有5个0的行<br>x{m,n}：重复字符x，至少m次，不多于n次，如：’0{5,10}‘匹配5 – 10个0的行</p>\n</blockquote>\n<h3 id=\"常用示例\"><a href=\"#常用示例\" class=\"headerlink\" title=\"常用示例\"></a>常用示例</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 查找指定进程个数</span>\n<span class=\"token function\">ps</span> -ef <span class=\"token operator\">|</span><span class=\"token function\">grep</span> -c sshd\n<span class=\"token comment\"># 查找test.txt中符合文件test2.txt的规则的内容，test2.txt有多行</span>\n<span class=\"token function\">cat</span> test.txt <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> -f test2.txt\n<span class=\"token comment\"># 查找test.txt中符合文件test2.txt的规则的内容，并显示行号</span>\n<span class=\"token function\">cat</span> test.txt <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> -nf test2.txt\n<span class=\"token comment\"># 从多个文件中查找关键词</span>\n<span class=\"token function\">grep</span> <span class=\"token string\">'linux'</span> test.txt test2.txt\n<span class=\"token comment\"># 查找以w开头的行内容</span>\n<span class=\"token function\">cat</span> test.txt <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">'^w'</span>\n<span class=\"token comment\"># 查找以w结尾的行内容</span>\n<span class=\"token function\">cat</span> test.txt <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">'w$'</span>\n<span class=\"token comment\"># 查找非u开头的行内容</span>\n<span class=\"token function\">cat</span> test.txt <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> ^<span class=\"token punctuation\">[</span>^u<span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># 查找有有连续两个uu以上的行内容</span>\n<span class=\"token function\">cat</span> test.txt <span class=\"token operator\">|</span><span class=\"token function\">grep</span> -E <span class=\"token string\">'u&#123;2,&#125;'</span> <span class=\"token function\">grep</span> -v <span class=\"token string\">'^$'</span> test.txt\n<span class=\"token function\">cat</span> test.txt <span class=\"token operator\">|</span><span class=\"token function\">grep</span> <span class=\"token string\">'u\\&#123;2,\\&#125;'</span>\n<span class=\"token comment\"># 查找包含ab或者cd的行内容</span>\n<span class=\"token function\">cat</span> test.txt <span class=\"token operator\">|</span><span class=\"token function\">grep</span> -E <span class=\"token string\">'ab|cd'</span>\n<span class=\"token function\">cat</span> test.txt <span class=\"token operator\">|</span><span class=\"token function\">grep</span> <span class=\"token string\">'ab\\|cd'</span>\n<span class=\"token comment\"># 查找当前目录以txt结尾的文件中所有包含每个字符串至少有7个连续小写字符的字符串的行</span>\n<span class=\"token function\">grep</span> -E <span class=\"token string\">'[a-z]&#123;7,&#125;'</span> *.txt\n<span class=\"token comment\"># 查找包含ab的行内容并显示接下来的10行</span>\n<span class=\"token function\">grep</span> <span class=\"token string\">'ab'</span> -A <span class=\"token number\">10</span> test.txt\n<span class=\"token comment\"># 过滤空行内容并输出</span>\n <span class=\"token function\">grep</span> -v <span class=\"token string\">'^$'</span> test.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"sed\"><a href=\"#sed\" class=\"headerlink\" title=\"sed\"></a>sed</h2><h3 id=\"参数选项-1\"><a href=\"#参数选项-1\" class=\"headerlink\" title=\"参数选项\"></a>参数选项</h3><p><strong>参数说明</strong>：</p>\n<blockquote>\n<p>-e 以选项中指定的script来处理输入的文本文件。</p>\n<p>-f以选项中指定的script文件来处理输入的文本文件。</p>\n<p>-h或–help 显示帮助。</p>\n<p>-n或–quiet或–silent 仅显示script处理后的结果。</p>\n<p>-V或–version 显示版本信息。</p>\n</blockquote>\n<p><strong>动作说明</strong>：</p>\n<blockquote>\n<p>a ：新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～</p>\n<p>c ：取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！</p>\n<p>d ：删除，因为是删除啊，所以 d 后面通常不接任何东东；</p>\n<p>i ：插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；</p>\n<p><strong>p ：打印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行～</strong></p>\n<p>s ：取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正则表达式！例如 1,20s&#x2F;old&#x2F;new&#x2F;g 就是啦！</p>\n</blockquote>\n<h3 id=\"常用示例-1\"><a href=\"#常用示例-1\" class=\"headerlink\" title=\"常用示例\"></a>常用示例</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 在test文件的第四行后添加一行，并将结果输出到标准输出</span>\n<span class=\"token function\">sed</span> <span class=\"token string\">'4a newline'</span> test.txt\n<span class=\"token comment\"># 将test文件的内容列出并列出行号，同事将2-5行删除</span>\n<span class=\"token function\">nl</span> test.txt <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token string\">'2,5d'</span>\n<span class=\"token comment\"># 在第二行前插入</span>\n<span class=\"token function\">nl</span> test.txt <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token string\">'2i newline'</span>\n<span class=\"token comment\"># 在第二行后加入两行字(使用反斜杠)</span>\n<span class=\"token function\">nl</span> test.txt <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token string\">'2a newline\\\nnewline_2'</span>\n<span class=\"token comment\"># 搜索test中有关键字oo的行</span>\n<span class=\"token function\">nl</span> test.txt <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> -n <span class=\"token string\">'/oo/p'</span>\n<span class=\"token comment\"># 将test.txt文件中每行第一次出现的oo用kk替换</span>\n<span class=\"token function\">sed</span> -e <span class=\"token string\">'s/oo/kk/'</span> test.txt\n<span class=\"token comment\"># 将test.txt所有的oo用kk替换，并更新文件</span>\n<span class=\"token function\">sed</span> -i <span class=\"token string\">'s/oo/kk/g'</span> test.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"awk\"><a href=\"#awk\" class=\"headerlink\" title=\"awk\"></a>awk</h2><h3 id=\"参数选项-2\"><a href=\"#参数选项-2\" class=\"headerlink\" title=\"参数选项\"></a>参数选项</h3><ul>\n<li>-F fs or –field-separator fs<br>指定输入文件折分隔符，fs是一个字符串或者是一个正则表达式，如-F:。</li>\n</ul>\n<h3 id=\"常用示例-2\"><a href=\"#常用示例-2\" class=\"headerlink\" title=\"常用示例\"></a>常用示例</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 每行按空格或TAB分割，输出文本中的1、4项</span>\n<span class=\"token function\">awk</span> <span class=\"token string\">'&#123;print $1,$4&#125;'</span> log.txt\n<span class=\"token comment\"># 使用\",\"分割</span>\n<span class=\"token function\">awk</span> -F, <span class=\"token string\">'&#123;print $1,$2&#125;'</span>   log.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"linux常用命令","date":"2022-12-02T03:32:31.000Z","author":"三岁浪迹天涯","_content":"\n## 文件操作\n\n### 常见命令\n\n```\ncat\t\t\tchmod\t\tdiff\t\tcut\t\t\tmv\ntee\t\t\tcp\t\t\twhich\t\twhereis\t\tawk\nscp\t\t\tsed\t\t\ttr\t\t\tsort\t\thead\ntail\t\tless\t\tmore\t\tunzip\t\ttar\nvi\t\t\twc\t\t\tln\t\t\tuniq\t\tnl\nxargs\n```\n\n### 具体案例\n\n#### 复制文件夹\n\ncp -r 文件夹\n\n#### 统计文件有多少行\n\n```bash\nwc testfile           # testfile文件的统计信息  \n3 92 598 testfile       # testfile文件的行数为3、单词数92、字节数598\n```\n\n- -c或--bytes或--chars 只显示Bytes数。\n- -l或--lines 显示行数。\n- -w或--words 只显示字数。\n\n####  **建立软链接(快捷方式)，以及硬链接的命令。**\n\n 软链接： ln -s slink source\n 硬链接： ln link source \n\n#### which、whereis、find、locate的区别\n\n#### sort命令\n\n- -n 依照数值的大小排序。\n- -r 以相反的顺序来排序\n- [-k field1[,field2]] 按指定的列进行排序。\n\n#### uniq命令用法\n\n用于检查及删除文本文件中重复出现的行列，一般与 sort 命令结合使用\n\n- -c或--count 在每列旁边显示该行重复出现的次数。\n- -d或--repeated 仅显示重复出现的行列。\n\n当文件中重复行不是连续的，uniq是不起作用的，所以要结合sort使用\n\n```bash\n# 统计文件中不重复的行\nsort test.txt | uniq\n# 统计各行在文件中出现的次数\nsort testfile1 | uniq -c\n# 在文件中找出重复的行\nsort testfile1 | uniq -d\n```\n\n#### xargs\n\nxargs 用作替换工具，读取输入数据重新格式化后输出。\n\n```bash\n# 多行转换为单行输出# \ncat test.txt | xargs\ncat test.txt | xargs\n# 每行三个数据进行展示\ncat test.txt | xargs -n3\n```\n\n\n\n## 磁盘管理\n\n### 常见命令\n\n```\ndf\t\tdu\t\tcd\t\tmkdir\t\tls\nrmdir\tpwd\n```\n\n### 具体案例\n\n####  **du 和 df 的定义，以及区别？**\n\n **答案：** \n\n du 显示目录或文件的大小 \n\n df 显示每个<文件>所在的文件系统的信息，默认是显示所有文件系统。\n （文件系统分配其中的一些磁盘块用来记录它自身的一些数据，如 i 节点，磁盘分布图，间接块，超级块等。这些数据对大多数用户级的程序来说是不可见的，通常称为 Meta Data。） du 命令是用户级的程序，它不考虑 Meta Data，而 df 命令则查看文件系统的磁盘分配图并考虑 Meta Data。\n df 命令获得真正的文件系统数据，而 du 命令只查看文件系统的部分情况。 \n\n```\ndf -h查看当前目录\ndf -h /usr/  查看指定目录\ndu --max-depth=1 -h 查看当前目录每个文件夹的情况\ndu --max-depth=1 -h  /usr/ 指定目录\ndu -sh /usr/ 计算文件夹大小\n```\n\n#### 创建多级目录\n\nmkdir -p\n\n## 网络管理\n\n### 常见命令\n\n```\nnc\t\t\tifconfig\t\tnetstat\n```\n\n### 具体案例\n\n#### netstat命令参数\n\n列出所有端口 netstat -a\n列出所有 tcp 端口 netstat -at\n列出所有 udp 端口 netstat -au\n\n## 系统管理\n\n### 常见命令\n\n```\ndate\t\tkill\t\tps\t\t\ttop\t\t\tpstree\ntree\t\tshutdown\tuname\t\twho\t\t\tfree\ncrontab\t\tyum\t\t\tjob\t\t\thistory\n```\n\n### 具体案例\n\n#### 查看linux系统版本和内核版本\n\n**查看内核版本**\n\ncat /proc/version\n\nuname -a\n\n**查看Linux系统版本的命令**\n\nlsb_release -a\t\t\t\t\t  有的版本支持\n\ncat /etc/redhat-release \t适合redhat系的linux，如centos\n\ncat /etc/issue\t\t\t\t\t  适合所有版本\n\n#### ps aux命令中常见状态\n\n![image-20221119164738929](C:\\Users\\Administrator\\blog\\newblog\\source\\picture\\image-20221119164738929.png)\n\n#### free命令\n\n​\t用于显示内存状态。\n\n​\t会显示内存的使用情况，包括实体内存，虚拟的交换文件内存，共享内存区段，以及系统核心使用的缓冲区等。\n\n#### top命令\n\n top命令用于实时显示 process 的动态。\n\n[Linux top命令详解：持续监听进程运行状态 (biancheng.net)](http://c.biancheng.net/view/1065.html)\n\ntop -b -n 1 > /root/top.log\t\t\\#让top命令只执行一次，然后把执行结果保存到top.log文件中，这样就能看到所有的进程了\n\n- -b：使用批处理模式输出。一般和\"-n\"选项合用，用于把 top 命令重定向到文件中；\n- -n 次数：指定 top 命令执行的次数。一般和\"-\"选项合用；\n- -p 进程PID：仅查看指定 ID 的进程；\n\ntop命令可以按shift+f设置排序规则和展示内容\n\n#### 查看某个进程下线程信息\n\ntop -H -p <PID>\n\nps -T -p <PID>\n\n另外pstree -p <PID>可以查看这些进程的父子关系\n\n#### ps -ef和ps aux的区别\n\nps -ef包含进程和父进程\n\nps aux包含内存CPU的占用情况\n\n#### 查看后台任务?\n\njob -l\n","source":"_posts/linux常用命令.md","raw":"---\ntitle: linux常用命令\ndate: 2022-12-02 11:32:31\nauthor: 三岁浪迹天涯\ncategories: linux\ntags:\n  - linux\n  - 基础\n---\n\n## 文件操作\n\n### 常见命令\n\n```\ncat\t\t\tchmod\t\tdiff\t\tcut\t\t\tmv\ntee\t\t\tcp\t\t\twhich\t\twhereis\t\tawk\nscp\t\t\tsed\t\t\ttr\t\t\tsort\t\thead\ntail\t\tless\t\tmore\t\tunzip\t\ttar\nvi\t\t\twc\t\t\tln\t\t\tuniq\t\tnl\nxargs\n```\n\n### 具体案例\n\n#### 复制文件夹\n\ncp -r 文件夹\n\n#### 统计文件有多少行\n\n```bash\nwc testfile           # testfile文件的统计信息  \n3 92 598 testfile       # testfile文件的行数为3、单词数92、字节数598\n```\n\n- -c或--bytes或--chars 只显示Bytes数。\n- -l或--lines 显示行数。\n- -w或--words 只显示字数。\n\n####  **建立软链接(快捷方式)，以及硬链接的命令。**\n\n 软链接： ln -s slink source\n 硬链接： ln link source \n\n#### which、whereis、find、locate的区别\n\n#### sort命令\n\n- -n 依照数值的大小排序。\n- -r 以相反的顺序来排序\n- [-k field1[,field2]] 按指定的列进行排序。\n\n#### uniq命令用法\n\n用于检查及删除文本文件中重复出现的行列，一般与 sort 命令结合使用\n\n- -c或--count 在每列旁边显示该行重复出现的次数。\n- -d或--repeated 仅显示重复出现的行列。\n\n当文件中重复行不是连续的，uniq是不起作用的，所以要结合sort使用\n\n```bash\n# 统计文件中不重复的行\nsort test.txt | uniq\n# 统计各行在文件中出现的次数\nsort testfile1 | uniq -c\n# 在文件中找出重复的行\nsort testfile1 | uniq -d\n```\n\n#### xargs\n\nxargs 用作替换工具，读取输入数据重新格式化后输出。\n\n```bash\n# 多行转换为单行输出# \ncat test.txt | xargs\ncat test.txt | xargs\n# 每行三个数据进行展示\ncat test.txt | xargs -n3\n```\n\n\n\n## 磁盘管理\n\n### 常见命令\n\n```\ndf\t\tdu\t\tcd\t\tmkdir\t\tls\nrmdir\tpwd\n```\n\n### 具体案例\n\n####  **du 和 df 的定义，以及区别？**\n\n **答案：** \n\n du 显示目录或文件的大小 \n\n df 显示每个<文件>所在的文件系统的信息，默认是显示所有文件系统。\n （文件系统分配其中的一些磁盘块用来记录它自身的一些数据，如 i 节点，磁盘分布图，间接块，超级块等。这些数据对大多数用户级的程序来说是不可见的，通常称为 Meta Data。） du 命令是用户级的程序，它不考虑 Meta Data，而 df 命令则查看文件系统的磁盘分配图并考虑 Meta Data。\n df 命令获得真正的文件系统数据，而 du 命令只查看文件系统的部分情况。 \n\n```\ndf -h查看当前目录\ndf -h /usr/  查看指定目录\ndu --max-depth=1 -h 查看当前目录每个文件夹的情况\ndu --max-depth=1 -h  /usr/ 指定目录\ndu -sh /usr/ 计算文件夹大小\n```\n\n#### 创建多级目录\n\nmkdir -p\n\n## 网络管理\n\n### 常见命令\n\n```\nnc\t\t\tifconfig\t\tnetstat\n```\n\n### 具体案例\n\n#### netstat命令参数\n\n列出所有端口 netstat -a\n列出所有 tcp 端口 netstat -at\n列出所有 udp 端口 netstat -au\n\n## 系统管理\n\n### 常见命令\n\n```\ndate\t\tkill\t\tps\t\t\ttop\t\t\tpstree\ntree\t\tshutdown\tuname\t\twho\t\t\tfree\ncrontab\t\tyum\t\t\tjob\t\t\thistory\n```\n\n### 具体案例\n\n#### 查看linux系统版本和内核版本\n\n**查看内核版本**\n\ncat /proc/version\n\nuname -a\n\n**查看Linux系统版本的命令**\n\nlsb_release -a\t\t\t\t\t  有的版本支持\n\ncat /etc/redhat-release \t适合redhat系的linux，如centos\n\ncat /etc/issue\t\t\t\t\t  适合所有版本\n\n#### ps aux命令中常见状态\n\n![image-20221119164738929](C:\\Users\\Administrator\\blog\\newblog\\source\\picture\\image-20221119164738929.png)\n\n#### free命令\n\n​\t用于显示内存状态。\n\n​\t会显示内存的使用情况，包括实体内存，虚拟的交换文件内存，共享内存区段，以及系统核心使用的缓冲区等。\n\n#### top命令\n\n top命令用于实时显示 process 的动态。\n\n[Linux top命令详解：持续监听进程运行状态 (biancheng.net)](http://c.biancheng.net/view/1065.html)\n\ntop -b -n 1 > /root/top.log\t\t\\#让top命令只执行一次，然后把执行结果保存到top.log文件中，这样就能看到所有的进程了\n\n- -b：使用批处理模式输出。一般和\"-n\"选项合用，用于把 top 命令重定向到文件中；\n- -n 次数：指定 top 命令执行的次数。一般和\"-\"选项合用；\n- -p 进程PID：仅查看指定 ID 的进程；\n\ntop命令可以按shift+f设置排序规则和展示内容\n\n#### 查看某个进程下线程信息\n\ntop -H -p <PID>\n\nps -T -p <PID>\n\n另外pstree -p <PID>可以查看这些进程的父子关系\n\n#### ps -ef和ps aux的区别\n\nps -ef包含进程和父进程\n\nps aux包含内存CPU的占用情况\n\n#### 查看后台任务?\n\njob -l\n","slug":"linux常用命令","published":1,"updated":"2022-12-05T11:20:27.648Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld1tm1j0000fbsw7fhetcwof","content":"<h2 id=\"文件操作\"><a href=\"#文件操作\" class=\"headerlink\" title=\"文件操作\"></a>文件操作</h2><h3 id=\"常见命令\"><a href=\"#常见命令\" class=\"headerlink\" title=\"常见命令\"></a>常见命令</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">cat\t\t\tchmod\t\tdiff\t\tcut\t\t\tmv\ntee\t\t\tcp\t\t\twhich\t\twhereis\t\tawk\nscp\t\t\tsed\t\t\ttr\t\t\tsort\t\thead\ntail\t\tless\t\tmore\t\tunzip\t\ttar\nvi\t\t\twc\t\t\tln\t\t\tuniq\t\tnl\nxargs<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"具体案例\"><a href=\"#具体案例\" class=\"headerlink\" title=\"具体案例\"></a>具体案例</h3><h4 id=\"复制文件夹\"><a href=\"#复制文件夹\" class=\"headerlink\" title=\"复制文件夹\"></a>复制文件夹</h4><p>cp -r 文件夹</p>\n<h4 id=\"统计文件有多少行\"><a href=\"#统计文件有多少行\" class=\"headerlink\" title=\"统计文件有多少行\"></a>统计文件有多少行</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wc</span> testfile           <span class=\"token comment\"># testfile文件的统计信息  </span>\n<span class=\"token number\">3</span> <span class=\"token number\">92</span> <span class=\"token number\">598</span> testfile       <span class=\"token comment\"># testfile文件的行数为3、单词数92、字节数598</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li>-c或–bytes或–chars 只显示Bytes数。</li>\n<li>-l或–lines 显示行数。</li>\n<li>-w或–words 只显示字数。</li>\n</ul>\n<h4 id=\"建立软链接-快捷方式-，以及硬链接的命令。\"><a href=\"#建立软链接-快捷方式-，以及硬链接的命令。\" class=\"headerlink\" title=\"建立软链接(快捷方式)，以及硬链接的命令。\"></a><strong>建立软链接(快捷方式)，以及硬链接的命令。</strong></h4><p> 软链接： ln -s slink source<br> 硬链接： ln link source </p>\n<h4 id=\"which、whereis、find、locate的区别\"><a href=\"#which、whereis、find、locate的区别\" class=\"headerlink\" title=\"which、whereis、find、locate的区别\"></a>which、whereis、find、locate的区别</h4><h4 id=\"sort命令\"><a href=\"#sort命令\" class=\"headerlink\" title=\"sort命令\"></a>sort命令</h4><ul>\n<li>-n 依照数值的大小排序。</li>\n<li>-r 以相反的顺序来排序</li>\n<li>[-k field1[,field2]] 按指定的列进行排序。</li>\n</ul>\n<h4 id=\"uniq命令用法\"><a href=\"#uniq命令用法\" class=\"headerlink\" title=\"uniq命令用法\"></a>uniq命令用法</h4><p>用于检查及删除文本文件中重复出现的行列，一般与 sort 命令结合使用</p>\n<ul>\n<li>-c或–count 在每列旁边显示该行重复出现的次数。</li>\n<li>-d或–repeated 仅显示重复出现的行列。</li>\n</ul>\n<p>当文件中重复行不是连续的，uniq是不起作用的，所以要结合sort使用</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 统计文件中不重复的行</span>\n<span class=\"token function\">sort</span> test.txt <span class=\"token operator\">|</span> <span class=\"token function\">uniq</span>\n<span class=\"token comment\"># 统计各行在文件中出现的次数</span>\n<span class=\"token function\">sort</span> testfile1 <span class=\"token operator\">|</span> <span class=\"token function\">uniq</span> -c\n<span class=\"token comment\"># 在文件中找出重复的行</span>\n<span class=\"token function\">sort</span> testfile1 <span class=\"token operator\">|</span> <span class=\"token function\">uniq</span> -d<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"xargs\"><a href=\"#xargs\" class=\"headerlink\" title=\"xargs\"></a>xargs</h4><p>xargs 用作替换工具，读取输入数据重新格式化后输出。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 多行转换为单行输出# </span>\n<span class=\"token function\">cat</span> test.txt <span class=\"token operator\">|</span> <span class=\"token function\">xargs</span>\n<span class=\"token function\">cat</span> test.txt <span class=\"token operator\">|</span> <span class=\"token function\">xargs</span>\n<span class=\"token comment\"># 每行三个数据进行展示</span>\n<span class=\"token function\">cat</span> test.txt <span class=\"token operator\">|</span> <span class=\"token function\">xargs</span> -n3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"磁盘管理\"><a href=\"#磁盘管理\" class=\"headerlink\" title=\"磁盘管理\"></a>磁盘管理</h2><h3 id=\"常见命令-1\"><a href=\"#常见命令-1\" class=\"headerlink\" title=\"常见命令\"></a>常见命令</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">df\t\tdu\t\tcd\t\tmkdir\t\tls\nrmdir\tpwd<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"具体案例-1\"><a href=\"#具体案例-1\" class=\"headerlink\" title=\"具体案例\"></a>具体案例</h3><h4 id=\"du-和-df-的定义，以及区别？\"><a href=\"#du-和-df-的定义，以及区别？\" class=\"headerlink\" title=\"du 和 df 的定义，以及区别？\"></a><strong>du 和 df 的定义，以及区别？</strong></h4><p> <strong>答案：</strong> </p>\n<p> du 显示目录或文件的大小 </p>\n<p> df 显示每个&lt;文件&gt;所在的文件系统的信息，默认是显示所有文件系统。<br> （文件系统分配其中的一些磁盘块用来记录它自身的一些数据，如 i 节点，磁盘分布图，间接块，超级块等。这些数据对大多数用户级的程序来说是不可见的，通常称为 Meta Data。） du 命令是用户级的程序，它不考虑 Meta Data，而 df 命令则查看文件系统的磁盘分配图并考虑 Meta Data。<br> df 命令获得真正的文件系统数据，而 du 命令只查看文件系统的部分情况。 </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">df -h查看当前目录\ndf -h &#x2F;usr&#x2F;  查看指定目录\ndu --max-depth&#x3D;1 -h 查看当前目录每个文件夹的情况\ndu --max-depth&#x3D;1 -h  &#x2F;usr&#x2F; 指定目录\ndu -sh &#x2F;usr&#x2F; 计算文件夹大小<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"创建多级目录\"><a href=\"#创建多级目录\" class=\"headerlink\" title=\"创建多级目录\"></a>创建多级目录</h4><p>mkdir -p</p>\n<h2 id=\"网络管理\"><a href=\"#网络管理\" class=\"headerlink\" title=\"网络管理\"></a>网络管理</h2><h3 id=\"常见命令-2\"><a href=\"#常见命令-2\" class=\"headerlink\" title=\"常见命令\"></a>常见命令</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">nc\t\t\tifconfig\t\tnetstat<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"具体案例-2\"><a href=\"#具体案例-2\" class=\"headerlink\" title=\"具体案例\"></a>具体案例</h3><h4 id=\"netstat命令参数\"><a href=\"#netstat命令参数\" class=\"headerlink\" title=\"netstat命令参数\"></a>netstat命令参数</h4><p>列出所有端口 netstat -a<br>列出所有 tcp 端口 netstat -at<br>列出所有 udp 端口 netstat -au</p>\n<h2 id=\"系统管理\"><a href=\"#系统管理\" class=\"headerlink\" title=\"系统管理\"></a>系统管理</h2><h3 id=\"常见命令-3\"><a href=\"#常见命令-3\" class=\"headerlink\" title=\"常见命令\"></a>常见命令</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">date\t\tkill\t\tps\t\t\ttop\t\t\tpstree\ntree\t\tshutdown\tuname\t\twho\t\t\tfree\ncrontab\t\tyum\t\t\tjob\t\t\thistory<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"具体案例-3\"><a href=\"#具体案例-3\" class=\"headerlink\" title=\"具体案例\"></a>具体案例</h3><h4 id=\"查看linux系统版本和内核版本\"><a href=\"#查看linux系统版本和内核版本\" class=\"headerlink\" title=\"查看linux系统版本和内核版本\"></a>查看linux系统版本和内核版本</h4><p><strong>查看内核版本</strong></p>\n<p>cat &#x2F;proc&#x2F;version</p>\n<p>uname -a</p>\n<p><strong>查看Linux系统版本的命令</strong></p>\n<p>lsb_release -a\t\t\t\t\t  有的版本支持</p>\n<p>cat &#x2F;etc&#x2F;redhat-release \t适合redhat系的linux，如centos</p>\n<p>cat &#x2F;etc&#x2F;issue\t\t\t\t\t  适合所有版本</p>\n<h4 id=\"ps-aux命令中常见状态\"><a href=\"#ps-aux命令中常见状态\" class=\"headerlink\" title=\"ps aux命令中常见状态\"></a>ps aux命令中常见状态</h4><p><img src=\"C:\\Users\\Administrator\\blog\\newblog\\source\\picture\\image-20221119164738929.png\" alt=\"image-20221119164738929\"></p>\n<h4 id=\"free命令\"><a href=\"#free命令\" class=\"headerlink\" title=\"free命令\"></a>free命令</h4><p>​\t用于显示内存状态。</p>\n<p>​\t会显示内存的使用情况，包括实体内存，虚拟的交换文件内存，共享内存区段，以及系统核心使用的缓冲区等。</p>\n<h4 id=\"top命令\"><a href=\"#top命令\" class=\"headerlink\" title=\"top命令\"></a>top命令</h4><p> top命令用于实时显示 process 的动态。</p>\n<p><a href=\"http://c.biancheng.net/view/1065.html\">Linux top命令详解：持续监听进程运行状态 (biancheng.net)</a></p>\n<p>top -b -n 1 &gt; &#x2F;root&#x2F;top.log\t\t#让top命令只执行一次，然后把执行结果保存到top.log文件中，这样就能看到所有的进程了</p>\n<ul>\n<li>-b：使用批处理模式输出。一般和”-n”选项合用，用于把 top 命令重定向到文件中；</li>\n<li>-n 次数：指定 top 命令执行的次数。一般和”-“选项合用；</li>\n<li>-p 进程PID：仅查看指定 ID 的进程；</li>\n</ul>\n<p>top命令可以按shift+f设置排序规则和展示内容</p>\n<h4 id=\"查看某个进程下线程信息\"><a href=\"#查看某个进程下线程信息\" class=\"headerlink\" title=\"查看某个进程下线程信息\"></a>查看某个进程下线程信息</h4><p>top -H -p <PID></p>\n<p>ps -T -p <PID></p>\n<p>另外pstree -p <PID>可以查看这些进程的父子关系</p>\n<h4 id=\"ps-ef和ps-aux的区别\"><a href=\"#ps-ef和ps-aux的区别\" class=\"headerlink\" title=\"ps -ef和ps aux的区别\"></a>ps -ef和ps aux的区别</h4><p>ps -ef包含进程和父进程</p>\n<p>ps aux包含内存CPU的占用情况</p>\n<h4 id=\"查看后台任务\"><a href=\"#查看后台任务\" class=\"headerlink\" title=\"查看后台任务?\"></a>查看后台任务?</h4><p>job -l</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"文件操作\"><a href=\"#文件操作\" class=\"headerlink\" title=\"文件操作\"></a>文件操作</h2><h3 id=\"常见命令\"><a href=\"#常见命令\" class=\"headerlink\" title=\"常见命令\"></a>常见命令</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">cat\t\t\tchmod\t\tdiff\t\tcut\t\t\tmv\ntee\t\t\tcp\t\t\twhich\t\twhereis\t\tawk\nscp\t\t\tsed\t\t\ttr\t\t\tsort\t\thead\ntail\t\tless\t\tmore\t\tunzip\t\ttar\nvi\t\t\twc\t\t\tln\t\t\tuniq\t\tnl\nxargs<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"具体案例\"><a href=\"#具体案例\" class=\"headerlink\" title=\"具体案例\"></a>具体案例</h3><h4 id=\"复制文件夹\"><a href=\"#复制文件夹\" class=\"headerlink\" title=\"复制文件夹\"></a>复制文件夹</h4><p>cp -r 文件夹</p>\n<h4 id=\"统计文件有多少行\"><a href=\"#统计文件有多少行\" class=\"headerlink\" title=\"统计文件有多少行\"></a>统计文件有多少行</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wc</span> testfile           <span class=\"token comment\"># testfile文件的统计信息  </span>\n<span class=\"token number\">3</span> <span class=\"token number\">92</span> <span class=\"token number\">598</span> testfile       <span class=\"token comment\"># testfile文件的行数为3、单词数92、字节数598</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li>-c或–bytes或–chars 只显示Bytes数。</li>\n<li>-l或–lines 显示行数。</li>\n<li>-w或–words 只显示字数。</li>\n</ul>\n<h4 id=\"建立软链接-快捷方式-，以及硬链接的命令。\"><a href=\"#建立软链接-快捷方式-，以及硬链接的命令。\" class=\"headerlink\" title=\"建立软链接(快捷方式)，以及硬链接的命令。\"></a><strong>建立软链接(快捷方式)，以及硬链接的命令。</strong></h4><p> 软链接： ln -s slink source<br> 硬链接： ln link source </p>\n<h4 id=\"which、whereis、find、locate的区别\"><a href=\"#which、whereis、find、locate的区别\" class=\"headerlink\" title=\"which、whereis、find、locate的区别\"></a>which、whereis、find、locate的区别</h4><h4 id=\"sort命令\"><a href=\"#sort命令\" class=\"headerlink\" title=\"sort命令\"></a>sort命令</h4><ul>\n<li>-n 依照数值的大小排序。</li>\n<li>-r 以相反的顺序来排序</li>\n<li>[-k field1[,field2]] 按指定的列进行排序。</li>\n</ul>\n<h4 id=\"uniq命令用法\"><a href=\"#uniq命令用法\" class=\"headerlink\" title=\"uniq命令用法\"></a>uniq命令用法</h4><p>用于检查及删除文本文件中重复出现的行列，一般与 sort 命令结合使用</p>\n<ul>\n<li>-c或–count 在每列旁边显示该行重复出现的次数。</li>\n<li>-d或–repeated 仅显示重复出现的行列。</li>\n</ul>\n<p>当文件中重复行不是连续的，uniq是不起作用的，所以要结合sort使用</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 统计文件中不重复的行</span>\n<span class=\"token function\">sort</span> test.txt <span class=\"token operator\">|</span> <span class=\"token function\">uniq</span>\n<span class=\"token comment\"># 统计各行在文件中出现的次数</span>\n<span class=\"token function\">sort</span> testfile1 <span class=\"token operator\">|</span> <span class=\"token function\">uniq</span> -c\n<span class=\"token comment\"># 在文件中找出重复的行</span>\n<span class=\"token function\">sort</span> testfile1 <span class=\"token operator\">|</span> <span class=\"token function\">uniq</span> -d<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"xargs\"><a href=\"#xargs\" class=\"headerlink\" title=\"xargs\"></a>xargs</h4><p>xargs 用作替换工具，读取输入数据重新格式化后输出。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 多行转换为单行输出# </span>\n<span class=\"token function\">cat</span> test.txt <span class=\"token operator\">|</span> <span class=\"token function\">xargs</span>\n<span class=\"token function\">cat</span> test.txt <span class=\"token operator\">|</span> <span class=\"token function\">xargs</span>\n<span class=\"token comment\"># 每行三个数据进行展示</span>\n<span class=\"token function\">cat</span> test.txt <span class=\"token operator\">|</span> <span class=\"token function\">xargs</span> -n3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"磁盘管理\"><a href=\"#磁盘管理\" class=\"headerlink\" title=\"磁盘管理\"></a>磁盘管理</h2><h3 id=\"常见命令-1\"><a href=\"#常见命令-1\" class=\"headerlink\" title=\"常见命令\"></a>常见命令</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">df\t\tdu\t\tcd\t\tmkdir\t\tls\nrmdir\tpwd<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"具体案例-1\"><a href=\"#具体案例-1\" class=\"headerlink\" title=\"具体案例\"></a>具体案例</h3><h4 id=\"du-和-df-的定义，以及区别？\"><a href=\"#du-和-df-的定义，以及区别？\" class=\"headerlink\" title=\"du 和 df 的定义，以及区别？\"></a><strong>du 和 df 的定义，以及区别？</strong></h4><p> <strong>答案：</strong> </p>\n<p> du 显示目录或文件的大小 </p>\n<p> df 显示每个&lt;文件&gt;所在的文件系统的信息，默认是显示所有文件系统。<br> （文件系统分配其中的一些磁盘块用来记录它自身的一些数据，如 i 节点，磁盘分布图，间接块，超级块等。这些数据对大多数用户级的程序来说是不可见的，通常称为 Meta Data。） du 命令是用户级的程序，它不考虑 Meta Data，而 df 命令则查看文件系统的磁盘分配图并考虑 Meta Data。<br> df 命令获得真正的文件系统数据，而 du 命令只查看文件系统的部分情况。 </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">df -h查看当前目录\ndf -h &#x2F;usr&#x2F;  查看指定目录\ndu --max-depth&#x3D;1 -h 查看当前目录每个文件夹的情况\ndu --max-depth&#x3D;1 -h  &#x2F;usr&#x2F; 指定目录\ndu -sh &#x2F;usr&#x2F; 计算文件夹大小<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"创建多级目录\"><a href=\"#创建多级目录\" class=\"headerlink\" title=\"创建多级目录\"></a>创建多级目录</h4><p>mkdir -p</p>\n<h2 id=\"网络管理\"><a href=\"#网络管理\" class=\"headerlink\" title=\"网络管理\"></a>网络管理</h2><h3 id=\"常见命令-2\"><a href=\"#常见命令-2\" class=\"headerlink\" title=\"常见命令\"></a>常见命令</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">nc\t\t\tifconfig\t\tnetstat<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"具体案例-2\"><a href=\"#具体案例-2\" class=\"headerlink\" title=\"具体案例\"></a>具体案例</h3><h4 id=\"netstat命令参数\"><a href=\"#netstat命令参数\" class=\"headerlink\" title=\"netstat命令参数\"></a>netstat命令参数</h4><p>列出所有端口 netstat -a<br>列出所有 tcp 端口 netstat -at<br>列出所有 udp 端口 netstat -au</p>\n<h2 id=\"系统管理\"><a href=\"#系统管理\" class=\"headerlink\" title=\"系统管理\"></a>系统管理</h2><h3 id=\"常见命令-3\"><a href=\"#常见命令-3\" class=\"headerlink\" title=\"常见命令\"></a>常见命令</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">date\t\tkill\t\tps\t\t\ttop\t\t\tpstree\ntree\t\tshutdown\tuname\t\twho\t\t\tfree\ncrontab\t\tyum\t\t\tjob\t\t\thistory<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"具体案例-3\"><a href=\"#具体案例-3\" class=\"headerlink\" title=\"具体案例\"></a>具体案例</h3><h4 id=\"查看linux系统版本和内核版本\"><a href=\"#查看linux系统版本和内核版本\" class=\"headerlink\" title=\"查看linux系统版本和内核版本\"></a>查看linux系统版本和内核版本</h4><p><strong>查看内核版本</strong></p>\n<p>cat &#x2F;proc&#x2F;version</p>\n<p>uname -a</p>\n<p><strong>查看Linux系统版本的命令</strong></p>\n<p>lsb_release -a\t\t\t\t\t  有的版本支持</p>\n<p>cat &#x2F;etc&#x2F;redhat-release \t适合redhat系的linux，如centos</p>\n<p>cat &#x2F;etc&#x2F;issue\t\t\t\t\t  适合所有版本</p>\n<h4 id=\"ps-aux命令中常见状态\"><a href=\"#ps-aux命令中常见状态\" class=\"headerlink\" title=\"ps aux命令中常见状态\"></a>ps aux命令中常见状态</h4><p><img src=\"C:\\Users\\Administrator\\blog\\newblog\\source\\picture\\image-20221119164738929.png\" alt=\"image-20221119164738929\"></p>\n<h4 id=\"free命令\"><a href=\"#free命令\" class=\"headerlink\" title=\"free命令\"></a>free命令</h4><p>​\t用于显示内存状态。</p>\n<p>​\t会显示内存的使用情况，包括实体内存，虚拟的交换文件内存，共享内存区段，以及系统核心使用的缓冲区等。</p>\n<h4 id=\"top命令\"><a href=\"#top命令\" class=\"headerlink\" title=\"top命令\"></a>top命令</h4><p> top命令用于实时显示 process 的动态。</p>\n<p><a href=\"http://c.biancheng.net/view/1065.html\">Linux top命令详解：持续监听进程运行状态 (biancheng.net)</a></p>\n<p>top -b -n 1 &gt; &#x2F;root&#x2F;top.log\t\t#让top命令只执行一次，然后把执行结果保存到top.log文件中，这样就能看到所有的进程了</p>\n<ul>\n<li>-b：使用批处理模式输出。一般和”-n”选项合用，用于把 top 命令重定向到文件中；</li>\n<li>-n 次数：指定 top 命令执行的次数。一般和”-“选项合用；</li>\n<li>-p 进程PID：仅查看指定 ID 的进程；</li>\n</ul>\n<p>top命令可以按shift+f设置排序规则和展示内容</p>\n<h4 id=\"查看某个进程下线程信息\"><a href=\"#查看某个进程下线程信息\" class=\"headerlink\" title=\"查看某个进程下线程信息\"></a>查看某个进程下线程信息</h4><p>top -H -p <PID></p>\n<p>ps -T -p <PID></p>\n<p>另外pstree -p <PID>可以查看这些进程的父子关系</p>\n<h4 id=\"ps-ef和ps-aux的区别\"><a href=\"#ps-ef和ps-aux的区别\" class=\"headerlink\" title=\"ps -ef和ps aux的区别\"></a>ps -ef和ps aux的区别</h4><p>ps -ef包含进程和父进程</p>\n<p>ps aux包含内存CPU的占用情况</p>\n<h4 id=\"查看后台任务\"><a href=\"#查看后台任务\" class=\"headerlink\" title=\"查看后台任务?\"></a>查看后台任务?</h4><p>job -l</p>\n"},{"title":"map函数的使用","date":"2022-03-04T12:42:13.000Z","_content":"\n**map()** 会根据提供的函数对指定序列做映射。\n\nmap() 函数语法：\n\n```python\nmap(function, iterable, ...)\n```\n\npython2.x版本中，返回的是列表\n\n```python\nmap(square, [1,2,3,4,5])\n```\n\npython3.x版本中，返回的是迭代器\n\n```python\nmap(square, [1,2,3,4,5])\n<map object at 0x100d3d550> \nlist(map(square, [1,2,3,4,5]))\n[1, 4, 9, 16, 25]\n```\n\n\n\n","source":"_posts/map函数的使用.md","raw":"---\ntitle: map函数的使用\ndate: 2022-03-04 20:42:13\ntags: python基础\n---\n\n**map()** 会根据提供的函数对指定序列做映射。\n\nmap() 函数语法：\n\n```python\nmap(function, iterable, ...)\n```\n\npython2.x版本中，返回的是列表\n\n```python\nmap(square, [1,2,3,4,5])\n```\n\npython3.x版本中，返回的是迭代器\n\n```python\nmap(square, [1,2,3,4,5])\n<map object at 0x100d3d550> \nlist(map(square, [1,2,3,4,5]))\n[1, 4, 9, 16, 25]\n```\n\n\n\n","slug":"map函数的使用","published":1,"updated":"2022-03-04T12:47:10.617Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld1tm1j1000hbsw78lawf4gj","content":"<p><strong>map()</strong> 会根据提供的函数对指定序列做映射。</p>\n<p>map() 函数语法：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>function<span class=\"token punctuation\">,</span> iterable<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>python2.x版本中，返回的是列表</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>square<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>python3.x版本中，返回的是迭代器</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>square<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span><span class=\"token builtin\">map</span> <span class=\"token builtin\">object</span> at <span class=\"token number\">0x100d3d550</span><span class=\"token operator\">></span> \n<span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>square<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p><strong>map()</strong> 会根据提供的函数对指定序列做映射。</p>\n<p>map() 函数语法：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>function<span class=\"token punctuation\">,</span> iterable<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>python2.x版本中，返回的是列表</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>square<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>python3.x版本中，返回的是迭代器</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>square<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span><span class=\"token builtin\">map</span> <span class=\"token builtin\">object</span> at <span class=\"token number\">0x100d3d550</span><span class=\"token operator\">></span> \n<span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>square<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n"},{"title":"requests源码学习","date":"2022-04-25T01:53:39.000Z","author":"小章","summary":"关于requests中各模块源码的学习","_content":"\n# __init__模块\t\n\ninit总体结构只包含check_compatibility和_check_ctyptography两个函数，对版本信息进行校验\n\n收获：\n\n在函数内部多次assert，如果没有完全通过，则会抛出AssertError\n\n对版本信息验证是否在2.0.0~3.0.0之间，可以使用 assert (2,0,0) <= (major, minor, patch) < (3,0,0) 或者assert [2,0,0] <= (major, minor, patch) < [3,0,0]，归因于python列表(元组)比较大小\n\n导包过程中 from . import utils中的.表示当前位置\n\n# compat、_internal_utils模块\n\n负责python2、python3以及简单的编码处理\n\n# certs模块\n\nCA证书相关\n\n# exceptions模块\n\n异常处理模块，应用到了super、hasattr、多继承等，还有字典的pop方法，pop方法可以加一个默认返回值kwargs.pop('response', None)，具体工作原理还需要结合调用时学习\n\ncookies模块\n\nhooks模块\n\npackages模块\t\n\n# status_codes模块\n\n该模块中有所有的状态信息，但是内部直接通过_init()执行，似乎没有被调用类或变量，还需要models等模块中结合学习\n\n# auth模块\n\n身份认证相关，在models、adapter、sessions等模块中调用了，学习这几个模块再返回学习\n\n# API模块\n\napi模块中，包含request、get、option、post等函数，而get等通过调用request实现函数功能，而request调用的是session.request函数，同时使用with sessions.Session() as session:对session进行上下文管理，确保会话及时关闭，避免出现类似内存泄漏的情况\n\n# structures模块\n\n新建了两种数据结构，CaseInsensitiveDict和LookupDict，其中CaseInsensitiveDict继承于MutableMapping，实现了__setitem__,__getitem__,__delitem__,__iter__,__len__等方法，解决大小写问题，在self._store中存储的键值形式为 \"lower_key\" : (\"real_key\",\"value\")，查询时用小写查询，同时能保留原信息，具体实现方法很值得学习\n\n# session模块\n\n1. 为什么通过requests.Session能访问sessions模块中的Session类，因为在requests库的__init__文件中导入了Session\n\n   实现了跨请求保持cookies方法，具体实现方法还没有看懂，核心在于request方法，首先通过models模块中生成Request类，再执行相应的prepare_request方法，最后执行send方法实现功能，常规通过requests.get方法不能保持cookies可能是因为在get方法中调用的是及时关闭session的请求方法\n\n   session和api中都有request、get等方法，api中的本质上仍然调用的是session的方法\n\nSession类有一个mount方法，def mount(self, prefix, adapter):\t是将对应的adapter注册到对应的会话前缀上，使用场景比如为所有请求设置一个超时时间\n\n```python\nfrom requests.adapters import HTTPAdapter\nDEFAULT_TIMEOUT = 5 # seconds\n\nclass TimeoutHTTPAdapter(HTTPAdapter):\n    def __init__(self, *args, **kwargs):\n        self.timeout = DEFAULT_TIMEOUT\n        if \"timeout\" in kwargs:\n            self.timeout = kwargs[\"timeout\"]\n            del kwargs[\"timeout\"]\n        super().__init__(*args, **kwargs)\n\n    def send(self, request, **kwargs):\n        timeout = kwargs.get(\"timeout\")\n        if timeout is None:\n            kwargs[\"timeout\"] = self.timeout\n        return super().send(request, **kwargs)\n```\n\n使用时\n\n```python\nimport requests\n\nhttp = requests.Session()\n\n# 此挂载对http和https都有效\nadapter = TimeoutHTTPAdapter(timeout=2.5)\nhttp.mount(\"https://\", adapter)\nhttp.mount(\"http://\", adapter)\n\n# 设置默认超时为2.5秒\nresponse = http.get(\"https://api.twilio.com/\")\n\n# 通常为特定的请求重写超时时间\nresponse = http.get(\"https://api.twilio.com/\", timeout=10)\n```\n\n\n\n# models模块\n\n models模块中首先创建了RequestEncodingMixin、RequestHooksMixin基类，类中只有相关方法，供后续子类调用，其中RequestHooksMixin类中使用了self.hooks属性，hooks属性由其子类创建，因此此处使用了Mixin模式，并且父类调用了子类的属性。\n\n```python\nclass RequestHooksMixin(object):\n    def register_hook(self, event, hook):\n        \"\"\"Properly register a hook.\"\"\"\n\n        if event not in self.hooks:\n            raise ValueError('Unsupported event specified, with event name \"%s\"' % (event))\n\n        if isinstance(hook, Callable):\n            self.hooks[event].append(hook)\n```\n\n此外用到了Callable，这是一种可调用执行对象，并且可以执行参数，也就是在对象后面使用小括号执行代码，那么这个对象就是Callable对象，callable包含函数、类、类里的方法、实现了__callable__方法的实例对象\n\n```python3\nclass Stu(object):\n    def __init__(self, name):\n        self.name = name\n\n    def __call__(self, *args, **kwargs):\n        self.run()\n\n    def run(self):\n        print('{name} is running'.format(name=self.name))\n\nstu = Stu('小明')\nprint(callable(stu))    # True\nstu() \n```\n\n这个stu就是实例对象，但是在内部实现了__callable__方法，就可以像函数一样调用\n\n在该模块中定义了request和response类，并实现了相关方法\n\ncookies\n\nCookieJar是什么\n\n# hooks模块\n\nhooks即钩子方法，用于在某个框架固定的某个流程执行是捎带执行（钩上）某个自定义的方法，requests中只支持了response的钩子，我们可以做一些响应检查或者在响应中添加信息等功能，示例如下：\n\n#### 场景一：对响应状态码进行判断，如果失败抛出错误\n\n常规做法\n\n```python\n# 每个请求都需要实现一次\nr = http.get(\"https://api.github.com/user/repos?page=1\")\nr.raise_for_status()\n```\n\n结合hooks\n\n```python\nhttp = requests.Session()\n\nassert_status_hook = lambda response, *args, **kwargs: response.raise_for_status()\nhttp.hooks[\"response\"] = [assert_status_hook]\n\nhttp.get(\"https://api.github.com/user/repos?page=1\")\nhttp.post(\"https://api.github.com/user/repos?page=1\")\n```\n\n","source":"_posts/requests源码学习.md","raw":"---\ntitle: requests源码学习\ndate: 2022-04-25 09:53:39\nauthor: 小章\nsummary: 关于requests中各模块源码的学习\ncategories: requests\ntags: 源码学习\n---\n\n# __init__模块\t\n\ninit总体结构只包含check_compatibility和_check_ctyptography两个函数，对版本信息进行校验\n\n收获：\n\n在函数内部多次assert，如果没有完全通过，则会抛出AssertError\n\n对版本信息验证是否在2.0.0~3.0.0之间，可以使用 assert (2,0,0) <= (major, minor, patch) < (3,0,0) 或者assert [2,0,0] <= (major, minor, patch) < [3,0,0]，归因于python列表(元组)比较大小\n\n导包过程中 from . import utils中的.表示当前位置\n\n# compat、_internal_utils模块\n\n负责python2、python3以及简单的编码处理\n\n# certs模块\n\nCA证书相关\n\n# exceptions模块\n\n异常处理模块，应用到了super、hasattr、多继承等，还有字典的pop方法，pop方法可以加一个默认返回值kwargs.pop('response', None)，具体工作原理还需要结合调用时学习\n\ncookies模块\n\nhooks模块\n\npackages模块\t\n\n# status_codes模块\n\n该模块中有所有的状态信息，但是内部直接通过_init()执行，似乎没有被调用类或变量，还需要models等模块中结合学习\n\n# auth模块\n\n身份认证相关，在models、adapter、sessions等模块中调用了，学习这几个模块再返回学习\n\n# API模块\n\napi模块中，包含request、get、option、post等函数，而get等通过调用request实现函数功能，而request调用的是session.request函数，同时使用with sessions.Session() as session:对session进行上下文管理，确保会话及时关闭，避免出现类似内存泄漏的情况\n\n# structures模块\n\n新建了两种数据结构，CaseInsensitiveDict和LookupDict，其中CaseInsensitiveDict继承于MutableMapping，实现了__setitem__,__getitem__,__delitem__,__iter__,__len__等方法，解决大小写问题，在self._store中存储的键值形式为 \"lower_key\" : (\"real_key\",\"value\")，查询时用小写查询，同时能保留原信息，具体实现方法很值得学习\n\n# session模块\n\n1. 为什么通过requests.Session能访问sessions模块中的Session类，因为在requests库的__init__文件中导入了Session\n\n   实现了跨请求保持cookies方法，具体实现方法还没有看懂，核心在于request方法，首先通过models模块中生成Request类，再执行相应的prepare_request方法，最后执行send方法实现功能，常规通过requests.get方法不能保持cookies可能是因为在get方法中调用的是及时关闭session的请求方法\n\n   session和api中都有request、get等方法，api中的本质上仍然调用的是session的方法\n\nSession类有一个mount方法，def mount(self, prefix, adapter):\t是将对应的adapter注册到对应的会话前缀上，使用场景比如为所有请求设置一个超时时间\n\n```python\nfrom requests.adapters import HTTPAdapter\nDEFAULT_TIMEOUT = 5 # seconds\n\nclass TimeoutHTTPAdapter(HTTPAdapter):\n    def __init__(self, *args, **kwargs):\n        self.timeout = DEFAULT_TIMEOUT\n        if \"timeout\" in kwargs:\n            self.timeout = kwargs[\"timeout\"]\n            del kwargs[\"timeout\"]\n        super().__init__(*args, **kwargs)\n\n    def send(self, request, **kwargs):\n        timeout = kwargs.get(\"timeout\")\n        if timeout is None:\n            kwargs[\"timeout\"] = self.timeout\n        return super().send(request, **kwargs)\n```\n\n使用时\n\n```python\nimport requests\n\nhttp = requests.Session()\n\n# 此挂载对http和https都有效\nadapter = TimeoutHTTPAdapter(timeout=2.5)\nhttp.mount(\"https://\", adapter)\nhttp.mount(\"http://\", adapter)\n\n# 设置默认超时为2.5秒\nresponse = http.get(\"https://api.twilio.com/\")\n\n# 通常为特定的请求重写超时时间\nresponse = http.get(\"https://api.twilio.com/\", timeout=10)\n```\n\n\n\n# models模块\n\n models模块中首先创建了RequestEncodingMixin、RequestHooksMixin基类，类中只有相关方法，供后续子类调用，其中RequestHooksMixin类中使用了self.hooks属性，hooks属性由其子类创建，因此此处使用了Mixin模式，并且父类调用了子类的属性。\n\n```python\nclass RequestHooksMixin(object):\n    def register_hook(self, event, hook):\n        \"\"\"Properly register a hook.\"\"\"\n\n        if event not in self.hooks:\n            raise ValueError('Unsupported event specified, with event name \"%s\"' % (event))\n\n        if isinstance(hook, Callable):\n            self.hooks[event].append(hook)\n```\n\n此外用到了Callable，这是一种可调用执行对象，并且可以执行参数，也就是在对象后面使用小括号执行代码，那么这个对象就是Callable对象，callable包含函数、类、类里的方法、实现了__callable__方法的实例对象\n\n```python3\nclass Stu(object):\n    def __init__(self, name):\n        self.name = name\n\n    def __call__(self, *args, **kwargs):\n        self.run()\n\n    def run(self):\n        print('{name} is running'.format(name=self.name))\n\nstu = Stu('小明')\nprint(callable(stu))    # True\nstu() \n```\n\n这个stu就是实例对象，但是在内部实现了__callable__方法，就可以像函数一样调用\n\n在该模块中定义了request和response类，并实现了相关方法\n\ncookies\n\nCookieJar是什么\n\n# hooks模块\n\nhooks即钩子方法，用于在某个框架固定的某个流程执行是捎带执行（钩上）某个自定义的方法，requests中只支持了response的钩子，我们可以做一些响应检查或者在响应中添加信息等功能，示例如下：\n\n#### 场景一：对响应状态码进行判断，如果失败抛出错误\n\n常规做法\n\n```python\n# 每个请求都需要实现一次\nr = http.get(\"https://api.github.com/user/repos?page=1\")\nr.raise_for_status()\n```\n\n结合hooks\n\n```python\nhttp = requests.Session()\n\nassert_status_hook = lambda response, *args, **kwargs: response.raise_for_status()\nhttp.hooks[\"response\"] = [assert_status_hook]\n\nhttp.get(\"https://api.github.com/user/repos?page=1\")\nhttp.post(\"https://api.github.com/user/repos?page=1\")\n```\n\n","slug":"requests源码学习","published":1,"updated":"2023-03-30T16:39:31.399Z","_id":"cld1tm1j2000jbsw7gjw18avb","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"init-模块\"><a href=\"#init-模块\" class=\"headerlink\" title=\"__init__模块\"></a>__init__模块</h1><p>init总体结构只包含check_compatibility和_check_ctyptography两个函数，对版本信息进行校验</p>\n<p>收获：</p>\n<p>在函数内部多次assert，如果没有完全通过，则会抛出AssertError</p>\n<p>对版本信息验证是否在2.0.0~3.0.0之间，可以使用 assert (2,0,0) &lt;&#x3D; (major, minor, patch) &lt; (3,0,0) 或者assert [2,0,0] &lt;&#x3D; (major, minor, patch) &lt; [3,0,0]，归因于python列表(元组)比较大小</p>\n<p>导包过程中 from . import utils中的.表示当前位置</p>\n<h1 id=\"compat、-internal-utils模块\"><a href=\"#compat、-internal-utils模块\" class=\"headerlink\" title=\"compat、_internal_utils模块\"></a>compat、_internal_utils模块</h1><p>负责python2、python3以及简单的编码处理</p>\n<h1 id=\"certs模块\"><a href=\"#certs模块\" class=\"headerlink\" title=\"certs模块\"></a>certs模块</h1><p>CA证书相关</p>\n<h1 id=\"exceptions模块\"><a href=\"#exceptions模块\" class=\"headerlink\" title=\"exceptions模块\"></a>exceptions模块</h1><p>异常处理模块，应用到了super、hasattr、多继承等，还有字典的pop方法，pop方法可以加一个默认返回值kwargs.pop(‘response’, None)，具体工作原理还需要结合调用时学习</p>\n<p>cookies模块</p>\n<p>hooks模块</p>\n<p>packages模块\t</p>\n<h1 id=\"status-codes模块\"><a href=\"#status-codes模块\" class=\"headerlink\" title=\"status_codes模块\"></a>status_codes模块</h1><p>该模块中有所有的状态信息，但是内部直接通过_init()执行，似乎没有被调用类或变量，还需要models等模块中结合学习</p>\n<h1 id=\"auth模块\"><a href=\"#auth模块\" class=\"headerlink\" title=\"auth模块\"></a>auth模块</h1><p>身份认证相关，在models、adapter、sessions等模块中调用了，学习这几个模块再返回学习</p>\n<h1 id=\"API模块\"><a href=\"#API模块\" class=\"headerlink\" title=\"API模块\"></a>API模块</h1><p>api模块中，包含request、get、option、post等函数，而get等通过调用request实现函数功能，而request调用的是session.request函数，同时使用with sessions.Session() as session:对session进行上下文管理，确保会话及时关闭，避免出现类似内存泄漏的情况</p>\n<h1 id=\"structures模块\"><a href=\"#structures模块\" class=\"headerlink\" title=\"structures模块\"></a>structures模块</h1><p>新建了两种数据结构，CaseInsensitiveDict和LookupDict，其中CaseInsensitiveDict继承于MutableMapping，实现了__setitem__,<strong>getitem</strong>,<strong>delitem</strong>,<strong>iter</strong>,__len__等方法，解决大小写问题，在self._store中存储的键值形式为 “lower_key” : (“real_key”,”value”)，查询时用小写查询，同时能保留原信息，具体实现方法很值得学习</p>\n<h1 id=\"session模块\"><a href=\"#session模块\" class=\"headerlink\" title=\"session模块\"></a>session模块</h1><ol>\n<li><p>为什么通过requests.Session能访问sessions模块中的Session类，因为在requests库的__init__文件中导入了Session</p>\n<p>实现了跨请求保持cookies方法，具体实现方法还没有看懂，核心在于request方法，首先通过models模块中生成Request类，再执行相应的prepare_request方法，最后执行send方法实现功能，常规通过requests.get方法不能保持cookies可能是因为在get方法中调用的是及时关闭session的请求方法</p>\n<p>session和api中都有request、get等方法，api中的本质上仍然调用的是session的方法</p>\n</li>\n</ol>\n<p>Session类有一个mount方法，def mount(self, prefix, adapter):\t是将对应的adapter注册到对应的会话前缀上，使用场景比如为所有请求设置一个超时时间</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> requests<span class=\"token punctuation\">.</span>adapters <span class=\"token keyword\">import</span> HTTPAdapter\nDEFAULT_TIMEOUT <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token comment\"># seconds</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TimeoutHTTPAdapter</span><span class=\"token punctuation\">(</span>HTTPAdapter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>timeout <span class=\"token operator\">=</span> DEFAULT_TIMEOUT\n        <span class=\"token keyword\">if</span> <span class=\"token string\">\"timeout\"</span> <span class=\"token keyword\">in</span> kwargs<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>timeout <span class=\"token operator\">=</span> kwargs<span class=\"token punctuation\">[</span><span class=\"token string\">\"timeout\"</span><span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">del</span> kwargs<span class=\"token punctuation\">[</span><span class=\"token string\">\"timeout\"</span><span class=\"token punctuation\">]</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        timeout <span class=\"token operator\">=</span> kwargs<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"timeout\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> timeout <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            kwargs<span class=\"token punctuation\">[</span><span class=\"token string\">\"timeout\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>timeout\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>使用时</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> requests\n\nhttp <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>Session<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 此挂载对http和https都有效</span>\nadapter <span class=\"token operator\">=</span> TimeoutHTTPAdapter<span class=\"token punctuation\">(</span>timeout<span class=\"token operator\">=</span><span class=\"token number\">2.5</span><span class=\"token punctuation\">)</span>\nhttp<span class=\"token punctuation\">.</span>mount<span class=\"token punctuation\">(</span><span class=\"token string\">\"https://\"</span><span class=\"token punctuation\">,</span> adapter<span class=\"token punctuation\">)</span>\nhttp<span class=\"token punctuation\">.</span>mount<span class=\"token punctuation\">(</span><span class=\"token string\">\"http://\"</span><span class=\"token punctuation\">,</span> adapter<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 设置默认超时为2.5秒</span>\nresponse <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"https://api.twilio.com/\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 通常为特定的请求重写超时时间</span>\nresponse <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"https://api.twilio.com/\"</span><span class=\"token punctuation\">,</span> timeout<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h1 id=\"models模块\"><a href=\"#models模块\" class=\"headerlink\" title=\"models模块\"></a>models模块</h1><p> models模块中首先创建了RequestEncodingMixin、RequestHooksMixin基类，类中只有相关方法，供后续子类调用，其中RequestHooksMixin类中使用了self.hooks属性，hooks属性由其子类创建，因此此处使用了Mixin模式，并且父类调用了子类的属性。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">RequestHooksMixin</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">register_hook</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">,</span> hook<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"Properly register a hook.\"\"\"</span>\n\n        <span class=\"token keyword\">if</span> event <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">'Unsupported event specified, with event name \"%s\"'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>hook<span class=\"token punctuation\">,</span> Callable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">[</span>event<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>hook<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>此外用到了Callable，这是一种可调用执行对象，并且可以执行参数，也就是在对象后面使用小括号执行代码，那么这个对象就是Callable对象，callable包含函数、类、类里的方法、实现了__callable__方法的实例对象</p>\n<pre class=\"line-numbers language-python3\" data-language=\"python3\"><code class=\"language-python3\">class Stu(object):\n    def __init__(self, name):\n        self.name &#x3D; name\n\n    def __call__(self, *args, **kwargs):\n        self.run()\n\n    def run(self):\n        print(&#39;&#123;name&#125; is running&#39;.format(name&#x3D;self.name))\n\nstu &#x3D; Stu(&#39;小明&#39;)\nprint(callable(stu))    # True\nstu() <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这个stu就是实例对象，但是在内部实现了__callable__方法，就可以像函数一样调用</p>\n<p>在该模块中定义了request和response类，并实现了相关方法</p>\n<p>cookies</p>\n<p>CookieJar是什么</p>\n<h1 id=\"hooks模块\"><a href=\"#hooks模块\" class=\"headerlink\" title=\"hooks模块\"></a>hooks模块</h1><p>hooks即钩子方法，用于在某个框架固定的某个流程执行是捎带执行（钩上）某个自定义的方法，requests中只支持了response的钩子，我们可以做一些响应检查或者在响应中添加信息等功能，示例如下：</p>\n<h4 id=\"场景一：对响应状态码进行判断，如果失败抛出错误\"><a href=\"#场景一：对响应状态码进行判断，如果失败抛出错误\" class=\"headerlink\" title=\"场景一：对响应状态码进行判断，如果失败抛出错误\"></a>场景一：对响应状态码进行判断，如果失败抛出错误</h4><p>常规做法</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 每个请求都需要实现一次</span>\nr <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"https://api.github.com/user/repos?page=1\"</span><span class=\"token punctuation\">)</span>\nr<span class=\"token punctuation\">.</span>raise_for_status<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>结合hooks</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">http <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>Session<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nassert_status_hook <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> response<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">:</span> response<span class=\"token punctuation\">.</span>raise_for_status<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nhttp<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">[</span><span class=\"token string\">\"response\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>assert_status_hook<span class=\"token punctuation\">]</span>\n\nhttp<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"https://api.github.com/user/repos?page=1\"</span><span class=\"token punctuation\">)</span>\nhttp<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span><span class=\"token string\">\"https://api.github.com/user/repos?page=1\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"init-模块\"><a href=\"#init-模块\" class=\"headerlink\" title=\"__init__模块\"></a>__init__模块</h1><p>init总体结构只包含check_compatibility和_check_ctyptography两个函数，对版本信息进行校验</p>\n<p>收获：</p>\n<p>在函数内部多次assert，如果没有完全通过，则会抛出AssertError</p>\n<p>对版本信息验证是否在2.0.0~3.0.0之间，可以使用 assert (2,0,0) &lt;&#x3D; (major, minor, patch) &lt; (3,0,0) 或者assert [2,0,0] &lt;&#x3D; (major, minor, patch) &lt; [3,0,0]，归因于python列表(元组)比较大小</p>\n<p>导包过程中 from . import utils中的.表示当前位置</p>\n<h1 id=\"compat、-internal-utils模块\"><a href=\"#compat、-internal-utils模块\" class=\"headerlink\" title=\"compat、_internal_utils模块\"></a>compat、_internal_utils模块</h1><p>负责python2、python3以及简单的编码处理</p>\n<h1 id=\"certs模块\"><a href=\"#certs模块\" class=\"headerlink\" title=\"certs模块\"></a>certs模块</h1><p>CA证书相关</p>\n<h1 id=\"exceptions模块\"><a href=\"#exceptions模块\" class=\"headerlink\" title=\"exceptions模块\"></a>exceptions模块</h1><p>异常处理模块，应用到了super、hasattr、多继承等，还有字典的pop方法，pop方法可以加一个默认返回值kwargs.pop(‘response’, None)，具体工作原理还需要结合调用时学习</p>\n<p>cookies模块</p>\n<p>hooks模块</p>\n<p>packages模块\t</p>\n<h1 id=\"status-codes模块\"><a href=\"#status-codes模块\" class=\"headerlink\" title=\"status_codes模块\"></a>status_codes模块</h1><p>该模块中有所有的状态信息，但是内部直接通过_init()执行，似乎没有被调用类或变量，还需要models等模块中结合学习</p>\n<h1 id=\"auth模块\"><a href=\"#auth模块\" class=\"headerlink\" title=\"auth模块\"></a>auth模块</h1><p>身份认证相关，在models、adapter、sessions等模块中调用了，学习这几个模块再返回学习</p>\n<h1 id=\"API模块\"><a href=\"#API模块\" class=\"headerlink\" title=\"API模块\"></a>API模块</h1><p>api模块中，包含request、get、option、post等函数，而get等通过调用request实现函数功能，而request调用的是session.request函数，同时使用with sessions.Session() as session:对session进行上下文管理，确保会话及时关闭，避免出现类似内存泄漏的情况</p>\n<h1 id=\"structures模块\"><a href=\"#structures模块\" class=\"headerlink\" title=\"structures模块\"></a>structures模块</h1><p>新建了两种数据结构，CaseInsensitiveDict和LookupDict，其中CaseInsensitiveDict继承于MutableMapping，实现了__setitem__,<strong>getitem</strong>,<strong>delitem</strong>,<strong>iter</strong>,__len__等方法，解决大小写问题，在self._store中存储的键值形式为 “lower_key” : (“real_key”,”value”)，查询时用小写查询，同时能保留原信息，具体实现方法很值得学习</p>\n<h1 id=\"session模块\"><a href=\"#session模块\" class=\"headerlink\" title=\"session模块\"></a>session模块</h1><ol>\n<li><p>为什么通过requests.Session能访问sessions模块中的Session类，因为在requests库的__init__文件中导入了Session</p>\n<p>实现了跨请求保持cookies方法，具体实现方法还没有看懂，核心在于request方法，首先通过models模块中生成Request类，再执行相应的prepare_request方法，最后执行send方法实现功能，常规通过requests.get方法不能保持cookies可能是因为在get方法中调用的是及时关闭session的请求方法</p>\n<p>session和api中都有request、get等方法，api中的本质上仍然调用的是session的方法</p>\n</li>\n</ol>\n<p>Session类有一个mount方法，def mount(self, prefix, adapter):\t是将对应的adapter注册到对应的会话前缀上，使用场景比如为所有请求设置一个超时时间</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> requests<span class=\"token punctuation\">.</span>adapters <span class=\"token keyword\">import</span> HTTPAdapter\nDEFAULT_TIMEOUT <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token comment\"># seconds</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TimeoutHTTPAdapter</span><span class=\"token punctuation\">(</span>HTTPAdapter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>timeout <span class=\"token operator\">=</span> DEFAULT_TIMEOUT\n        <span class=\"token keyword\">if</span> <span class=\"token string\">\"timeout\"</span> <span class=\"token keyword\">in</span> kwargs<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>timeout <span class=\"token operator\">=</span> kwargs<span class=\"token punctuation\">[</span><span class=\"token string\">\"timeout\"</span><span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">del</span> kwargs<span class=\"token punctuation\">[</span><span class=\"token string\">\"timeout\"</span><span class=\"token punctuation\">]</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        timeout <span class=\"token operator\">=</span> kwargs<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"timeout\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> timeout <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            kwargs<span class=\"token punctuation\">[</span><span class=\"token string\">\"timeout\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>timeout\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>使用时</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> requests\n\nhttp <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>Session<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 此挂载对http和https都有效</span>\nadapter <span class=\"token operator\">=</span> TimeoutHTTPAdapter<span class=\"token punctuation\">(</span>timeout<span class=\"token operator\">=</span><span class=\"token number\">2.5</span><span class=\"token punctuation\">)</span>\nhttp<span class=\"token punctuation\">.</span>mount<span class=\"token punctuation\">(</span><span class=\"token string\">\"https://\"</span><span class=\"token punctuation\">,</span> adapter<span class=\"token punctuation\">)</span>\nhttp<span class=\"token punctuation\">.</span>mount<span class=\"token punctuation\">(</span><span class=\"token string\">\"http://\"</span><span class=\"token punctuation\">,</span> adapter<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 设置默认超时为2.5秒</span>\nresponse <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"https://api.twilio.com/\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 通常为特定的请求重写超时时间</span>\nresponse <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"https://api.twilio.com/\"</span><span class=\"token punctuation\">,</span> timeout<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h1 id=\"models模块\"><a href=\"#models模块\" class=\"headerlink\" title=\"models模块\"></a>models模块</h1><p> models模块中首先创建了RequestEncodingMixin、RequestHooksMixin基类，类中只有相关方法，供后续子类调用，其中RequestHooksMixin类中使用了self.hooks属性，hooks属性由其子类创建，因此此处使用了Mixin模式，并且父类调用了子类的属性。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">RequestHooksMixin</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">register_hook</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">,</span> hook<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"Properly register a hook.\"\"\"</span>\n\n        <span class=\"token keyword\">if</span> event <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">'Unsupported event specified, with event name \"%s\"'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>hook<span class=\"token punctuation\">,</span> Callable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">[</span>event<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>hook<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>此外用到了Callable，这是一种可调用执行对象，并且可以执行参数，也就是在对象后面使用小括号执行代码，那么这个对象就是Callable对象，callable包含函数、类、类里的方法、实现了__callable__方法的实例对象</p>\n<pre class=\"line-numbers language-python3\" data-language=\"python3\"><code class=\"language-python3\">class Stu(object):\n    def __init__(self, name):\n        self.name &#x3D; name\n\n    def __call__(self, *args, **kwargs):\n        self.run()\n\n    def run(self):\n        print(&#39;&#123;name&#125; is running&#39;.format(name&#x3D;self.name))\n\nstu &#x3D; Stu(&#39;小明&#39;)\nprint(callable(stu))    # True\nstu() <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这个stu就是实例对象，但是在内部实现了__callable__方法，就可以像函数一样调用</p>\n<p>在该模块中定义了request和response类，并实现了相关方法</p>\n<p>cookies</p>\n<p>CookieJar是什么</p>\n<h1 id=\"hooks模块\"><a href=\"#hooks模块\" class=\"headerlink\" title=\"hooks模块\"></a>hooks模块</h1><p>hooks即钩子方法，用于在某个框架固定的某个流程执行是捎带执行（钩上）某个自定义的方法，requests中只支持了response的钩子，我们可以做一些响应检查或者在响应中添加信息等功能，示例如下：</p>\n<h4 id=\"场景一：对响应状态码进行判断，如果失败抛出错误\"><a href=\"#场景一：对响应状态码进行判断，如果失败抛出错误\" class=\"headerlink\" title=\"场景一：对响应状态码进行判断，如果失败抛出错误\"></a>场景一：对响应状态码进行判断，如果失败抛出错误</h4><p>常规做法</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 每个请求都需要实现一次</span>\nr <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"https://api.github.com/user/repos?page=1\"</span><span class=\"token punctuation\">)</span>\nr<span class=\"token punctuation\">.</span>raise_for_status<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>结合hooks</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">http <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>Session<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nassert_status_hook <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> response<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">:</span> response<span class=\"token punctuation\">.</span>raise_for_status<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nhttp<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">[</span><span class=\"token string\">\"response\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>assert_status_hook<span class=\"token punctuation\">]</span>\n\nhttp<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"https://api.github.com/user/repos?page=1\"</span><span class=\"token punctuation\">)</span>\nhttp<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span><span class=\"token string\">\"https://api.github.com/user/repos?page=1\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"requests学习","author":null,"date":"2022-04-17T02:22:51.000Z","_content":"\n# __init__模块\t\n\ninit总体结构只包含check_compatibility和_check_ctyptography两个函数，对版本信息进行校验\n\n收获：\n\n在函数内部多次assert，如果没有完全通过，则会抛出AssertError\n\n对版本信息验证是否在2.0.0~3.0.0之间，可以使用 assert (2,0,0) <= (major, minor, patch) < (3,0,0) 或者assert [2,0,0] <= (major, minor, patch) < [3,0,0]，归因于python列表(元组)比较大小\n\n导包过程中 from . import utils中的.表示当前位置\n\n# compat、_internal_utils模块\n\n负责python2、python3以及简单的编码处理\n\n# certs模块\n\nCA证书相关\n\n# exceptions模块\n\n异常处理模块，应用到了super、hasattr、多继承等，还有字典的pop方法，pop方法可以加一个默认返回值kwargs.pop('response', None)，具体工作原理还需要结合调用时学习\n\ncookies模块\n\nhooks模块\n\npackages模块\t\n\n# status_codes模块\n\n该模块中有所有的状态信息，但是内部直接通过_init()执行，似乎没有被调用类或变量，还需要models等模块中结合学习\n\n# auth模块\n\n身份认证相关，在models、adapter、sessions等模块中调用了，学习这几个模块再返回学习\n\n# API模块\n\napi模块中，包含request、get、option、post等函数，而get等通过调用request实现函数功能，而request调用的是session.request函数，同时使用with sessions.Session() as session:对session进行上下文管理，确保会话及时关闭，避免出现类似内存泄漏的情况\n\n# structures模块\n\n新建了两种数据结构，CaseInsensitiveDict和LookupDict，其中CaseInsensitiveDict继承于MutableMapping，实现了__setitem__,__getitem__,__delitem__,__iter__,__len__等方法，解决大小写问题，在self._store中存储的键值形式为 \"lower_key\" : (\"real_key\",\"value\")，查询时用小写查询，同时能保留原信息，具体实现方法很值得学习\n\n# session模块\n\n# models模块\n\n models模块中首先创建了RequestEncodingMixin、RequestHooksMixin基类，类中只有相关方法，供后续子类调用，其中RequestHooksMixin类中使用了self.hooks属性，hooks属性由其子类创建，因此此处使用了Mixin模式，并且父类调用了子类的属性。\n\n```python\nclass RequestHooksMixin(object):\n    def register_hook(self, event, hook):\n        \"\"\"Properly register a hook.\"\"\"\n\n        if event not in self.hooks:\n            raise ValueError('Unsupported event specified, with event name \"%s\"' % (event))\n\n        if isinstance(hook, Callable):\n            self.hooks[event].append(hook)\n```\n\n此外用到了Callable，这是一种可调用执行对象，并且可以执行参数，也就是在对象后面使用小括号执行代码，那么这个对象就是Callable对象，callable包含函数、类、类里的方法、实现了__callable__方法的实例对象\n\n```python3\nclass Stu(object):\n    def __init__(self, name):\n        self.name = name\n\n    def __call__(self, *args, **kwargs):\n        self.run()\n\n    def run(self):\n        print('{name} is running'.format(name=self.name))\n\nstu = Stu('小明')\nprint(callable(stu))    # True\nstu() \n```\n\n这个stu就是实例对象，但是在内部实现了__callable__方法，就可以像函数一样调用\n","source":"_posts/requests学习.md","raw":"---\ntitle: requests学习\nauthor: \ndate: 2022-04-17 10:22:51\ntags: requests\n---\n\n# __init__模块\t\n\ninit总体结构只包含check_compatibility和_check_ctyptography两个函数，对版本信息进行校验\n\n收获：\n\n在函数内部多次assert，如果没有完全通过，则会抛出AssertError\n\n对版本信息验证是否在2.0.0~3.0.0之间，可以使用 assert (2,0,0) <= (major, minor, patch) < (3,0,0) 或者assert [2,0,0] <= (major, minor, patch) < [3,0,0]，归因于python列表(元组)比较大小\n\n导包过程中 from . import utils中的.表示当前位置\n\n# compat、_internal_utils模块\n\n负责python2、python3以及简单的编码处理\n\n# certs模块\n\nCA证书相关\n\n# exceptions模块\n\n异常处理模块，应用到了super、hasattr、多继承等，还有字典的pop方法，pop方法可以加一个默认返回值kwargs.pop('response', None)，具体工作原理还需要结合调用时学习\n\ncookies模块\n\nhooks模块\n\npackages模块\t\n\n# status_codes模块\n\n该模块中有所有的状态信息，但是内部直接通过_init()执行，似乎没有被调用类或变量，还需要models等模块中结合学习\n\n# auth模块\n\n身份认证相关，在models、adapter、sessions等模块中调用了，学习这几个模块再返回学习\n\n# API模块\n\napi模块中，包含request、get、option、post等函数，而get等通过调用request实现函数功能，而request调用的是session.request函数，同时使用with sessions.Session() as session:对session进行上下文管理，确保会话及时关闭，避免出现类似内存泄漏的情况\n\n# structures模块\n\n新建了两种数据结构，CaseInsensitiveDict和LookupDict，其中CaseInsensitiveDict继承于MutableMapping，实现了__setitem__,__getitem__,__delitem__,__iter__,__len__等方法，解决大小写问题，在self._store中存储的键值形式为 \"lower_key\" : (\"real_key\",\"value\")，查询时用小写查询，同时能保留原信息，具体实现方法很值得学习\n\n# session模块\n\n# models模块\n\n models模块中首先创建了RequestEncodingMixin、RequestHooksMixin基类，类中只有相关方法，供后续子类调用，其中RequestHooksMixin类中使用了self.hooks属性，hooks属性由其子类创建，因此此处使用了Mixin模式，并且父类调用了子类的属性。\n\n```python\nclass RequestHooksMixin(object):\n    def register_hook(self, event, hook):\n        \"\"\"Properly register a hook.\"\"\"\n\n        if event not in self.hooks:\n            raise ValueError('Unsupported event specified, with event name \"%s\"' % (event))\n\n        if isinstance(hook, Callable):\n            self.hooks[event].append(hook)\n```\n\n此外用到了Callable，这是一种可调用执行对象，并且可以执行参数，也就是在对象后面使用小括号执行代码，那么这个对象就是Callable对象，callable包含函数、类、类里的方法、实现了__callable__方法的实例对象\n\n```python3\nclass Stu(object):\n    def __init__(self, name):\n        self.name = name\n\n    def __call__(self, *args, **kwargs):\n        self.run()\n\n    def run(self):\n        print('{name} is running'.format(name=self.name))\n\nstu = Stu('小明')\nprint(callable(stu))    # True\nstu() \n```\n\n这个stu就是实例对象，但是在内部实现了__callable__方法，就可以像函数一样调用\n","slug":"requests学习","published":1,"updated":"2022-04-25T06:51:13.860Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld1tm1j3000mbsw777290vya","content":"<h1 id=\"init-模块\"><a href=\"#init-模块\" class=\"headerlink\" title=\"__init__模块\"></a>__init__模块</h1><p>init总体结构只包含check_compatibility和_check_ctyptography两个函数，对版本信息进行校验</p>\n<p>收获：</p>\n<p>在函数内部多次assert，如果没有完全通过，则会抛出AssertError</p>\n<p>对版本信息验证是否在2.0.0~3.0.0之间，可以使用 assert (2,0,0) &lt;&#x3D; (major, minor, patch) &lt; (3,0,0) 或者assert [2,0,0] &lt;&#x3D; (major, minor, patch) &lt; [3,0,0]，归因于python列表(元组)比较大小</p>\n<p>导包过程中 from . import utils中的.表示当前位置</p>\n<h1 id=\"compat、-internal-utils模块\"><a href=\"#compat、-internal-utils模块\" class=\"headerlink\" title=\"compat、_internal_utils模块\"></a>compat、_internal_utils模块</h1><p>负责python2、python3以及简单的编码处理</p>\n<h1 id=\"certs模块\"><a href=\"#certs模块\" class=\"headerlink\" title=\"certs模块\"></a>certs模块</h1><p>CA证书相关</p>\n<h1 id=\"exceptions模块\"><a href=\"#exceptions模块\" class=\"headerlink\" title=\"exceptions模块\"></a>exceptions模块</h1><p>异常处理模块，应用到了super、hasattr、多继承等，还有字典的pop方法，pop方法可以加一个默认返回值kwargs.pop(‘response’, None)，具体工作原理还需要结合调用时学习</p>\n<p>cookies模块</p>\n<p>hooks模块</p>\n<p>packages模块\t</p>\n<h1 id=\"status-codes模块\"><a href=\"#status-codes模块\" class=\"headerlink\" title=\"status_codes模块\"></a>status_codes模块</h1><p>该模块中有所有的状态信息，但是内部直接通过_init()执行，似乎没有被调用类或变量，还需要models等模块中结合学习</p>\n<h1 id=\"auth模块\"><a href=\"#auth模块\" class=\"headerlink\" title=\"auth模块\"></a>auth模块</h1><p>身份认证相关，在models、adapter、sessions等模块中调用了，学习这几个模块再返回学习</p>\n<h1 id=\"API模块\"><a href=\"#API模块\" class=\"headerlink\" title=\"API模块\"></a>API模块</h1><p>api模块中，包含request、get、option、post等函数，而get等通过调用request实现函数功能，而request调用的是session.request函数，同时使用with sessions.Session() as session:对session进行上下文管理，确保会话及时关闭，避免出现类似内存泄漏的情况</p>\n<h1 id=\"structures模块\"><a href=\"#structures模块\" class=\"headerlink\" title=\"structures模块\"></a>structures模块</h1><p>新建了两种数据结构，CaseInsensitiveDict和LookupDict，其中CaseInsensitiveDict继承于MutableMapping，实现了__setitem__,<strong>getitem</strong>,<strong>delitem</strong>,<strong>iter</strong>,__len__等方法，解决大小写问题，在self._store中存储的键值形式为 “lower_key” : (“real_key”,”value”)，查询时用小写查询，同时能保留原信息，具体实现方法很值得学习</p>\n<h1 id=\"session模块\"><a href=\"#session模块\" class=\"headerlink\" title=\"session模块\"></a>session模块</h1><h1 id=\"models模块\"><a href=\"#models模块\" class=\"headerlink\" title=\"models模块\"></a>models模块</h1><p> models模块中首先创建了RequestEncodingMixin、RequestHooksMixin基类，类中只有相关方法，供后续子类调用，其中RequestHooksMixin类中使用了self.hooks属性，hooks属性由其子类创建，因此此处使用了Mixin模式，并且父类调用了子类的属性。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">RequestHooksMixin</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">register_hook</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">,</span> hook<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"Properly register a hook.\"\"\"</span>\n\n        <span class=\"token keyword\">if</span> event <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">'Unsupported event specified, with event name \"%s\"'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>hook<span class=\"token punctuation\">,</span> Callable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">[</span>event<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>hook<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>此外用到了Callable，这是一种可调用执行对象，并且可以执行参数，也就是在对象后面使用小括号执行代码，那么这个对象就是Callable对象，callable包含函数、类、类里的方法、实现了__callable__方法的实例对象</p>\n<pre class=\"line-numbers language-python3\" data-language=\"python3\"><code class=\"language-python3\">class Stu(object):\n    def __init__(self, name):\n        self.name &#x3D; name\n\n    def __call__(self, *args, **kwargs):\n        self.run()\n\n    def run(self):\n        print(&#39;&#123;name&#125; is running&#39;.format(name&#x3D;self.name))\n\nstu &#x3D; Stu(&#39;小明&#39;)\nprint(callable(stu))    # True\nstu() <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这个stu就是实例对象，但是在内部实现了__callable__方法，就可以像函数一样调用</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"init-模块\"><a href=\"#init-模块\" class=\"headerlink\" title=\"__init__模块\"></a>__init__模块</h1><p>init总体结构只包含check_compatibility和_check_ctyptography两个函数，对版本信息进行校验</p>\n<p>收获：</p>\n<p>在函数内部多次assert，如果没有完全通过，则会抛出AssertError</p>\n<p>对版本信息验证是否在2.0.0~3.0.0之间，可以使用 assert (2,0,0) &lt;&#x3D; (major, minor, patch) &lt; (3,0,0) 或者assert [2,0,0] &lt;&#x3D; (major, minor, patch) &lt; [3,0,0]，归因于python列表(元组)比较大小</p>\n<p>导包过程中 from . import utils中的.表示当前位置</p>\n<h1 id=\"compat、-internal-utils模块\"><a href=\"#compat、-internal-utils模块\" class=\"headerlink\" title=\"compat、_internal_utils模块\"></a>compat、_internal_utils模块</h1><p>负责python2、python3以及简单的编码处理</p>\n<h1 id=\"certs模块\"><a href=\"#certs模块\" class=\"headerlink\" title=\"certs模块\"></a>certs模块</h1><p>CA证书相关</p>\n<h1 id=\"exceptions模块\"><a href=\"#exceptions模块\" class=\"headerlink\" title=\"exceptions模块\"></a>exceptions模块</h1><p>异常处理模块，应用到了super、hasattr、多继承等，还有字典的pop方法，pop方法可以加一个默认返回值kwargs.pop(‘response’, None)，具体工作原理还需要结合调用时学习</p>\n<p>cookies模块</p>\n<p>hooks模块</p>\n<p>packages模块\t</p>\n<h1 id=\"status-codes模块\"><a href=\"#status-codes模块\" class=\"headerlink\" title=\"status_codes模块\"></a>status_codes模块</h1><p>该模块中有所有的状态信息，但是内部直接通过_init()执行，似乎没有被调用类或变量，还需要models等模块中结合学习</p>\n<h1 id=\"auth模块\"><a href=\"#auth模块\" class=\"headerlink\" title=\"auth模块\"></a>auth模块</h1><p>身份认证相关，在models、adapter、sessions等模块中调用了，学习这几个模块再返回学习</p>\n<h1 id=\"API模块\"><a href=\"#API模块\" class=\"headerlink\" title=\"API模块\"></a>API模块</h1><p>api模块中，包含request、get、option、post等函数，而get等通过调用request实现函数功能，而request调用的是session.request函数，同时使用with sessions.Session() as session:对session进行上下文管理，确保会话及时关闭，避免出现类似内存泄漏的情况</p>\n<h1 id=\"structures模块\"><a href=\"#structures模块\" class=\"headerlink\" title=\"structures模块\"></a>structures模块</h1><p>新建了两种数据结构，CaseInsensitiveDict和LookupDict，其中CaseInsensitiveDict继承于MutableMapping，实现了__setitem__,<strong>getitem</strong>,<strong>delitem</strong>,<strong>iter</strong>,__len__等方法，解决大小写问题，在self._store中存储的键值形式为 “lower_key” : (“real_key”,”value”)，查询时用小写查询，同时能保留原信息，具体实现方法很值得学习</p>\n<h1 id=\"session模块\"><a href=\"#session模块\" class=\"headerlink\" title=\"session模块\"></a>session模块</h1><h1 id=\"models模块\"><a href=\"#models模块\" class=\"headerlink\" title=\"models模块\"></a>models模块</h1><p> models模块中首先创建了RequestEncodingMixin、RequestHooksMixin基类，类中只有相关方法，供后续子类调用，其中RequestHooksMixin类中使用了self.hooks属性，hooks属性由其子类创建，因此此处使用了Mixin模式，并且父类调用了子类的属性。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">RequestHooksMixin</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">register_hook</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">,</span> hook<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"Properly register a hook.\"\"\"</span>\n\n        <span class=\"token keyword\">if</span> event <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">'Unsupported event specified, with event name \"%s\"'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>hook<span class=\"token punctuation\">,</span> Callable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">[</span>event<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>hook<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>此外用到了Callable，这是一种可调用执行对象，并且可以执行参数，也就是在对象后面使用小括号执行代码，那么这个对象就是Callable对象，callable包含函数、类、类里的方法、实现了__callable__方法的实例对象</p>\n<pre class=\"line-numbers language-python3\" data-language=\"python3\"><code class=\"language-python3\">class Stu(object):\n    def __init__(self, name):\n        self.name &#x3D; name\n\n    def __call__(self, *args, **kwargs):\n        self.run()\n\n    def run(self):\n        print(&#39;&#123;name&#125; is running&#39;.format(name&#x3D;self.name))\n\nstu &#x3D; Stu(&#39;小明&#39;)\nprint(callable(stu))    # True\nstu() <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这个stu就是实例对象，但是在内部实现了__callable__方法，就可以像函数一样调用</p>\n"},{"title":"二叉树的前中后序遍历.md","date":"2022-03-10T13:37:44.000Z","_content":"\n给定一个二叉树的根节点 `root` ，返回它的 **中序** 遍历。\n\n```\n输入：root = [1,null,2,3]\n输出：[1,3,2]\n```\n\n```python\n# Definition for a binary tree node.\nfrom typing import List, Optional\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\nclass Solution:\n    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        # 递归方法\n        # res = []\n        # def inOrder(node):\n        #     if not node: return \n        #     inOrder(node.left)\n        #     res.append(node.val)\n        #     inOrder(node.right)\n        \n        # if not root: return \n        # inOrder(root)\n        # return res\n\n        # 迭代方法 颜色标记法\n        WHITE, GRAY = 0, 1\n        res = []\n        stack = [(WHITE, root)]\n        while stack:\n            color, node = stack.pop()\n            if node is None: continue\n            if color == WHITE:\n                stack.append((WHITE, node.right))\n                stack.append((GRAY, node))\n                stack.append((WHITE, node.left))\n            else:\n                res.append(node.val)\n        return res\n```\n\n以上方法可以推广至前序和后序，只需要简单更换入栈顺序和递归顺序\n","source":"_posts/二叉树的前中后序遍历.md","raw":"---\ntitle: 二叉树的前中后序遍历.md\ndate: 2022-03-10 21:37:44\ntags: 数据结构\n---\n\n给定一个二叉树的根节点 `root` ，返回它的 **中序** 遍历。\n\n```\n输入：root = [1,null,2,3]\n输出：[1,3,2]\n```\n\n```python\n# Definition for a binary tree node.\nfrom typing import List, Optional\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\nclass Solution:\n    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        # 递归方法\n        # res = []\n        # def inOrder(node):\n        #     if not node: return \n        #     inOrder(node.left)\n        #     res.append(node.val)\n        #     inOrder(node.right)\n        \n        # if not root: return \n        # inOrder(root)\n        # return res\n\n        # 迭代方法 颜色标记法\n        WHITE, GRAY = 0, 1\n        res = []\n        stack = [(WHITE, root)]\n        while stack:\n            color, node = stack.pop()\n            if node is None: continue\n            if color == WHITE:\n                stack.append((WHITE, node.right))\n                stack.append((GRAY, node))\n                stack.append((WHITE, node.left))\n            else:\n                res.append(node.val)\n        return res\n```\n\n以上方法可以推广至前序和后序，只需要简单更换入栈顺序和递归顺序\n","slug":"二叉树的前中后序遍历","published":1,"updated":"2022-03-10T13:40:43.005Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld1tm1j4000obsw7bp3dfhcr","content":"<p>给定一个二叉树的根节点 <code>root</code> ，返回它的 <strong>中序</strong> 遍历。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：root &#x3D; [1,null,2,3]\n输出：[1,3,2]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Definition for a binary tree node.</span>\n<span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> List<span class=\"token punctuation\">,</span> Optional\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> val<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> left<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> right<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val\n        self<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> left\n        self<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> right\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">inorderTraversal</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>TreeNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 递归方法</span>\n        <span class=\"token comment\"># res = []</span>\n        <span class=\"token comment\"># def inOrder(node):</span>\n        <span class=\"token comment\">#     if not node: return </span>\n        <span class=\"token comment\">#     inOrder(node.left)</span>\n        <span class=\"token comment\">#     res.append(node.val)</span>\n        <span class=\"token comment\">#     inOrder(node.right)</span>\n        \n        <span class=\"token comment\"># if not root: return </span>\n        <span class=\"token comment\"># inOrder(root)</span>\n        <span class=\"token comment\"># return res</span>\n\n        <span class=\"token comment\"># 迭代方法 颜色标记法</span>\n        WHITE<span class=\"token punctuation\">,</span> GRAY <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span>\n        res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>WHITE<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">while</span> stack<span class=\"token punctuation\">:</span>\n            color<span class=\"token punctuation\">,</span> node <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> node <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">continue</span>\n            <span class=\"token keyword\">if</span> color <span class=\"token operator\">==</span> WHITE<span class=\"token punctuation\">:</span>\n                stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>WHITE<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>GRAY<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>WHITE<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                res<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> res<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以上方法可以推广至前序和后序，只需要简单更换入栈顺序和递归顺序</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>给定一个二叉树的根节点 <code>root</code> ，返回它的 <strong>中序</strong> 遍历。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：root &#x3D; [1,null,2,3]\n输出：[1,3,2]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Definition for a binary tree node.</span>\n<span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> List<span class=\"token punctuation\">,</span> Optional\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> val<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> left<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> right<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val\n        self<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> left\n        self<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> right\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">inorderTraversal</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>TreeNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 递归方法</span>\n        <span class=\"token comment\"># res = []</span>\n        <span class=\"token comment\"># def inOrder(node):</span>\n        <span class=\"token comment\">#     if not node: return </span>\n        <span class=\"token comment\">#     inOrder(node.left)</span>\n        <span class=\"token comment\">#     res.append(node.val)</span>\n        <span class=\"token comment\">#     inOrder(node.right)</span>\n        \n        <span class=\"token comment\"># if not root: return </span>\n        <span class=\"token comment\"># inOrder(root)</span>\n        <span class=\"token comment\"># return res</span>\n\n        <span class=\"token comment\"># 迭代方法 颜色标记法</span>\n        WHITE<span class=\"token punctuation\">,</span> GRAY <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span>\n        res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>WHITE<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">while</span> stack<span class=\"token punctuation\">:</span>\n            color<span class=\"token punctuation\">,</span> node <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> node <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">continue</span>\n            <span class=\"token keyword\">if</span> color <span class=\"token operator\">==</span> WHITE<span class=\"token punctuation\">:</span>\n                stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>WHITE<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>GRAY<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>WHITE<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                res<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> res<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以上方法可以推广至前序和后序，只需要简单更换入栈顺序和递归顺序</p>\n"},{"title":"shell入门","date":"2022-11-25T16:14:09.000Z","author":"三岁浪迹天涯","_content":"\n## 基础知识\n\n在 shell 脚本，`#!` 告诉系统其后路径所指定的程序即是解释此脚本文件的 Shell 解释器\n\n```bash\n#!/bin/bash\n```\n\n执行shell脚本的方式：\n\n```shell\nsh /path/to/script.sh\nbash /path/to/script.sh\nsource /path/to/script.sh\n./path/to/script.sh\n```\n\n使用`#！`标识后，如果文件具有可执行权限，可以直接通过`path/to/test.sh`执行\n\n## 输出\n\n### echo\t\n\n```shell\necho -e \"YES\\c\" # -e 开启转义 \\c 不换行\necho \"NO\"\n#  Output:\n#  YESNO\n```\n\n### printf\n\n```shell\nprintf \"%s %s %s\\n\" a b c d e f g h i j\n#  Output:\n#  a b c\n#  d e f\n#  g h i\n#  j\n```\n\n## 字符串\n\nshell 字符串可以用单引号 `''`，也可以用双引号 `“”`，也可以不用引号。\n\n- 单引号的特点\n  - 单引号里不识别变量\n  - 单引号里不能出现单独的单引号（使用转义符也不行），但可成对出现，作为字符串拼接使用。\n- 双引号的特点\n  - 双引号里识别变量\n  - 双引号里可以出现转义字符\n\n### 单引号和双引号\n\n当局部变量和环境变量包含空格时，它们在引号中的扩展要格外注意。随便举个例子，假如我们用`echo`来输出用户的输入：\n\n```shell\nINPUT=\"A string  with   strange    whitespace.\"\necho $INPUT   ### A string with strange whitespace.\necho \"$INPUT\" ### A string  with   strange    whitespace.\n```\n\n调用第一个`echo`时给了它 5 个单独的参数 —— `$INPUT` 被分成了单独的词，`echo`在每个词之间打印了一个空格。第二种情况，调用`echo`时只给了它一个参数（整个$INPUT 的值，包括其中的空格）。\n\n```shell\n# 使用单引号拼接\nname1='white'\nstr1='hello, '${name1}''\nstr2='hello, ${name1}'\necho ${str1}_${str2}\n# Output:\n# hello, white_hello, ${name1}\n\n# 使用双引号拼接\nname2=\"black\"\nstr3=\"hello, \"${name2}\"\"\nstr4=\"hello, ${name2}\"\necho ${str3}_${str4}\n# Output:\n# hello, black_hello, black\n```\n\n### 字符串常见操作\n\n```shell\n# 获取字符串长度\ntext=\"12345\"\necho ${#text}\n# Output:\n# 5\n\n# 截取子字符串\ntext=\"12345\"\necho ${text:2:2}\n# Output:\n# 34\n\n# 查找子字符串\ntext=\"hello\"\necho `expr index \"${text}\" ll`\n\n# Execute: ./str-demo5.sh\n# Output:\n# 3\n```\n\n## map\n\nmap创建方式\n\n```bash\n# 方式一\ndeclare -A myMap\nmyMap[\"my03\"]=\"03\"\n\n# 方式二\ndeclare -A myMap=([\"my01\"]=\"01\" [\"my02\"]=\"02\")\n```\n\n## 数组\t\n\nbash只支持一维数组\n\n### 创建数组\n\n```shell\n# 创建数组的不同方式\nnums=([2]=2 [0]=0 [1]=1)\ncolors=(red yellow \"dark blue\")\n```\n\n### 输出数组所有元素\n\n```shell\necho ${colors[*]}\n# Output: red yellow dark blue\n\necho ${colors[@]}\n# Output: red yellow dark blue\n\nprintf \"+ %s\\n\" ${colors[*]}\n# Output:\n# + red\n# + yellow\n# + dark\n# + blue\n\nprintf \"+ %s\\n\" \"${colors[*]}\"\n# Output:\n# + red yellow dark blue\n\nprintf \"+ %s\\n\" \"${colors[@]}\"\n# Output:\n# + red\n# + yellow\n# + dark blue\n```\n\n### 数组常见操作\n\n```shell\n# 访问数组部分元素\necho ${nums[@]:0:2}\n\n# 访问数组长度\necho ${#nums[*]}\n# Output:\n# 3\n\n# 向数组中添加元素\ncolors=(white \"${colors[@]}\" green black)\necho ${colors[@]}\n# Output:\n# white red yellow dark blue green black\n\n# 删除元素\nunset nums[0]\necho ${nums[@]}\n# Output:\n# 1 2\n```\n\n## 运算符\n\n### 关系运算符\n\n关系运算符只支持数字，不支持字符串，除非字符串的值是数字。\n\n| 运算符 | 说明                                                  | 举例                         |\n| ------ | ----------------------------------------------------- | ---------------------------- |\n| `-eq`  | 检测两个数是否相等，相等返回 true。                   | `[ $a -eq $b ]`返回 false。  |\n| `-ne`  | 检测两个数是否相等，不相等返回 true。                 | `[ $a -ne $b ]` 返回 true。  |\n| `-gt`  | 检测左边的数是否大于右边的，如果是，则返回 true。     | `[ $a -gt $b ]` 返回 false。 |\n| `-lt`  | 检测左边的数是否小于右边的，如果是，则返回 true。     | `[ $a -lt $b ]` 返回 true。  |\n| `-ge`  | 检测左边的数是否大于等于右边的，如果是，则返回 true。 | `[ $a -ge $b ]` 返回 false。 |\n| `-le`  | 检测左边的数是否小于等于右边的，如果是，则返回 true。 | `[ $a -le $b ]`返回 true。   |\n\n### 布尔运算符\n\n| 运算符 | 说明                                                | 举例                                       |\n| ------ | --------------------------------------------------- | ------------------------------------------ |\n| `!`    | 非运算，表达式为 true 则返回 false，否则返回 true。 | `[ ! false ]` 返回 true。                  |\n| `-o`   | 或运算，有一个表达式为 true 则返回 true。           | `[ $a -lt 20 -o $b -gt 100 ]` 返回 true。  |\n| `-a`   | 与运算，两个表达式都为 true 才返回 true。           | `[ $a -lt 20 -a $b -gt 100 ]` 返回 false。 |\n\n### 逻辑运算符\n\n| 运算符 | 说明       | 举例                                            |\n| ------ | ---------- | ----------------------------------------------- |\n| `&&`   | 逻辑的 AND | `[[ ${x} -lt 100 && ${y} -gt 100 ]]` 返回 false |\n\n### 字符串运算符\n\n| 运算符 | 说明                                       | 举例                       |\n| ------ | ------------------------------------------ | -------------------------- |\n| `=`    | 检测两个字符串是否相等，相等返回 true。    | `[ $a = $b ]` 返回 false。 |\n| `!=`   | 检测两个字符串是否相等，不相等返回 true。  | `[ $a != $b ]` 返回 true。 |\n| `-z`   | 检测字符串长度是否为 0，为 0 返回 true。   | `[ -z $a ]` 返回 false。   |\n| `-n`   | 检测字符串长度是否为 0，不为 0 返回 true。 | `[ -n $a ]` 返回 true。    |\n| `str`  | 检测字符串是否为空，不为空返回 true。      | `[ $a ]` 返回 true。       |\n\n### 文件测试运算符\n\n| 操作符  | 说明                                                         | 举例                        |\n| :------ | ------------------------------------------------------------ | --------------------------- |\n| -b file | 检测文件是否是块设备文件，如果是，则返回 true。              | `[ -b $file ]` 返回 false。 |\n| -c file | 检测文件是否是字符设备文件，如果是，则返回 true。            | `[ -c $file ]` 返回 false。 |\n| -d file | 检测文件是否是目录，如果是，则返回 true。                    | `[ -d $file ]` 返回 false。 |\n| -f file | 检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。 | `[ -f $file ]` 返回 true。  |\n| -g file | 检测文件是否设置了 SGID 位，如果是，则返回 true。            | `[ -g $file ]` 返回 false。 |\n| -k file | 检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。  | `[ -k $file ]`返回 false。  |\n| -p file | 检测文件是否是有名管道，如果是，则返回 true。                | `[ -p $file ]` 返回 false。 |\n| -u file | 检测文件是否设置了 SUID 位，如果是，则返回 true。            | `[ -u $file ]` 返回 false。 |\n| -r file | 检测文件是否可读，如果是，则返回 true。                      | `[ -r $file ]` 返回 true。  |\n| -w file | 检测文件是否可写，如果是，则返回 true。                      | `[ -w $file ]` 返回 true。  |\n| -x file | 检测文件是否可执行，如果是，则返回 true。                    | `[ -x $file ]` 返回 true。  |\n| -s file | 检测文件是否为空（文件大小是否大于 0），不为空返回 true。    | `[ -s $file ]` 返回 true。  |\n| -e file | 检测文件（包括目录）是否存在，如果是，则返回 true。          | `[ -e $file ]` 返回 true。  |\n\n## 控制语句\n\n[]和[[]]的区别：\n\n优先考虑使用[[]]，它是内置在shell中的一个命令，支持字符串的模式匹配等，比如[[ hello == hell? ]]，结果为真。\n\n### 条件语句\n\nif语句\n\n```shell\nx=10\ny=20\nif [[ ${x} > ${y} ]]; then\n   echo \"${x} > ${y}\"\nelif [[ ${x} < ${y} ]]; then\n   echo \"${x} < ${y}\"\nelse\n   echo \"${x} = ${y}\"\nfi\n# Output: 10 < 20\n```\n\ncase语句\n\n```shell\nexec\ncase ${oper} in\n  \"+\")\n    val=`expr ${x} + ${y}`\n    echo \"${x} + ${y} = ${val}\"\n  ;;\n  \"-\")\n    val=`expr ${x} - ${y}`\n    echo \"${x} - ${y} = ${val}\"\n  ;;\n  \"*\")\n    val=`expr ${x} \\* ${y}`\n    echo \"${x} * ${y} = ${val}\"\n  ;;\n  \"/\")\n    val=`expr ${x} / ${y}`\n    echo \"${x} / ${y} = ${val}\"\n  ;;\n  *)\n    echo \"Unknown oper!\"\n  ;;\nesac\n```\n\n\n\n### for循环\n\nfor循环的几种使用方法\n\n```shell\nfor arg in elem1 elem2 ... elemN\ndo\n  ### 语句\ndone\n\nfor (( i = 0; i < 10; i++ )); do\n  echo $i\ndone\n\nDIR=/home/zp\nfor FILE in ${DIR}/*.sh; do\n  mv \"$FILE\" \"${DIR}/scripts\"\ndone\n# 将 /home/zp 目录下所有 sh 文件拷贝到 /home/zp/scripts\n```\n\n### while循环\n\n```shell\nwhile [[ ${x} -lt 10 ]]; do\n  echo $((x * x))\n  x=$((x + 1))\ndone\n```\n\n### select循环\n\n```shell\nselect answer in elem1 elem2 ... elemN\ndo\n  ### 语句\ndone\n```\n\n`select`会打印`elem1..elemN`以及它们的序列号到屏幕上，之后会提示用户输入。\n\n```shell\nPS3=\"Choose the package manager: \"\nselect ITEM in bower npm gem pip\ndo\necho -n \"Enter the package name: \" && read PACKAGE\ncase ${ITEM} in\n  bower) bower install ${PACKAGE} ;;\n  npm) npm install ${PACKAGE} ;;\n  gem) gem install ${PACKAGE} ;;\n  pip) pip install ${PACKAGE} ;;\nesac\nbreak # 避免无限循环\ndone\n```\n\n运行这个脚本，会得到如下输出：\n\n```shell\n$ ./my_script\n1) bower\n2) npm\n3) gem\n4) pip\nChoose the package manager: 2\nEnter the package name: gitbook-cli\n```\n\n## 函数\n\n```shell\ncalc(){\n  PS3=\"choose the oper: \"\n  select oper in + - \\* / # 生成操作符选择菜单\n  do\n  echo -n \"enter first num: \" && read x # 读取输入参数\n  echo -n \"enter second num: \" && read y # 读取输入参数\n  exec\n  case ${oper} in\n    \"+\")\n      return $((${x} + ${y}))\n    ;;\n    \"-\")\n      return $((${x} - ${y}))\n    ;;\n    \"*\")\n      return $((${x} * ${y}))\n    ;;\n    \"/\")\n      return $((${x} / ${y}))\n    ;;\n    *)\n      echo \"${oper} is not support!\"\n      return 0\n    ;;\n  esac\n  break\n  done\n}\ncalc\necho \"the result is: $?\" # $? 获取 calc 函数返回值\n```\n\n💡 说明：\n\n1. 函数定义时，`function` 关键字可有可无。\n2. 函数返回值 - return 返回函数返回值，返回值类型只能为整数（0-255）。如果不加 return 语句，shell 默认将以最后一条命令的运行结果，作为函数返回值。\n3. 函数返回值在调用该函数后通过 `$?` 来获得。\n4. 所有函数在使用前必须定义。这意味着必须将函数放在脚本开始部分，直至 shell 解释器首次发现它时，才可以使用。调用函数仅使用其函数名即可。\n\n### 位置参数\n\n**位置参数**是在调用一个函数并传给它参数时创建的变量。\n\n位置参数变量表：\n\n| 变量           | 描述                           |\n| -------------- | ------------------------------ |\n| `$0`           | 脚本名称                       |\n| `$1 … $9`      | 第 1 个到第 9 个参数列表       |\n| `${10} … ${N}` | 第 10 个到 N 个参数列表        |\n| `$*` or `$@`   | 除了`$0`外的所有位置参数       |\n| `$#`           | 不包括`$0`在内的位置参数的个数 |\n| `$FUNCNAME`    | 函数名称（仅在函数内部有值）   |\n\n```shell\n#!/usr/bin/env bash\n\nx=0\nif [[ -n $1 ]]; then\n  echo \"第一个参数为：$1\"\n  x=$1\nelse\n  echo \"第一个参数为空\"\nfi\n\ny=0\nif [[ -n $2 ]]; then\n  echo \"第二个参数为：$2\"\n  y=$2\nelse\n  echo \"第二个参数为空\"\nfi\n\nparamsFunction(){\n  echo \"函数第一个入参：$1\"\n  echo \"函数第二个入参：$2\"\n}\nparamsFunction ${x} ${y}\n```\n\n执行结果：\n\n```\n$ ./function-demo2.sh\n第一个参数为空\n第二个参数为空\n函数第一个入参：0\n函数第二个入参：0\n\n$ ./function-demo2.sh 10 20\n第一个参数为：10\n第二个参数为：20\n函数第一个入参：10\n函数第二个入参：20\n```\n\n### 函数处理参数\n\n另外，还有几个特殊字符用来处理参数：\n\n| 参数处理 | 说明                                             |\n| -------- | ------------------------------------------------ |\n| `$#`     | 返回参数个数                                     |\n| `$*`     | 返回所有参数                                     |\n| `$       | 参数处理                                         |\n| $!       | 后台运行的最后一个进程的 ID 号                   |\n| `$@`     | 返回所有参数                                     |\n| $-       | 返回 Shell 使用的当前选项，与 set 命令功能相同。 |\n| $?       | 函数返回值                                       |\n","source":"_posts/shell入门.md","raw":"---\ntitle: shell入门\ndate: 2022-11-26 00:14:09\nauthor: 三岁浪迹天涯\ncategories: linux\ntags:\n  - shell\n  - 基础\n---\n\n## 基础知识\n\n在 shell 脚本，`#!` 告诉系统其后路径所指定的程序即是解释此脚本文件的 Shell 解释器\n\n```bash\n#!/bin/bash\n```\n\n执行shell脚本的方式：\n\n```shell\nsh /path/to/script.sh\nbash /path/to/script.sh\nsource /path/to/script.sh\n./path/to/script.sh\n```\n\n使用`#！`标识后，如果文件具有可执行权限，可以直接通过`path/to/test.sh`执行\n\n## 输出\n\n### echo\t\n\n```shell\necho -e \"YES\\c\" # -e 开启转义 \\c 不换行\necho \"NO\"\n#  Output:\n#  YESNO\n```\n\n### printf\n\n```shell\nprintf \"%s %s %s\\n\" a b c d e f g h i j\n#  Output:\n#  a b c\n#  d e f\n#  g h i\n#  j\n```\n\n## 字符串\n\nshell 字符串可以用单引号 `''`，也可以用双引号 `“”`，也可以不用引号。\n\n- 单引号的特点\n  - 单引号里不识别变量\n  - 单引号里不能出现单独的单引号（使用转义符也不行），但可成对出现，作为字符串拼接使用。\n- 双引号的特点\n  - 双引号里识别变量\n  - 双引号里可以出现转义字符\n\n### 单引号和双引号\n\n当局部变量和环境变量包含空格时，它们在引号中的扩展要格外注意。随便举个例子，假如我们用`echo`来输出用户的输入：\n\n```shell\nINPUT=\"A string  with   strange    whitespace.\"\necho $INPUT   ### A string with strange whitespace.\necho \"$INPUT\" ### A string  with   strange    whitespace.\n```\n\n调用第一个`echo`时给了它 5 个单独的参数 —— `$INPUT` 被分成了单独的词，`echo`在每个词之间打印了一个空格。第二种情况，调用`echo`时只给了它一个参数（整个$INPUT 的值，包括其中的空格）。\n\n```shell\n# 使用单引号拼接\nname1='white'\nstr1='hello, '${name1}''\nstr2='hello, ${name1}'\necho ${str1}_${str2}\n# Output:\n# hello, white_hello, ${name1}\n\n# 使用双引号拼接\nname2=\"black\"\nstr3=\"hello, \"${name2}\"\"\nstr4=\"hello, ${name2}\"\necho ${str3}_${str4}\n# Output:\n# hello, black_hello, black\n```\n\n### 字符串常见操作\n\n```shell\n# 获取字符串长度\ntext=\"12345\"\necho ${#text}\n# Output:\n# 5\n\n# 截取子字符串\ntext=\"12345\"\necho ${text:2:2}\n# Output:\n# 34\n\n# 查找子字符串\ntext=\"hello\"\necho `expr index \"${text}\" ll`\n\n# Execute: ./str-demo5.sh\n# Output:\n# 3\n```\n\n## map\n\nmap创建方式\n\n```bash\n# 方式一\ndeclare -A myMap\nmyMap[\"my03\"]=\"03\"\n\n# 方式二\ndeclare -A myMap=([\"my01\"]=\"01\" [\"my02\"]=\"02\")\n```\n\n## 数组\t\n\nbash只支持一维数组\n\n### 创建数组\n\n```shell\n# 创建数组的不同方式\nnums=([2]=2 [0]=0 [1]=1)\ncolors=(red yellow \"dark blue\")\n```\n\n### 输出数组所有元素\n\n```shell\necho ${colors[*]}\n# Output: red yellow dark blue\n\necho ${colors[@]}\n# Output: red yellow dark blue\n\nprintf \"+ %s\\n\" ${colors[*]}\n# Output:\n# + red\n# + yellow\n# + dark\n# + blue\n\nprintf \"+ %s\\n\" \"${colors[*]}\"\n# Output:\n# + red yellow dark blue\n\nprintf \"+ %s\\n\" \"${colors[@]}\"\n# Output:\n# + red\n# + yellow\n# + dark blue\n```\n\n### 数组常见操作\n\n```shell\n# 访问数组部分元素\necho ${nums[@]:0:2}\n\n# 访问数组长度\necho ${#nums[*]}\n# Output:\n# 3\n\n# 向数组中添加元素\ncolors=(white \"${colors[@]}\" green black)\necho ${colors[@]}\n# Output:\n# white red yellow dark blue green black\n\n# 删除元素\nunset nums[0]\necho ${nums[@]}\n# Output:\n# 1 2\n```\n\n## 运算符\n\n### 关系运算符\n\n关系运算符只支持数字，不支持字符串，除非字符串的值是数字。\n\n| 运算符 | 说明                                                  | 举例                         |\n| ------ | ----------------------------------------------------- | ---------------------------- |\n| `-eq`  | 检测两个数是否相等，相等返回 true。                   | `[ $a -eq $b ]`返回 false。  |\n| `-ne`  | 检测两个数是否相等，不相等返回 true。                 | `[ $a -ne $b ]` 返回 true。  |\n| `-gt`  | 检测左边的数是否大于右边的，如果是，则返回 true。     | `[ $a -gt $b ]` 返回 false。 |\n| `-lt`  | 检测左边的数是否小于右边的，如果是，则返回 true。     | `[ $a -lt $b ]` 返回 true。  |\n| `-ge`  | 检测左边的数是否大于等于右边的，如果是，则返回 true。 | `[ $a -ge $b ]` 返回 false。 |\n| `-le`  | 检测左边的数是否小于等于右边的，如果是，则返回 true。 | `[ $a -le $b ]`返回 true。   |\n\n### 布尔运算符\n\n| 运算符 | 说明                                                | 举例                                       |\n| ------ | --------------------------------------------------- | ------------------------------------------ |\n| `!`    | 非运算，表达式为 true 则返回 false，否则返回 true。 | `[ ! false ]` 返回 true。                  |\n| `-o`   | 或运算，有一个表达式为 true 则返回 true。           | `[ $a -lt 20 -o $b -gt 100 ]` 返回 true。  |\n| `-a`   | 与运算，两个表达式都为 true 才返回 true。           | `[ $a -lt 20 -a $b -gt 100 ]` 返回 false。 |\n\n### 逻辑运算符\n\n| 运算符 | 说明       | 举例                                            |\n| ------ | ---------- | ----------------------------------------------- |\n| `&&`   | 逻辑的 AND | `[[ ${x} -lt 100 && ${y} -gt 100 ]]` 返回 false |\n\n### 字符串运算符\n\n| 运算符 | 说明                                       | 举例                       |\n| ------ | ------------------------------------------ | -------------------------- |\n| `=`    | 检测两个字符串是否相等，相等返回 true。    | `[ $a = $b ]` 返回 false。 |\n| `!=`   | 检测两个字符串是否相等，不相等返回 true。  | `[ $a != $b ]` 返回 true。 |\n| `-z`   | 检测字符串长度是否为 0，为 0 返回 true。   | `[ -z $a ]` 返回 false。   |\n| `-n`   | 检测字符串长度是否为 0，不为 0 返回 true。 | `[ -n $a ]` 返回 true。    |\n| `str`  | 检测字符串是否为空，不为空返回 true。      | `[ $a ]` 返回 true。       |\n\n### 文件测试运算符\n\n| 操作符  | 说明                                                         | 举例                        |\n| :------ | ------------------------------------------------------------ | --------------------------- |\n| -b file | 检测文件是否是块设备文件，如果是，则返回 true。              | `[ -b $file ]` 返回 false。 |\n| -c file | 检测文件是否是字符设备文件，如果是，则返回 true。            | `[ -c $file ]` 返回 false。 |\n| -d file | 检测文件是否是目录，如果是，则返回 true。                    | `[ -d $file ]` 返回 false。 |\n| -f file | 检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。 | `[ -f $file ]` 返回 true。  |\n| -g file | 检测文件是否设置了 SGID 位，如果是，则返回 true。            | `[ -g $file ]` 返回 false。 |\n| -k file | 检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。  | `[ -k $file ]`返回 false。  |\n| -p file | 检测文件是否是有名管道，如果是，则返回 true。                | `[ -p $file ]` 返回 false。 |\n| -u file | 检测文件是否设置了 SUID 位，如果是，则返回 true。            | `[ -u $file ]` 返回 false。 |\n| -r file | 检测文件是否可读，如果是，则返回 true。                      | `[ -r $file ]` 返回 true。  |\n| -w file | 检测文件是否可写，如果是，则返回 true。                      | `[ -w $file ]` 返回 true。  |\n| -x file | 检测文件是否可执行，如果是，则返回 true。                    | `[ -x $file ]` 返回 true。  |\n| -s file | 检测文件是否为空（文件大小是否大于 0），不为空返回 true。    | `[ -s $file ]` 返回 true。  |\n| -e file | 检测文件（包括目录）是否存在，如果是，则返回 true。          | `[ -e $file ]` 返回 true。  |\n\n## 控制语句\n\n[]和[[]]的区别：\n\n优先考虑使用[[]]，它是内置在shell中的一个命令，支持字符串的模式匹配等，比如[[ hello == hell? ]]，结果为真。\n\n### 条件语句\n\nif语句\n\n```shell\nx=10\ny=20\nif [[ ${x} > ${y} ]]; then\n   echo \"${x} > ${y}\"\nelif [[ ${x} < ${y} ]]; then\n   echo \"${x} < ${y}\"\nelse\n   echo \"${x} = ${y}\"\nfi\n# Output: 10 < 20\n```\n\ncase语句\n\n```shell\nexec\ncase ${oper} in\n  \"+\")\n    val=`expr ${x} + ${y}`\n    echo \"${x} + ${y} = ${val}\"\n  ;;\n  \"-\")\n    val=`expr ${x} - ${y}`\n    echo \"${x} - ${y} = ${val}\"\n  ;;\n  \"*\")\n    val=`expr ${x} \\* ${y}`\n    echo \"${x} * ${y} = ${val}\"\n  ;;\n  \"/\")\n    val=`expr ${x} / ${y}`\n    echo \"${x} / ${y} = ${val}\"\n  ;;\n  *)\n    echo \"Unknown oper!\"\n  ;;\nesac\n```\n\n\n\n### for循环\n\nfor循环的几种使用方法\n\n```shell\nfor arg in elem1 elem2 ... elemN\ndo\n  ### 语句\ndone\n\nfor (( i = 0; i < 10; i++ )); do\n  echo $i\ndone\n\nDIR=/home/zp\nfor FILE in ${DIR}/*.sh; do\n  mv \"$FILE\" \"${DIR}/scripts\"\ndone\n# 将 /home/zp 目录下所有 sh 文件拷贝到 /home/zp/scripts\n```\n\n### while循环\n\n```shell\nwhile [[ ${x} -lt 10 ]]; do\n  echo $((x * x))\n  x=$((x + 1))\ndone\n```\n\n### select循环\n\n```shell\nselect answer in elem1 elem2 ... elemN\ndo\n  ### 语句\ndone\n```\n\n`select`会打印`elem1..elemN`以及它们的序列号到屏幕上，之后会提示用户输入。\n\n```shell\nPS3=\"Choose the package manager: \"\nselect ITEM in bower npm gem pip\ndo\necho -n \"Enter the package name: \" && read PACKAGE\ncase ${ITEM} in\n  bower) bower install ${PACKAGE} ;;\n  npm) npm install ${PACKAGE} ;;\n  gem) gem install ${PACKAGE} ;;\n  pip) pip install ${PACKAGE} ;;\nesac\nbreak # 避免无限循环\ndone\n```\n\n运行这个脚本，会得到如下输出：\n\n```shell\n$ ./my_script\n1) bower\n2) npm\n3) gem\n4) pip\nChoose the package manager: 2\nEnter the package name: gitbook-cli\n```\n\n## 函数\n\n```shell\ncalc(){\n  PS3=\"choose the oper: \"\n  select oper in + - \\* / # 生成操作符选择菜单\n  do\n  echo -n \"enter first num: \" && read x # 读取输入参数\n  echo -n \"enter second num: \" && read y # 读取输入参数\n  exec\n  case ${oper} in\n    \"+\")\n      return $((${x} + ${y}))\n    ;;\n    \"-\")\n      return $((${x} - ${y}))\n    ;;\n    \"*\")\n      return $((${x} * ${y}))\n    ;;\n    \"/\")\n      return $((${x} / ${y}))\n    ;;\n    *)\n      echo \"${oper} is not support!\"\n      return 0\n    ;;\n  esac\n  break\n  done\n}\ncalc\necho \"the result is: $?\" # $? 获取 calc 函数返回值\n```\n\n💡 说明：\n\n1. 函数定义时，`function` 关键字可有可无。\n2. 函数返回值 - return 返回函数返回值，返回值类型只能为整数（0-255）。如果不加 return 语句，shell 默认将以最后一条命令的运行结果，作为函数返回值。\n3. 函数返回值在调用该函数后通过 `$?` 来获得。\n4. 所有函数在使用前必须定义。这意味着必须将函数放在脚本开始部分，直至 shell 解释器首次发现它时，才可以使用。调用函数仅使用其函数名即可。\n\n### 位置参数\n\n**位置参数**是在调用一个函数并传给它参数时创建的变量。\n\n位置参数变量表：\n\n| 变量           | 描述                           |\n| -------------- | ------------------------------ |\n| `$0`           | 脚本名称                       |\n| `$1 … $9`      | 第 1 个到第 9 个参数列表       |\n| `${10} … ${N}` | 第 10 个到 N 个参数列表        |\n| `$*` or `$@`   | 除了`$0`外的所有位置参数       |\n| `$#`           | 不包括`$0`在内的位置参数的个数 |\n| `$FUNCNAME`    | 函数名称（仅在函数内部有值）   |\n\n```shell\n#!/usr/bin/env bash\n\nx=0\nif [[ -n $1 ]]; then\n  echo \"第一个参数为：$1\"\n  x=$1\nelse\n  echo \"第一个参数为空\"\nfi\n\ny=0\nif [[ -n $2 ]]; then\n  echo \"第二个参数为：$2\"\n  y=$2\nelse\n  echo \"第二个参数为空\"\nfi\n\nparamsFunction(){\n  echo \"函数第一个入参：$1\"\n  echo \"函数第二个入参：$2\"\n}\nparamsFunction ${x} ${y}\n```\n\n执行结果：\n\n```\n$ ./function-demo2.sh\n第一个参数为空\n第二个参数为空\n函数第一个入参：0\n函数第二个入参：0\n\n$ ./function-demo2.sh 10 20\n第一个参数为：10\n第二个参数为：20\n函数第一个入参：10\n函数第二个入参：20\n```\n\n### 函数处理参数\n\n另外，还有几个特殊字符用来处理参数：\n\n| 参数处理 | 说明                                             |\n| -------- | ------------------------------------------------ |\n| `$#`     | 返回参数个数                                     |\n| `$*`     | 返回所有参数                                     |\n| `$       | 参数处理                                         |\n| $!       | 后台运行的最后一个进程的 ID 号                   |\n| `$@`     | 返回所有参数                                     |\n| $-       | 返回 Shell 使用的当前选项，与 set 命令功能相同。 |\n| $?       | 函数返回值                                       |\n","slug":"shell入门","published":1,"updated":"2022-12-03T14:53:17.661Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld1tm1j5000sbsw7dwjr7pu6","content":"<h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><p>在 shell 脚本，<code>#!</code> 告诉系统其后路径所指定的程序即是解释此脚本文件的 Shell 解释器</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>执行shell脚本的方式：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">sh</span> /path/to/script.sh\n<span class=\"token function\">bash</span> /path/to/script.sh\n<span class=\"token builtin class-name\">source</span> /path/to/script.sh\n./path/to/script.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>使用<code>#！</code>标识后，如果文件具有可执行权限，可以直接通过<code>path/to/test.sh</code>执行</p>\n<h2 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h2><h3 id=\"echo\"><a href=\"#echo\" class=\"headerlink\" title=\"echo\"></a>echo</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">echo</span> -e <span class=\"token string\">\"YES<span class=\"token entity\" title=\"\\c\">\\c</span>\"</span> <span class=\"token comment\"># -e 开启转义 \\c 不换行</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"NO\"</span>\n<span class=\"token comment\">#  Output:</span>\n<span class=\"token comment\">#  YESNO</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"printf\"><a href=\"#printf\" class=\"headerlink\" title=\"printf\"></a>printf</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">printf</span> <span class=\"token string\">\"%s %s %s<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span> a b c d e f g h i j\n<span class=\"token comment\">#  Output:</span>\n<span class=\"token comment\">#  a b c</span>\n<span class=\"token comment\">#  d e f</span>\n<span class=\"token comment\">#  g h i</span>\n<span class=\"token comment\">#  j</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><p>shell 字符串可以用单引号 <code>&#39;&#39;</code>，也可以用双引号 <code>“”</code>，也可以不用引号。</p>\n<ul>\n<li>单引号的特点<ul>\n<li>单引号里不识别变量</li>\n<li>单引号里不能出现单独的单引号（使用转义符也不行），但可成对出现，作为字符串拼接使用。</li>\n</ul>\n</li>\n<li>双引号的特点<ul>\n<li>双引号里识别变量</li>\n<li>双引号里可以出现转义字符</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"单引号和双引号\"><a href=\"#单引号和双引号\" class=\"headerlink\" title=\"单引号和双引号\"></a>单引号和双引号</h3><p>当局部变量和环境变量包含空格时，它们在引号中的扩展要格外注意。随便举个例子，假如我们用<code>echo</code>来输出用户的输入：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token assign-left variable\">INPUT</span><span class=\"token operator\">=</span><span class=\"token string\">\"A string  with   strange    whitespace.\"</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$INPUT</span>   <span class=\"token comment\">### A string with strange whitespace.</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$INPUT</span>\"</span> <span class=\"token comment\">### A string  with   strange    whitespace.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>调用第一个<code>echo</code>时给了它 5 个单独的参数 —— <code>$INPUT</code> 被分成了单独的词，<code>echo</code>在每个词之间打印了一个空格。第二种情况，调用<code>echo</code>时只给了它一个参数（整个$INPUT 的值，包括其中的空格）。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token comment\"># 使用单引号拼接</span>\n<span class=\"token assign-left variable\">name1</span><span class=\"token operator\">=</span><span class=\"token string\">'white'</span>\n<span class=\"token assign-left variable\">str1</span><span class=\"token operator\">=</span><span class=\"token string\">'hello, '</span><span class=\"token variable\">$&#123;name1&#125;</span><span class=\"token string\">''</span>\n<span class=\"token assign-left variable\">str2</span><span class=\"token operator\">=</span><span class=\"token string\">'hello, $&#123;name1&#125;'</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;str1&#125;</span>_<span class=\"token variable\">$&#123;str2&#125;</span>\n<span class=\"token comment\"># Output:</span>\n<span class=\"token comment\"># hello, white_hello, $&#123;name1&#125;</span>\n\n<span class=\"token comment\"># 使用双引号拼接</span>\n<span class=\"token assign-left variable\">name2</span><span class=\"token operator\">=</span><span class=\"token string\">\"black\"</span>\n<span class=\"token assign-left variable\">str3</span><span class=\"token operator\">=</span><span class=\"token string\">\"hello, \"</span><span class=\"token variable\">$&#123;name2&#125;</span><span class=\"token string\">\"\"</span>\n<span class=\"token assign-left variable\">str4</span><span class=\"token operator\">=</span><span class=\"token string\">\"hello, <span class=\"token variable\">$&#123;name2&#125;</span>\"</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;str3&#125;</span>_<span class=\"token variable\">$&#123;str4&#125;</span>\n<span class=\"token comment\"># Output:</span>\n<span class=\"token comment\"># hello, black_hello, black</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"字符串常见操作\"><a href=\"#字符串常见操作\" class=\"headerlink\" title=\"字符串常见操作\"></a>字符串常见操作</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token comment\"># 获取字符串长度</span>\n<span class=\"token assign-left variable\">text</span><span class=\"token operator\">=</span><span class=\"token string\">\"12345\"</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;<span class=\"token operator\">#</span>text&#125;</span>\n<span class=\"token comment\"># Output:</span>\n<span class=\"token comment\"># 5</span>\n\n<span class=\"token comment\"># 截取子字符串</span>\n<span class=\"token assign-left variable\">text</span><span class=\"token operator\">=</span><span class=\"token string\">\"12345\"</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;text<span class=\"token operator\">:</span>2<span class=\"token operator\">:</span>2&#125;</span>\n<span class=\"token comment\"># Output:</span>\n<span class=\"token comment\"># 34</span>\n\n<span class=\"token comment\"># 查找子字符串</span>\n<span class=\"token assign-left variable\">text</span><span class=\"token operator\">=</span><span class=\"token string\">\"hello\"</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">expr</span> index <span class=\"token string\">\"<span class=\"token variable\">$&#123;text&#125;</span>\"</span> ll<span class=\"token variable\">`</span></span>\n\n<span class=\"token comment\"># Execute: ./str-demo5.sh</span>\n<span class=\"token comment\"># Output:</span>\n<span class=\"token comment\"># 3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h2><p>map创建方式</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 方式一</span>\n<span class=\"token builtin class-name\">declare</span> -A myMap\nmyMap<span class=\"token punctuation\">[</span><span class=\"token string\">\"my03\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"03\"</span>\n\n<span class=\"token comment\"># 方式二</span>\n<span class=\"token builtin class-name\">declare</span> -A <span class=\"token assign-left variable\">myMap</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"my01\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"01\"</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"my02\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"02\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><p>bash只支持一维数组</p>\n<h3 id=\"创建数组\"><a href=\"#创建数组\" class=\"headerlink\" title=\"创建数组\"></a>创建数组</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token comment\"># 创建数组的不同方式</span>\n<span class=\"token assign-left variable\">nums</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">2</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token assign-left variable\">colors</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>red yellow <span class=\"token string\">\"dark blue\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"输出数组所有元素\"><a href=\"#输出数组所有元素\" class=\"headerlink\" title=\"输出数组所有元素\"></a>输出数组所有元素</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;colors<span class=\"token punctuation\">[</span>*<span class=\"token punctuation\">]</span>&#125;</span>\n<span class=\"token comment\"># Output: red yellow dark blue</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;colors<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span>\n<span class=\"token comment\"># Output: red yellow dark blue</span>\n\n<span class=\"token builtin class-name\">printf</span> <span class=\"token string\">\"+ %s<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span> <span class=\"token variable\">$&#123;colors<span class=\"token punctuation\">[</span>*<span class=\"token punctuation\">]</span>&#125;</span>\n<span class=\"token comment\"># Output:</span>\n<span class=\"token comment\"># + red</span>\n<span class=\"token comment\"># + yellow</span>\n<span class=\"token comment\"># + dark</span>\n<span class=\"token comment\"># + blue</span>\n\n<span class=\"token builtin class-name\">printf</span> <span class=\"token string\">\"+ %s<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;colors<span class=\"token punctuation\">[</span>*<span class=\"token punctuation\">]</span>&#125;</span>\"</span>\n<span class=\"token comment\"># Output:</span>\n<span class=\"token comment\"># + red yellow dark blue</span>\n\n<span class=\"token builtin class-name\">printf</span> <span class=\"token string\">\"+ %s<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;colors<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span>\"</span>\n<span class=\"token comment\"># Output:</span>\n<span class=\"token comment\"># + red</span>\n<span class=\"token comment\"># + yellow</span>\n<span class=\"token comment\"># + dark blue</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"数组常见操作\"><a href=\"#数组常见操作\" class=\"headerlink\" title=\"数组常见操作\"></a>数组常见操作</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token comment\"># 访问数组部分元素</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;nums<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span>0<span class=\"token operator\">:</span>2&#125;</span>\n\n<span class=\"token comment\"># 访问数组长度</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;<span class=\"token operator\">#</span>nums<span class=\"token punctuation\">[</span>*<span class=\"token punctuation\">]</span>&#125;</span>\n<span class=\"token comment\"># Output:</span>\n<span class=\"token comment\"># 3</span>\n\n<span class=\"token comment\"># 向数组中添加元素</span>\n<span class=\"token assign-left variable\">colors</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>white <span class=\"token string\">\"<span class=\"token variable\">$&#123;colors<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span>\"</span> green black<span class=\"token punctuation\">)</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;colors<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span>\n<span class=\"token comment\"># Output:</span>\n<span class=\"token comment\"># white red yellow dark blue green black</span>\n\n<span class=\"token comment\"># 删除元素</span>\n<span class=\"token builtin class-name\">unset</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;nums<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span>\n<span class=\"token comment\"># Output:</span>\n<span class=\"token comment\"># 1 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><h3 id=\"关系运算符\"><a href=\"#关系运算符\" class=\"headerlink\" title=\"关系运算符\"></a>关系运算符</h3><p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字。</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>-eq</code></td>\n<td>检测两个数是否相等，相等返回 true。</td>\n<td><code>[ $a -eq $b ]</code>返回 false。</td>\n</tr>\n<tr>\n<td><code>-ne</code></td>\n<td>检测两个数是否相等，不相等返回 true。</td>\n<td><code>[ $a -ne $b ]</code> 返回 true。</td>\n</tr>\n<tr>\n<td><code>-gt</code></td>\n<td>检测左边的数是否大于右边的，如果是，则返回 true。</td>\n<td><code>[ $a -gt $b ]</code> 返回 false。</td>\n</tr>\n<tr>\n<td><code>-lt</code></td>\n<td>检测左边的数是否小于右边的，如果是，则返回 true。</td>\n<td><code>[ $a -lt $b ]</code> 返回 true。</td>\n</tr>\n<tr>\n<td><code>-ge</code></td>\n<td>检测左边的数是否大于等于右边的，如果是，则返回 true。</td>\n<td><code>[ $a -ge $b ]</code> 返回 false。</td>\n</tr>\n<tr>\n<td><code>-le</code></td>\n<td>检测左边的数是否小于等于右边的，如果是，则返回 true。</td>\n<td><code>[ $a -le $b ]</code>返回 true。</td>\n</tr>\n</tbody></table>\n<h3 id=\"布尔运算符\"><a href=\"#布尔运算符\" class=\"headerlink\" title=\"布尔运算符\"></a>布尔运算符</h3><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>!</code></td>\n<td>非运算，表达式为 true 则返回 false，否则返回 true。</td>\n<td><code>[ ! false ]</code> 返回 true。</td>\n</tr>\n<tr>\n<td><code>-o</code></td>\n<td>或运算，有一个表达式为 true 则返回 true。</td>\n<td><code>[ $a -lt 20 -o $b -gt 100 ]</code> 返回 true。</td>\n</tr>\n<tr>\n<td><code>-a</code></td>\n<td>与运算，两个表达式都为 true 才返回 true。</td>\n<td><code>[ $a -lt 20 -a $b -gt 100 ]</code> 返回 false。</td>\n</tr>\n</tbody></table>\n<h3 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h3><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>&amp;&amp;</code></td>\n<td>逻辑的 AND</td>\n<td><code>[[ $&#123;x&#125; -lt 100 &amp;&amp; $&#123;y&#125; -gt 100 ]]</code> 返回 false</td>\n</tr>\n</tbody></table>\n<h3 id=\"字符串运算符\"><a href=\"#字符串运算符\" class=\"headerlink\" title=\"字符串运算符\"></a>字符串运算符</h3><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>=</code></td>\n<td>检测两个字符串是否相等，相等返回 true。</td>\n<td><code>[ $a = $b ]</code> 返回 false。</td>\n</tr>\n<tr>\n<td><code>!=</code></td>\n<td>检测两个字符串是否相等，不相等返回 true。</td>\n<td><code>[ $a != $b ]</code> 返回 true。</td>\n</tr>\n<tr>\n<td><code>-z</code></td>\n<td>检测字符串长度是否为 0，为 0 返回 true。</td>\n<td><code>[ -z $a ]</code> 返回 false。</td>\n</tr>\n<tr>\n<td><code>-n</code></td>\n<td>检测字符串长度是否为 0，不为 0 返回 true。</td>\n<td><code>[ -n $a ]</code> 返回 true。</td>\n</tr>\n<tr>\n<td><code>str</code></td>\n<td>检测字符串是否为空，不为空返回 true。</td>\n<td><code>[ $a ]</code> 返回 true。</td>\n</tr>\n</tbody></table>\n<h3 id=\"文件测试运算符\"><a href=\"#文件测试运算符\" class=\"headerlink\" title=\"文件测试运算符\"></a>文件测试运算符</h3><table>\n<thead>\n<tr>\n<th align=\"left\">操作符</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">-b file</td>\n<td>检测文件是否是块设备文件，如果是，则返回 true。</td>\n<td><code>[ -b $file ]</code> 返回 false。</td>\n</tr>\n<tr>\n<td align=\"left\">-c file</td>\n<td>检测文件是否是字符设备文件，如果是，则返回 true。</td>\n<td><code>[ -c $file ]</code> 返回 false。</td>\n</tr>\n<tr>\n<td align=\"left\">-d file</td>\n<td>检测文件是否是目录，如果是，则返回 true。</td>\n<td><code>[ -d $file ]</code> 返回 false。</td>\n</tr>\n<tr>\n<td align=\"left\">-f file</td>\n<td>检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。</td>\n<td><code>[ -f $file ]</code> 返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-g file</td>\n<td>检测文件是否设置了 SGID 位，如果是，则返回 true。</td>\n<td><code>[ -g $file ]</code> 返回 false。</td>\n</tr>\n<tr>\n<td align=\"left\">-k file</td>\n<td>检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。</td>\n<td><code>[ -k $file ]</code>返回 false。</td>\n</tr>\n<tr>\n<td align=\"left\">-p file</td>\n<td>检测文件是否是有名管道，如果是，则返回 true。</td>\n<td><code>[ -p $file ]</code> 返回 false。</td>\n</tr>\n<tr>\n<td align=\"left\">-u file</td>\n<td>检测文件是否设置了 SUID 位，如果是，则返回 true。</td>\n<td><code>[ -u $file ]</code> 返回 false。</td>\n</tr>\n<tr>\n<td align=\"left\">-r file</td>\n<td>检测文件是否可读，如果是，则返回 true。</td>\n<td><code>[ -r $file ]</code> 返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-w file</td>\n<td>检测文件是否可写，如果是，则返回 true。</td>\n<td><code>[ -w $file ]</code> 返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-x file</td>\n<td>检测文件是否可执行，如果是，则返回 true。</td>\n<td><code>[ -x $file ]</code> 返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-s file</td>\n<td>检测文件是否为空（文件大小是否大于 0），不为空返回 true。</td>\n<td><code>[ -s $file ]</code> 返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-e file</td>\n<td>检测文件（包括目录）是否存在，如果是，则返回 true。</td>\n<td><code>[ -e $file ]</code> 返回 true。</td>\n</tr>\n</tbody></table>\n<h2 id=\"控制语句\"><a href=\"#控制语句\" class=\"headerlink\" title=\"控制语句\"></a>控制语句</h2><p>[]和[[]]的区别：</p>\n<p>优先考虑使用[[]]，它是内置在shell中的一个命令，支持字符串的模式匹配等，比如[[ hello &#x3D;&#x3D; hell? ]]，结果为真。</p>\n<h3 id=\"条件语句\"><a href=\"#条件语句\" class=\"headerlink\" title=\"条件语句\"></a>条件语句</h3><p>if语句</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token assign-left variable\">x</span><span class=\"token operator\">=</span><span class=\"token number\">10</span>\n<span class=\"token assign-left variable\">y</span><span class=\"token operator\">=</span><span class=\"token number\">20</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$&#123;x&#125;</span> <span class=\"token operator\">></span> <span class=\"token variable\">$&#123;y&#125;</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> > <span class=\"token variable\">$&#123;y&#125;</span>\"</span>\n<span class=\"token keyword\">elif</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$&#123;x&#125;</span> <span class=\"token operator\">&lt;</span> <span class=\"token variable\">$&#123;y&#125;</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> &lt; <span class=\"token variable\">$&#123;y&#125;</span>\"</span>\n<span class=\"token keyword\">else</span>\n   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> = <span class=\"token variable\">$&#123;y&#125;</span>\"</span>\n<span class=\"token keyword\">fi</span>\n<span class=\"token comment\"># Output: 10 &lt; 20</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>case语句</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">exec</span>\n<span class=\"token keyword\">case</span> <span class=\"token variable\">$&#123;oper&#125;</span> <span class=\"token keyword\">in</span>\n  <span class=\"token string\">\"+\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token assign-left variable\">val</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">expr</span> $<span class=\"token punctuation\">&#123;</span>x<span class=\"token punctuation\">&#125;</span> + $<span class=\"token punctuation\">&#123;</span>y<span class=\"token punctuation\">&#125;</span><span class=\"token variable\">`</span></span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> + <span class=\"token variable\">$&#123;y&#125;</span> = <span class=\"token variable\">$&#123;val&#125;</span>\"</span>\n  <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token assign-left variable\">val</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">expr</span> $<span class=\"token punctuation\">&#123;</span>x<span class=\"token punctuation\">&#125;</span> - $<span class=\"token punctuation\">&#123;</span>y<span class=\"token punctuation\">&#125;</span><span class=\"token variable\">`</span></span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> - <span class=\"token variable\">$&#123;y&#125;</span> = <span class=\"token variable\">$&#123;val&#125;</span>\"</span>\n  <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token assign-left variable\">val</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">expr</span> $<span class=\"token punctuation\">&#123;</span>x<span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">\\</span>* $<span class=\"token punctuation\">&#123;</span>y<span class=\"token punctuation\">&#125;</span><span class=\"token variable\">`</span></span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> * <span class=\"token variable\">$&#123;y&#125;</span> = <span class=\"token variable\">$&#123;val&#125;</span>\"</span>\n  <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token assign-left variable\">val</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">expr</span> $<span class=\"token punctuation\">&#123;</span>x<span class=\"token punctuation\">&#125;</span> / $<span class=\"token punctuation\">&#123;</span>y<span class=\"token punctuation\">&#125;</span><span class=\"token variable\">`</span></span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> / <span class=\"token variable\">$&#123;y&#125;</span> = <span class=\"token variable\">$&#123;val&#125;</span>\"</span>\n  <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n  *<span class=\"token punctuation\">)</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Unknown oper!\"</span>\n  <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">esac</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a>for循环</h3><p>for循环的几种使用方法</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">arg</span> <span class=\"token keyword\">in</span> elem1 elem2 <span class=\"token punctuation\">..</span>. elemN\n<span class=\"token keyword\">do</span>\n  <span class=\"token comment\">### 语句</span>\n<span class=\"token keyword\">done</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token variable\"><span class=\"token punctuation\">((</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">))</span></span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$i</span>\n<span class=\"token keyword\">done</span>\n\n<span class=\"token assign-left variable\">DIR</span><span class=\"token operator\">=</span>/home/zp\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">FILE</span> <span class=\"token keyword\">in</span> <span class=\"token variable\">$&#123;DIR&#125;</span>/*.sh<span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n  <span class=\"token function\">mv</span> <span class=\"token string\">\"<span class=\"token variable\">$FILE</span>\"</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;DIR&#125;</span>/scripts\"</span>\n<span class=\"token keyword\">done</span>\n<span class=\"token comment\"># 将 /home/zp 目录下所有 sh 文件拷贝到 /home/zp/scripts</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"while循环\"><a href=\"#while循环\" class=\"headerlink\" title=\"while循环\"></a>while循环</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$&#123;x&#125;</span> -lt <span class=\"token number\">10</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$((</span>x <span class=\"token operator\">*</span> x<span class=\"token variable\">))</span></span>\n  <span class=\"token assign-left variable\">x</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$((</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token variable\">))</span></span>\n<span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"select循环\"><a href=\"#select循环\" class=\"headerlink\" title=\"select循环\"></a>select循环</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token keyword\">select</span> <span class=\"token for-or-select variable\">answer</span> <span class=\"token keyword\">in</span> elem1 elem2 <span class=\"token punctuation\">..</span>. elemN\n<span class=\"token keyword\">do</span>\n  <span class=\"token comment\">### 语句</span>\n<span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>select</code>会打印<code>elem1..elemN</code>以及它们的序列号到屏幕上，之后会提示用户输入。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token assign-left variable\"><span class=\"token environment constant\">PS3</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"Choose the package manager: \"</span>\n<span class=\"token keyword\">select</span> <span class=\"token for-or-select variable\">ITEM</span> <span class=\"token keyword\">in</span> bower <span class=\"token function\">npm</span> gem pip\n<span class=\"token keyword\">do</span>\n<span class=\"token builtin class-name\">echo</span> -n <span class=\"token string\">\"Enter the package name: \"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">read</span> PACKAGE\n<span class=\"token keyword\">case</span> <span class=\"token variable\">$&#123;ITEM&#125;</span> <span class=\"token keyword\">in</span>\n  bower<span class=\"token punctuation\">)</span> bower <span class=\"token function\">install</span> <span class=\"token variable\">$&#123;PACKAGE&#125;</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">npm</span><span class=\"token punctuation\">)</span> <span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token variable\">$&#123;PACKAGE&#125;</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n  gem<span class=\"token punctuation\">)</span> gem <span class=\"token function\">install</span> <span class=\"token variable\">$&#123;PACKAGE&#125;</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n  pip<span class=\"token punctuation\">)</span> pip <span class=\"token function\">install</span> <span class=\"token variable\">$&#123;PACKAGE&#125;</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">esac</span>\n<span class=\"token builtin class-name\">break</span> <span class=\"token comment\"># 避免无限循环</span>\n<span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>运行这个脚本，会得到如下输出：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">$ ./my_script\n<span class=\"token number\">1</span><span class=\"token punctuation\">)</span> bower\n<span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token function\">npm</span>\n<span class=\"token number\">3</span><span class=\"token punctuation\">)</span> gem\n<span class=\"token number\">4</span><span class=\"token punctuation\">)</span> pip\nChoose the package manager: <span class=\"token number\">2</span>\nEnter the package name: gitbook-cli<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function-name function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token assign-left variable\"><span class=\"token environment constant\">PS3</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"choose the oper: \"</span>\n  <span class=\"token keyword\">select</span> <span class=\"token for-or-select variable\">oper</span> <span class=\"token keyword\">in</span> + - <span class=\"token punctuation\">\\</span>* / <span class=\"token comment\"># 生成操作符选择菜单</span>\n  <span class=\"token keyword\">do</span>\n  <span class=\"token builtin class-name\">echo</span> -n <span class=\"token string\">\"enter first num: \"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">read</span> x <span class=\"token comment\"># 读取输入参数</span>\n  <span class=\"token builtin class-name\">echo</span> -n <span class=\"token string\">\"enter second num: \"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">read</span> y <span class=\"token comment\"># 读取输入参数</span>\n  <span class=\"token builtin class-name\">exec</span>\n  <span class=\"token keyword\">case</span> <span class=\"token variable\">$&#123;oper&#125;</span> <span class=\"token keyword\">in</span>\n    <span class=\"token string\">\"+\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token builtin class-name\">return</span> <span class=\"token variable\"><span class=\"token variable\">$((</span>$&#123;x&#125; <span class=\"token operator\">+</span> $&#123;y&#125;<span class=\"token variable\">))</span></span>\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token builtin class-name\">return</span> <span class=\"token variable\"><span class=\"token variable\">$((</span>$&#123;x&#125; <span class=\"token operator\">-</span> $&#123;y&#125;<span class=\"token variable\">))</span></span>\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token builtin class-name\">return</span> <span class=\"token variable\"><span class=\"token variable\">$((</span>$&#123;x&#125; <span class=\"token operator\">*</span> $&#123;y&#125;<span class=\"token variable\">))</span></span>\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token builtin class-name\">return</span> <span class=\"token variable\"><span class=\"token variable\">$((</span>$&#123;x&#125; <span class=\"token operator\">/</span> $&#123;y&#125;<span class=\"token variable\">))</span></span>\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n    *<span class=\"token punctuation\">)</span>\n      <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;oper&#125;</span> is not support!\"</span>\n      <span class=\"token builtin class-name\">return</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">esac</span>\n  <span class=\"token builtin class-name\">break</span>\n  <span class=\"token keyword\">done</span>\n<span class=\"token punctuation\">&#125;</span>\ncalc\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"the result is: <span class=\"token variable\">$?</span>\"</span> <span class=\"token comment\"># $? 获取 calc 函数返回值</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>💡 说明：</p>\n<ol>\n<li>函数定义时，<code>function</code> 关键字可有可无。</li>\n<li>函数返回值 - return 返回函数返回值，返回值类型只能为整数（0-255）。如果不加 return 语句，shell 默认将以最后一条命令的运行结果，作为函数返回值。</li>\n<li>函数返回值在调用该函数后通过 <code>$?</code> 来获得。</li>\n<li>所有函数在使用前必须定义。这意味着必须将函数放在脚本开始部分，直至 shell 解释器首次发现它时，才可以使用。调用函数仅使用其函数名即可。</li>\n</ol>\n<h3 id=\"位置参数\"><a href=\"#位置参数\" class=\"headerlink\" title=\"位置参数\"></a>位置参数</h3><p><strong>位置参数</strong>是在调用一个函数并传给它参数时创建的变量。</p>\n<p>位置参数变量表：</p>\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>$0</code></td>\n<td>脚本名称</td>\n</tr>\n<tr>\n<td><code>$1 … $9</code></td>\n<td>第 1 个到第 9 个参数列表</td>\n</tr>\n<tr>\n<td><code>$&#123;10&#125; … $&#123;N&#125;</code></td>\n<td>第 10 个到 N 个参数列表</td>\n</tr>\n<tr>\n<td><code>$*</code> or <code>$@</code></td>\n<td>除了<code>$0</code>外的所有位置参数</td>\n</tr>\n<tr>\n<td><code>$#</code></td>\n<td>不包括<code>$0</code>在内的位置参数的个数</td>\n</tr>\n<tr>\n<td><code>$FUNCNAME</code></td>\n<td>函数名称（仅在函数内部有值）</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token shebang important\">#!/usr/bin/env bash</span>\n\n<span class=\"token assign-left variable\">x</span><span class=\"token operator\">=</span><span class=\"token number\">0</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> -n <span class=\"token variable\">$1</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"第一个参数为：<span class=\"token variable\">$1</span>\"</span>\n  <span class=\"token assign-left variable\">x</span><span class=\"token operator\">=</span><span class=\"token variable\">$1</span>\n<span class=\"token keyword\">else</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"第一个参数为空\"</span>\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token assign-left variable\">y</span><span class=\"token operator\">=</span><span class=\"token number\">0</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> -n <span class=\"token variable\">$2</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"第二个参数为：<span class=\"token variable\">$2</span>\"</span>\n  <span class=\"token assign-left variable\">y</span><span class=\"token operator\">=</span><span class=\"token variable\">$2</span>\n<span class=\"token keyword\">else</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"第二个参数为空\"</span>\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token function-name function\">paramsFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"函数第一个入参：<span class=\"token variable\">$1</span>\"</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"函数第二个入参：<span class=\"token variable\">$2</span>\"</span>\n<span class=\"token punctuation\">&#125;</span>\nparamsFunction <span class=\"token variable\">$&#123;x&#125;</span> <span class=\"token variable\">$&#123;y&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>执行结果：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">$ .&#x2F;function-demo2.sh\n第一个参数为空\n第二个参数为空\n函数第一个入参：0\n函数第二个入参：0\n\n$ .&#x2F;function-demo2.sh 10 20\n第一个参数为：10\n第二个参数为：20\n函数第一个入参：10\n函数第二个入参：20<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"函数处理参数\"><a href=\"#函数处理参数\" class=\"headerlink\" title=\"函数处理参数\"></a>函数处理参数</h3><p>另外，还有几个特殊字符用来处理参数：</p>\n<table>\n<thead>\n<tr>\n<th>参数处理</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>$#</code></td>\n<td>返回参数个数</td>\n</tr>\n<tr>\n<td><code>$*</code></td>\n<td>返回所有参数</td>\n</tr>\n<tr>\n<td>&#96;$</td>\n<td>参数处理</td>\n</tr>\n<tr>\n<td>$!</td>\n<td>后台运行的最后一个进程的 ID 号</td>\n</tr>\n<tr>\n<td><code>$@</code></td>\n<td>返回所有参数</td>\n</tr>\n<tr>\n<td>$-</td>\n<td>返回 Shell 使用的当前选项，与 set 命令功能相同。</td>\n</tr>\n<tr>\n<td>$?</td>\n<td>函数返回值</td>\n</tr>\n</tbody></table>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><p>在 shell 脚本，<code>#!</code> 告诉系统其后路径所指定的程序即是解释此脚本文件的 Shell 解释器</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>执行shell脚本的方式：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">sh</span> /path/to/script.sh\n<span class=\"token function\">bash</span> /path/to/script.sh\n<span class=\"token builtin class-name\">source</span> /path/to/script.sh\n./path/to/script.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>使用<code>#！</code>标识后，如果文件具有可执行权限，可以直接通过<code>path/to/test.sh</code>执行</p>\n<h2 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h2><h3 id=\"echo\"><a href=\"#echo\" class=\"headerlink\" title=\"echo\"></a>echo</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">echo</span> -e <span class=\"token string\">\"YES<span class=\"token entity\" title=\"\\c\">\\c</span>\"</span> <span class=\"token comment\"># -e 开启转义 \\c 不换行</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"NO\"</span>\n<span class=\"token comment\">#  Output:</span>\n<span class=\"token comment\">#  YESNO</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"printf\"><a href=\"#printf\" class=\"headerlink\" title=\"printf\"></a>printf</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">printf</span> <span class=\"token string\">\"%s %s %s<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span> a b c d e f g h i j\n<span class=\"token comment\">#  Output:</span>\n<span class=\"token comment\">#  a b c</span>\n<span class=\"token comment\">#  d e f</span>\n<span class=\"token comment\">#  g h i</span>\n<span class=\"token comment\">#  j</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><p>shell 字符串可以用单引号 <code>&#39;&#39;</code>，也可以用双引号 <code>“”</code>，也可以不用引号。</p>\n<ul>\n<li>单引号的特点<ul>\n<li>单引号里不识别变量</li>\n<li>单引号里不能出现单独的单引号（使用转义符也不行），但可成对出现，作为字符串拼接使用。</li>\n</ul>\n</li>\n<li>双引号的特点<ul>\n<li>双引号里识别变量</li>\n<li>双引号里可以出现转义字符</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"单引号和双引号\"><a href=\"#单引号和双引号\" class=\"headerlink\" title=\"单引号和双引号\"></a>单引号和双引号</h3><p>当局部变量和环境变量包含空格时，它们在引号中的扩展要格外注意。随便举个例子，假如我们用<code>echo</code>来输出用户的输入：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token assign-left variable\">INPUT</span><span class=\"token operator\">=</span><span class=\"token string\">\"A string  with   strange    whitespace.\"</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$INPUT</span>   <span class=\"token comment\">### A string with strange whitespace.</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$INPUT</span>\"</span> <span class=\"token comment\">### A string  with   strange    whitespace.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>调用第一个<code>echo</code>时给了它 5 个单独的参数 —— <code>$INPUT</code> 被分成了单独的词，<code>echo</code>在每个词之间打印了一个空格。第二种情况，调用<code>echo</code>时只给了它一个参数（整个$INPUT 的值，包括其中的空格）。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token comment\"># 使用单引号拼接</span>\n<span class=\"token assign-left variable\">name1</span><span class=\"token operator\">=</span><span class=\"token string\">'white'</span>\n<span class=\"token assign-left variable\">str1</span><span class=\"token operator\">=</span><span class=\"token string\">'hello, '</span><span class=\"token variable\">$&#123;name1&#125;</span><span class=\"token string\">''</span>\n<span class=\"token assign-left variable\">str2</span><span class=\"token operator\">=</span><span class=\"token string\">'hello, $&#123;name1&#125;'</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;str1&#125;</span>_<span class=\"token variable\">$&#123;str2&#125;</span>\n<span class=\"token comment\"># Output:</span>\n<span class=\"token comment\"># hello, white_hello, $&#123;name1&#125;</span>\n\n<span class=\"token comment\"># 使用双引号拼接</span>\n<span class=\"token assign-left variable\">name2</span><span class=\"token operator\">=</span><span class=\"token string\">\"black\"</span>\n<span class=\"token assign-left variable\">str3</span><span class=\"token operator\">=</span><span class=\"token string\">\"hello, \"</span><span class=\"token variable\">$&#123;name2&#125;</span><span class=\"token string\">\"\"</span>\n<span class=\"token assign-left variable\">str4</span><span class=\"token operator\">=</span><span class=\"token string\">\"hello, <span class=\"token variable\">$&#123;name2&#125;</span>\"</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;str3&#125;</span>_<span class=\"token variable\">$&#123;str4&#125;</span>\n<span class=\"token comment\"># Output:</span>\n<span class=\"token comment\"># hello, black_hello, black</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"字符串常见操作\"><a href=\"#字符串常见操作\" class=\"headerlink\" title=\"字符串常见操作\"></a>字符串常见操作</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token comment\"># 获取字符串长度</span>\n<span class=\"token assign-left variable\">text</span><span class=\"token operator\">=</span><span class=\"token string\">\"12345\"</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;<span class=\"token operator\">#</span>text&#125;</span>\n<span class=\"token comment\"># Output:</span>\n<span class=\"token comment\"># 5</span>\n\n<span class=\"token comment\"># 截取子字符串</span>\n<span class=\"token assign-left variable\">text</span><span class=\"token operator\">=</span><span class=\"token string\">\"12345\"</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;text<span class=\"token operator\">:</span>2<span class=\"token operator\">:</span>2&#125;</span>\n<span class=\"token comment\"># Output:</span>\n<span class=\"token comment\"># 34</span>\n\n<span class=\"token comment\"># 查找子字符串</span>\n<span class=\"token assign-left variable\">text</span><span class=\"token operator\">=</span><span class=\"token string\">\"hello\"</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">expr</span> index <span class=\"token string\">\"<span class=\"token variable\">$&#123;text&#125;</span>\"</span> ll<span class=\"token variable\">`</span></span>\n\n<span class=\"token comment\"># Execute: ./str-demo5.sh</span>\n<span class=\"token comment\"># Output:</span>\n<span class=\"token comment\"># 3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h2><p>map创建方式</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 方式一</span>\n<span class=\"token builtin class-name\">declare</span> -A myMap\nmyMap<span class=\"token punctuation\">[</span><span class=\"token string\">\"my03\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"03\"</span>\n\n<span class=\"token comment\"># 方式二</span>\n<span class=\"token builtin class-name\">declare</span> -A <span class=\"token assign-left variable\">myMap</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"my01\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"01\"</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"my02\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"02\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><p>bash只支持一维数组</p>\n<h3 id=\"创建数组\"><a href=\"#创建数组\" class=\"headerlink\" title=\"创建数组\"></a>创建数组</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token comment\"># 创建数组的不同方式</span>\n<span class=\"token assign-left variable\">nums</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">2</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token assign-left variable\">colors</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>red yellow <span class=\"token string\">\"dark blue\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"输出数组所有元素\"><a href=\"#输出数组所有元素\" class=\"headerlink\" title=\"输出数组所有元素\"></a>输出数组所有元素</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;colors<span class=\"token punctuation\">[</span>*<span class=\"token punctuation\">]</span>&#125;</span>\n<span class=\"token comment\"># Output: red yellow dark blue</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;colors<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span>\n<span class=\"token comment\"># Output: red yellow dark blue</span>\n\n<span class=\"token builtin class-name\">printf</span> <span class=\"token string\">\"+ %s<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span> <span class=\"token variable\">$&#123;colors<span class=\"token punctuation\">[</span>*<span class=\"token punctuation\">]</span>&#125;</span>\n<span class=\"token comment\"># Output:</span>\n<span class=\"token comment\"># + red</span>\n<span class=\"token comment\"># + yellow</span>\n<span class=\"token comment\"># + dark</span>\n<span class=\"token comment\"># + blue</span>\n\n<span class=\"token builtin class-name\">printf</span> <span class=\"token string\">\"+ %s<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;colors<span class=\"token punctuation\">[</span>*<span class=\"token punctuation\">]</span>&#125;</span>\"</span>\n<span class=\"token comment\"># Output:</span>\n<span class=\"token comment\"># + red yellow dark blue</span>\n\n<span class=\"token builtin class-name\">printf</span> <span class=\"token string\">\"+ %s<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;colors<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span>\"</span>\n<span class=\"token comment\"># Output:</span>\n<span class=\"token comment\"># + red</span>\n<span class=\"token comment\"># + yellow</span>\n<span class=\"token comment\"># + dark blue</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"数组常见操作\"><a href=\"#数组常见操作\" class=\"headerlink\" title=\"数组常见操作\"></a>数组常见操作</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token comment\"># 访问数组部分元素</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;nums<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span>0<span class=\"token operator\">:</span>2&#125;</span>\n\n<span class=\"token comment\"># 访问数组长度</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;<span class=\"token operator\">#</span>nums<span class=\"token punctuation\">[</span>*<span class=\"token punctuation\">]</span>&#125;</span>\n<span class=\"token comment\"># Output:</span>\n<span class=\"token comment\"># 3</span>\n\n<span class=\"token comment\"># 向数组中添加元素</span>\n<span class=\"token assign-left variable\">colors</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>white <span class=\"token string\">\"<span class=\"token variable\">$&#123;colors<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span>\"</span> green black<span class=\"token punctuation\">)</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;colors<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span>\n<span class=\"token comment\"># Output:</span>\n<span class=\"token comment\"># white red yellow dark blue green black</span>\n\n<span class=\"token comment\"># 删除元素</span>\n<span class=\"token builtin class-name\">unset</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;nums<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span>\n<span class=\"token comment\"># Output:</span>\n<span class=\"token comment\"># 1 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><h3 id=\"关系运算符\"><a href=\"#关系运算符\" class=\"headerlink\" title=\"关系运算符\"></a>关系运算符</h3><p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字。</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>-eq</code></td>\n<td>检测两个数是否相等，相等返回 true。</td>\n<td><code>[ $a -eq $b ]</code>返回 false。</td>\n</tr>\n<tr>\n<td><code>-ne</code></td>\n<td>检测两个数是否相等，不相等返回 true。</td>\n<td><code>[ $a -ne $b ]</code> 返回 true。</td>\n</tr>\n<tr>\n<td><code>-gt</code></td>\n<td>检测左边的数是否大于右边的，如果是，则返回 true。</td>\n<td><code>[ $a -gt $b ]</code> 返回 false。</td>\n</tr>\n<tr>\n<td><code>-lt</code></td>\n<td>检测左边的数是否小于右边的，如果是，则返回 true。</td>\n<td><code>[ $a -lt $b ]</code> 返回 true。</td>\n</tr>\n<tr>\n<td><code>-ge</code></td>\n<td>检测左边的数是否大于等于右边的，如果是，则返回 true。</td>\n<td><code>[ $a -ge $b ]</code> 返回 false。</td>\n</tr>\n<tr>\n<td><code>-le</code></td>\n<td>检测左边的数是否小于等于右边的，如果是，则返回 true。</td>\n<td><code>[ $a -le $b ]</code>返回 true。</td>\n</tr>\n</tbody></table>\n<h3 id=\"布尔运算符\"><a href=\"#布尔运算符\" class=\"headerlink\" title=\"布尔运算符\"></a>布尔运算符</h3><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>!</code></td>\n<td>非运算，表达式为 true 则返回 false，否则返回 true。</td>\n<td><code>[ ! false ]</code> 返回 true。</td>\n</tr>\n<tr>\n<td><code>-o</code></td>\n<td>或运算，有一个表达式为 true 则返回 true。</td>\n<td><code>[ $a -lt 20 -o $b -gt 100 ]</code> 返回 true。</td>\n</tr>\n<tr>\n<td><code>-a</code></td>\n<td>与运算，两个表达式都为 true 才返回 true。</td>\n<td><code>[ $a -lt 20 -a $b -gt 100 ]</code> 返回 false。</td>\n</tr>\n</tbody></table>\n<h3 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h3><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>&amp;&amp;</code></td>\n<td>逻辑的 AND</td>\n<td><code>[[ $&#123;x&#125; -lt 100 &amp;&amp; $&#123;y&#125; -gt 100 ]]</code> 返回 false</td>\n</tr>\n</tbody></table>\n<h3 id=\"字符串运算符\"><a href=\"#字符串运算符\" class=\"headerlink\" title=\"字符串运算符\"></a>字符串运算符</h3><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>=</code></td>\n<td>检测两个字符串是否相等，相等返回 true。</td>\n<td><code>[ $a = $b ]</code> 返回 false。</td>\n</tr>\n<tr>\n<td><code>!=</code></td>\n<td>检测两个字符串是否相等，不相等返回 true。</td>\n<td><code>[ $a != $b ]</code> 返回 true。</td>\n</tr>\n<tr>\n<td><code>-z</code></td>\n<td>检测字符串长度是否为 0，为 0 返回 true。</td>\n<td><code>[ -z $a ]</code> 返回 false。</td>\n</tr>\n<tr>\n<td><code>-n</code></td>\n<td>检测字符串长度是否为 0，不为 0 返回 true。</td>\n<td><code>[ -n $a ]</code> 返回 true。</td>\n</tr>\n<tr>\n<td><code>str</code></td>\n<td>检测字符串是否为空，不为空返回 true。</td>\n<td><code>[ $a ]</code> 返回 true。</td>\n</tr>\n</tbody></table>\n<h3 id=\"文件测试运算符\"><a href=\"#文件测试运算符\" class=\"headerlink\" title=\"文件测试运算符\"></a>文件测试运算符</h3><table>\n<thead>\n<tr>\n<th align=\"left\">操作符</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">-b file</td>\n<td>检测文件是否是块设备文件，如果是，则返回 true。</td>\n<td><code>[ -b $file ]</code> 返回 false。</td>\n</tr>\n<tr>\n<td align=\"left\">-c file</td>\n<td>检测文件是否是字符设备文件，如果是，则返回 true。</td>\n<td><code>[ -c $file ]</code> 返回 false。</td>\n</tr>\n<tr>\n<td align=\"left\">-d file</td>\n<td>检测文件是否是目录，如果是，则返回 true。</td>\n<td><code>[ -d $file ]</code> 返回 false。</td>\n</tr>\n<tr>\n<td align=\"left\">-f file</td>\n<td>检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。</td>\n<td><code>[ -f $file ]</code> 返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-g file</td>\n<td>检测文件是否设置了 SGID 位，如果是，则返回 true。</td>\n<td><code>[ -g $file ]</code> 返回 false。</td>\n</tr>\n<tr>\n<td align=\"left\">-k file</td>\n<td>检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。</td>\n<td><code>[ -k $file ]</code>返回 false。</td>\n</tr>\n<tr>\n<td align=\"left\">-p file</td>\n<td>检测文件是否是有名管道，如果是，则返回 true。</td>\n<td><code>[ -p $file ]</code> 返回 false。</td>\n</tr>\n<tr>\n<td align=\"left\">-u file</td>\n<td>检测文件是否设置了 SUID 位，如果是，则返回 true。</td>\n<td><code>[ -u $file ]</code> 返回 false。</td>\n</tr>\n<tr>\n<td align=\"left\">-r file</td>\n<td>检测文件是否可读，如果是，则返回 true。</td>\n<td><code>[ -r $file ]</code> 返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-w file</td>\n<td>检测文件是否可写，如果是，则返回 true。</td>\n<td><code>[ -w $file ]</code> 返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-x file</td>\n<td>检测文件是否可执行，如果是，则返回 true。</td>\n<td><code>[ -x $file ]</code> 返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-s file</td>\n<td>检测文件是否为空（文件大小是否大于 0），不为空返回 true。</td>\n<td><code>[ -s $file ]</code> 返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-e file</td>\n<td>检测文件（包括目录）是否存在，如果是，则返回 true。</td>\n<td><code>[ -e $file ]</code> 返回 true。</td>\n</tr>\n</tbody></table>\n<h2 id=\"控制语句\"><a href=\"#控制语句\" class=\"headerlink\" title=\"控制语句\"></a>控制语句</h2><p>[]和[[]]的区别：</p>\n<p>优先考虑使用[[]]，它是内置在shell中的一个命令，支持字符串的模式匹配等，比如[[ hello &#x3D;&#x3D; hell? ]]，结果为真。</p>\n<h3 id=\"条件语句\"><a href=\"#条件语句\" class=\"headerlink\" title=\"条件语句\"></a>条件语句</h3><p>if语句</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token assign-left variable\">x</span><span class=\"token operator\">=</span><span class=\"token number\">10</span>\n<span class=\"token assign-left variable\">y</span><span class=\"token operator\">=</span><span class=\"token number\">20</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$&#123;x&#125;</span> <span class=\"token operator\">></span> <span class=\"token variable\">$&#123;y&#125;</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> > <span class=\"token variable\">$&#123;y&#125;</span>\"</span>\n<span class=\"token keyword\">elif</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$&#123;x&#125;</span> <span class=\"token operator\">&lt;</span> <span class=\"token variable\">$&#123;y&#125;</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> &lt; <span class=\"token variable\">$&#123;y&#125;</span>\"</span>\n<span class=\"token keyword\">else</span>\n   <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> = <span class=\"token variable\">$&#123;y&#125;</span>\"</span>\n<span class=\"token keyword\">fi</span>\n<span class=\"token comment\"># Output: 10 &lt; 20</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>case语句</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">exec</span>\n<span class=\"token keyword\">case</span> <span class=\"token variable\">$&#123;oper&#125;</span> <span class=\"token keyword\">in</span>\n  <span class=\"token string\">\"+\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token assign-left variable\">val</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">expr</span> $<span class=\"token punctuation\">&#123;</span>x<span class=\"token punctuation\">&#125;</span> + $<span class=\"token punctuation\">&#123;</span>y<span class=\"token punctuation\">&#125;</span><span class=\"token variable\">`</span></span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> + <span class=\"token variable\">$&#123;y&#125;</span> = <span class=\"token variable\">$&#123;val&#125;</span>\"</span>\n  <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token assign-left variable\">val</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">expr</span> $<span class=\"token punctuation\">&#123;</span>x<span class=\"token punctuation\">&#125;</span> - $<span class=\"token punctuation\">&#123;</span>y<span class=\"token punctuation\">&#125;</span><span class=\"token variable\">`</span></span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> - <span class=\"token variable\">$&#123;y&#125;</span> = <span class=\"token variable\">$&#123;val&#125;</span>\"</span>\n  <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token assign-left variable\">val</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">expr</span> $<span class=\"token punctuation\">&#123;</span>x<span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">\\</span>* $<span class=\"token punctuation\">&#123;</span>y<span class=\"token punctuation\">&#125;</span><span class=\"token variable\">`</span></span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> * <span class=\"token variable\">$&#123;y&#125;</span> = <span class=\"token variable\">$&#123;val&#125;</span>\"</span>\n  <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token assign-left variable\">val</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">expr</span> $<span class=\"token punctuation\">&#123;</span>x<span class=\"token punctuation\">&#125;</span> / $<span class=\"token punctuation\">&#123;</span>y<span class=\"token punctuation\">&#125;</span><span class=\"token variable\">`</span></span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;x&#125;</span> / <span class=\"token variable\">$&#123;y&#125;</span> = <span class=\"token variable\">$&#123;val&#125;</span>\"</span>\n  <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n  *<span class=\"token punctuation\">)</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Unknown oper!\"</span>\n  <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">esac</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a>for循环</h3><p>for循环的几种使用方法</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">arg</span> <span class=\"token keyword\">in</span> elem1 elem2 <span class=\"token punctuation\">..</span>. elemN\n<span class=\"token keyword\">do</span>\n  <span class=\"token comment\">### 语句</span>\n<span class=\"token keyword\">done</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token variable\"><span class=\"token punctuation\">((</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">))</span></span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$i</span>\n<span class=\"token keyword\">done</span>\n\n<span class=\"token assign-left variable\">DIR</span><span class=\"token operator\">=</span>/home/zp\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">FILE</span> <span class=\"token keyword\">in</span> <span class=\"token variable\">$&#123;DIR&#125;</span>/*.sh<span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n  <span class=\"token function\">mv</span> <span class=\"token string\">\"<span class=\"token variable\">$FILE</span>\"</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;DIR&#125;</span>/scripts\"</span>\n<span class=\"token keyword\">done</span>\n<span class=\"token comment\"># 将 /home/zp 目录下所有 sh 文件拷贝到 /home/zp/scripts</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"while循环\"><a href=\"#while循环\" class=\"headerlink\" title=\"while循环\"></a>while循环</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$&#123;x&#125;</span> -lt <span class=\"token number\">10</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$((</span>x <span class=\"token operator\">*</span> x<span class=\"token variable\">))</span></span>\n  <span class=\"token assign-left variable\">x</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$((</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token variable\">))</span></span>\n<span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"select循环\"><a href=\"#select循环\" class=\"headerlink\" title=\"select循环\"></a>select循环</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token keyword\">select</span> <span class=\"token for-or-select variable\">answer</span> <span class=\"token keyword\">in</span> elem1 elem2 <span class=\"token punctuation\">..</span>. elemN\n<span class=\"token keyword\">do</span>\n  <span class=\"token comment\">### 语句</span>\n<span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>select</code>会打印<code>elem1..elemN</code>以及它们的序列号到屏幕上，之后会提示用户输入。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token assign-left variable\"><span class=\"token environment constant\">PS3</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"Choose the package manager: \"</span>\n<span class=\"token keyword\">select</span> <span class=\"token for-or-select variable\">ITEM</span> <span class=\"token keyword\">in</span> bower <span class=\"token function\">npm</span> gem pip\n<span class=\"token keyword\">do</span>\n<span class=\"token builtin class-name\">echo</span> -n <span class=\"token string\">\"Enter the package name: \"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">read</span> PACKAGE\n<span class=\"token keyword\">case</span> <span class=\"token variable\">$&#123;ITEM&#125;</span> <span class=\"token keyword\">in</span>\n  bower<span class=\"token punctuation\">)</span> bower <span class=\"token function\">install</span> <span class=\"token variable\">$&#123;PACKAGE&#125;</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">npm</span><span class=\"token punctuation\">)</span> <span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token variable\">$&#123;PACKAGE&#125;</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n  gem<span class=\"token punctuation\">)</span> gem <span class=\"token function\">install</span> <span class=\"token variable\">$&#123;PACKAGE&#125;</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n  pip<span class=\"token punctuation\">)</span> pip <span class=\"token function\">install</span> <span class=\"token variable\">$&#123;PACKAGE&#125;</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">esac</span>\n<span class=\"token builtin class-name\">break</span> <span class=\"token comment\"># 避免无限循环</span>\n<span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>运行这个脚本，会得到如下输出：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">$ ./my_script\n<span class=\"token number\">1</span><span class=\"token punctuation\">)</span> bower\n<span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token function\">npm</span>\n<span class=\"token number\">3</span><span class=\"token punctuation\">)</span> gem\n<span class=\"token number\">4</span><span class=\"token punctuation\">)</span> pip\nChoose the package manager: <span class=\"token number\">2</span>\nEnter the package name: gitbook-cli<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function-name function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token assign-left variable\"><span class=\"token environment constant\">PS3</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"choose the oper: \"</span>\n  <span class=\"token keyword\">select</span> <span class=\"token for-or-select variable\">oper</span> <span class=\"token keyword\">in</span> + - <span class=\"token punctuation\">\\</span>* / <span class=\"token comment\"># 生成操作符选择菜单</span>\n  <span class=\"token keyword\">do</span>\n  <span class=\"token builtin class-name\">echo</span> -n <span class=\"token string\">\"enter first num: \"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">read</span> x <span class=\"token comment\"># 读取输入参数</span>\n  <span class=\"token builtin class-name\">echo</span> -n <span class=\"token string\">\"enter second num: \"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">read</span> y <span class=\"token comment\"># 读取输入参数</span>\n  <span class=\"token builtin class-name\">exec</span>\n  <span class=\"token keyword\">case</span> <span class=\"token variable\">$&#123;oper&#125;</span> <span class=\"token keyword\">in</span>\n    <span class=\"token string\">\"+\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token builtin class-name\">return</span> <span class=\"token variable\"><span class=\"token variable\">$((</span>$&#123;x&#125; <span class=\"token operator\">+</span> $&#123;y&#125;<span class=\"token variable\">))</span></span>\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token builtin class-name\">return</span> <span class=\"token variable\"><span class=\"token variable\">$((</span>$&#123;x&#125; <span class=\"token operator\">-</span> $&#123;y&#125;<span class=\"token variable\">))</span></span>\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token builtin class-name\">return</span> <span class=\"token variable\"><span class=\"token variable\">$((</span>$&#123;x&#125; <span class=\"token operator\">*</span> $&#123;y&#125;<span class=\"token variable\">))</span></span>\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token builtin class-name\">return</span> <span class=\"token variable\"><span class=\"token variable\">$((</span>$&#123;x&#125; <span class=\"token operator\">/</span> $&#123;y&#125;<span class=\"token variable\">))</span></span>\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n    *<span class=\"token punctuation\">)</span>\n      <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;oper&#125;</span> is not support!\"</span>\n      <span class=\"token builtin class-name\">return</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">esac</span>\n  <span class=\"token builtin class-name\">break</span>\n  <span class=\"token keyword\">done</span>\n<span class=\"token punctuation\">&#125;</span>\ncalc\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"the result is: <span class=\"token variable\">$?</span>\"</span> <span class=\"token comment\"># $? 获取 calc 函数返回值</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>💡 说明：</p>\n<ol>\n<li>函数定义时，<code>function</code> 关键字可有可无。</li>\n<li>函数返回值 - return 返回函数返回值，返回值类型只能为整数（0-255）。如果不加 return 语句，shell 默认将以最后一条命令的运行结果，作为函数返回值。</li>\n<li>函数返回值在调用该函数后通过 <code>$?</code> 来获得。</li>\n<li>所有函数在使用前必须定义。这意味着必须将函数放在脚本开始部分，直至 shell 解释器首次发现它时，才可以使用。调用函数仅使用其函数名即可。</li>\n</ol>\n<h3 id=\"位置参数\"><a href=\"#位置参数\" class=\"headerlink\" title=\"位置参数\"></a>位置参数</h3><p><strong>位置参数</strong>是在调用一个函数并传给它参数时创建的变量。</p>\n<p>位置参数变量表：</p>\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>$0</code></td>\n<td>脚本名称</td>\n</tr>\n<tr>\n<td><code>$1 … $9</code></td>\n<td>第 1 个到第 9 个参数列表</td>\n</tr>\n<tr>\n<td><code>$&#123;10&#125; … $&#123;N&#125;</code></td>\n<td>第 10 个到 N 个参数列表</td>\n</tr>\n<tr>\n<td><code>$*</code> or <code>$@</code></td>\n<td>除了<code>$0</code>外的所有位置参数</td>\n</tr>\n<tr>\n<td><code>$#</code></td>\n<td>不包括<code>$0</code>在内的位置参数的个数</td>\n</tr>\n<tr>\n<td><code>$FUNCNAME</code></td>\n<td>函数名称（仅在函数内部有值）</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token shebang important\">#!/usr/bin/env bash</span>\n\n<span class=\"token assign-left variable\">x</span><span class=\"token operator\">=</span><span class=\"token number\">0</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> -n <span class=\"token variable\">$1</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"第一个参数为：<span class=\"token variable\">$1</span>\"</span>\n  <span class=\"token assign-left variable\">x</span><span class=\"token operator\">=</span><span class=\"token variable\">$1</span>\n<span class=\"token keyword\">else</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"第一个参数为空\"</span>\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token assign-left variable\">y</span><span class=\"token operator\">=</span><span class=\"token number\">0</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> -n <span class=\"token variable\">$2</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"第二个参数为：<span class=\"token variable\">$2</span>\"</span>\n  <span class=\"token assign-left variable\">y</span><span class=\"token operator\">=</span><span class=\"token variable\">$2</span>\n<span class=\"token keyword\">else</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"第二个参数为空\"</span>\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token function-name function\">paramsFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"函数第一个入参：<span class=\"token variable\">$1</span>\"</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"函数第二个入参：<span class=\"token variable\">$2</span>\"</span>\n<span class=\"token punctuation\">&#125;</span>\nparamsFunction <span class=\"token variable\">$&#123;x&#125;</span> <span class=\"token variable\">$&#123;y&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>执行结果：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">$ .&#x2F;function-demo2.sh\n第一个参数为空\n第二个参数为空\n函数第一个入参：0\n函数第二个入参：0\n\n$ .&#x2F;function-demo2.sh 10 20\n第一个参数为：10\n第二个参数为：20\n函数第一个入参：10\n函数第二个入参：20<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"函数处理参数\"><a href=\"#函数处理参数\" class=\"headerlink\" title=\"函数处理参数\"></a>函数处理参数</h3><p>另外，还有几个特殊字符用来处理参数：</p>\n<table>\n<thead>\n<tr>\n<th>参数处理</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>$#</code></td>\n<td>返回参数个数</td>\n</tr>\n<tr>\n<td><code>$*</code></td>\n<td>返回所有参数</td>\n</tr>\n<tr>\n<td>&#96;$</td>\n<td>参数处理</td>\n</tr>\n<tr>\n<td>$!</td>\n<td>后台运行的最后一个进程的 ID 号</td>\n</tr>\n<tr>\n<td><code>$@</code></td>\n<td>返回所有参数</td>\n</tr>\n<tr>\n<td>$-</td>\n<td>返回 Shell 使用的当前选项，与 set 命令功能相同。</td>\n</tr>\n<tr>\n<td>$?</td>\n<td>函数返回值</td>\n</tr>\n</tbody></table>\n"},{"title":"反转链表","date":"2022-03-12T11:20:16.000Z","author":"小章","summary":"给你单链表的头节点，请你反转链表，并返回反转后的链表。","_content":"\n给你单链表的头节点 `head` ，请你反转链表，并返回反转后的链表。\n\n![img](https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg)\n\n```\n输入：head = [1,2,3,4,5]\n输出：[5,4,3,2,1]\n```\n\n```python\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # 双指针迭代法\n    # def reverseList(self, head: ListNode) -> ListNode:\n    #     pre, cur = None, head\n    #     while cur:\n    #         tmp = cur.next\n    #         cur.next = pre\n    #         pre, cur = cur, tmp\n    #     return pre        \n    def reverseList(self, head: ListNode) -> ListNode:\n        if head is None or head.next is None:\n            return head\n        p = self.reverseList(head.next)\n        head.next.next = head\n        head.next = None\n        return p\n```\n\n","source":"_posts/反转链表.md","raw":"---\ntitle: 反转链表\ndate: 2022-03-12 19:20:16\nauthor: 小章\nsummary: 给你单链表的头节点，请你反转链表，并返回反转后的链表。\ncategories: 数据结构与算法\ntags: 数据结构与算法\n---\n\n给你单链表的头节点 `head` ，请你反转链表，并返回反转后的链表。\n\n![img](https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg)\n\n```\n输入：head = [1,2,3,4,5]\n输出：[5,4,3,2,1]\n```\n\n```python\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # 双指针迭代法\n    # def reverseList(self, head: ListNode) -> ListNode:\n    #     pre, cur = None, head\n    #     while cur:\n    #         tmp = cur.next\n    #         cur.next = pre\n    #         pre, cur = cur, tmp\n    #     return pre        \n    def reverseList(self, head: ListNode) -> ListNode:\n        if head is None or head.next is None:\n            return head\n        p = self.reverseList(head.next)\n        head.next.next = head\n        head.next = None\n        return p\n```\n\n","slug":"反转链表","published":1,"updated":"2022-04-15T07:18:11.740Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld1tm1j6000vbsw7fxpf549y","content":"<p>给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。</p>\n<p><img src=\"https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg\" alt=\"img\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：head &#x3D; [1,2,3,4,5]\n输出：[5,4,3,2,1]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Definition for singly-linked list.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> x\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 双指针迭代法</span>\n    <span class=\"token comment\"># def reverseList(self, head: ListNode) -> ListNode:</span>\n    <span class=\"token comment\">#     pre, cur = None, head</span>\n    <span class=\"token comment\">#     while cur:</span>\n    <span class=\"token comment\">#         tmp = cur.next</span>\n    <span class=\"token comment\">#         cur.next = pre</span>\n    <span class=\"token comment\">#         pre, cur = cur, tmp</span>\n    <span class=\"token comment\">#     return pre        </span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">:</span> ListNode<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> ListNode<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> head <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">or</span> head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> head\n        p <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>reverseList<span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">)</span>\n        head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> head\n        head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        <span class=\"token keyword\">return</span> p<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。</p>\n<p><img src=\"https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg\" alt=\"img\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：head &#x3D; [1,2,3,4,5]\n输出：[5,4,3,2,1]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Definition for singly-linked list.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> x\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 双指针迭代法</span>\n    <span class=\"token comment\"># def reverseList(self, head: ListNode) -> ListNode:</span>\n    <span class=\"token comment\">#     pre, cur = None, head</span>\n    <span class=\"token comment\">#     while cur:</span>\n    <span class=\"token comment\">#         tmp = cur.next</span>\n    <span class=\"token comment\">#         cur.next = pre</span>\n    <span class=\"token comment\">#         pre, cur = cur, tmp</span>\n    <span class=\"token comment\">#     return pre        </span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">:</span> ListNode<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> ListNode<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> head <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">or</span> head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> head\n        p <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>reverseList<span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">)</span>\n        head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> head\n        head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        <span class=\"token keyword\">return</span> p<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"_content":"pytest的参数化可以传入一个ids进行区分\n@pytest.mark.parametrize('in_data', eval(re_data), ids=[i['detail'] for i in TestData])\nfrom pydantic import BaseModel, Field   这个库可以学学\n","source":"_posts/日常笔记.md","raw":"pytest的参数化可以传入一个ids进行区分\n@pytest.mark.parametrize('in_data', eval(re_data), ids=[i['detail'] for i in TestData])\nfrom pydantic import BaseModel, Field   这个库可以学学\n","slug":"日常笔记","published":1,"date":"2023-01-18T15:29:08.319Z","updated":"2023-01-18T15:49:20.977Z","_id":"cld1tm1j7000ybsw7fnefa71e","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<p>pytest的参数化可以传入一个ids进行区分<br>@pytest.mark.parametrize(‘in_data’, eval(re_data), ids&#x3D;[i[‘detail’] for i in TestData])<br>from pydantic import BaseModel, Field   这个库可以学学</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>pytest的参数化可以传入一个ids进行区分<br>@pytest.mark.parametrize(‘in_data’, eval(re_data), ids&#x3D;[i[‘detail’] for i in TestData])<br>from pydantic import BaseModel, Field   这个库可以学学</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cld1tm1it0003bsw7grv33thl","category_id":"cld1tm1iw0007bsw780t2duw2","_id":"cld1tm1j3000kbsw7aln42kid"},{"post_id":"cld1tm1iw0006bsw7c0so834y","category_id":"cld1tm1j0000gbsw7h2cw631l","_id":"cld1tm1j4000pbsw7ecbfdk9i"},{"post_id":"cld1tm1iz000bbsw7fj8cdn4o","category_id":"cld1tm1j3000lbsw72x8y3zll","_id":"cld1tm1j7000xbsw7d9stgujf"},{"post_id":"cld1tm1j5000sbsw7dwjr7pu6","category_id":"cld1tm1j3000lbsw72x8y3zll","_id":"cld1tm1j90010bsw79vd8gm1s"},{"post_id":"cld1tm1j0000fbsw7fhetcwof","category_id":"cld1tm1j3000lbsw72x8y3zll","_id":"cld1tm1j90013bsw7e5wka5fi"},{"post_id":"cld1tm1j2000jbsw7gjw18avb","category_id":"cld1tm1j7000wbsw7fzcsda90","_id":"cld1tm1ja0016bsw72mx81gkp"},{"post_id":"cld1tm1j6000vbsw7fxpf549y","category_id":"cld1tm1j90012bsw72qwg3h9k","_id":"cld1tm1ja0019bsw7698j4wlk"}],"PostTag":[{"post_id":"cld1tm1iq0001bsw78sa3e9j9","tag_id":"cld1tm1iu0004bsw794ea4bf0","_id":"cld1tm1j0000dbsw745gsfc18"},{"post_id":"cld1tm1it0003bsw7grv33thl","tag_id":"cld1tm1iz000cbsw715s34f4d","_id":"cld1tm1j4000qbsw7760vfo2z"},{"post_id":"cld1tm1it0003bsw7grv33thl","tag_id":"cld1tm1j2000ibsw725c3bts4","_id":"cld1tm1j6000tbsw7hm4u93c5"},{"post_id":"cld1tm1iw0006bsw7c0so834y","tag_id":"cld1tm1j4000nbsw733gk97v7","_id":"cld1tm1j90011bsw7fq180poy"},{"post_id":"cld1tm1iw0006bsw7c0so834y","tag_id":"cld1tm1j2000ibsw725c3bts4","_id":"cld1tm1j90014bsw714tn8hbf"},{"post_id":"cld1tm1ix0009bsw7bsdhc0q3","tag_id":"cld1tm1j7000zbsw7apqxac5d","_id":"cld1tm1ja0017bsw7gmse9w69"},{"post_id":"cld1tm1iz000bbsw7fj8cdn4o","tag_id":"cld1tm1j90015bsw704hh79ex","_id":"cld1tm1ja001bbsw73qzn2sii"},{"post_id":"cld1tm1iz000bbsw7fj8cdn4o","tag_id":"cld1tm1j2000ibsw725c3bts4","_id":"cld1tm1ja001cbsw74bofcr8i"},{"post_id":"cld1tm1j0000fbsw7fhetcwof","tag_id":"cld1tm1ja001absw7hb5s7mqn","_id":"cld1tm1jb001fbsw77bu2eh4n"},{"post_id":"cld1tm1j0000fbsw7fhetcwof","tag_id":"cld1tm1j2000ibsw725c3bts4","_id":"cld1tm1jb001gbsw74c82fkrg"},{"post_id":"cld1tm1j1000hbsw78lawf4gj","tag_id":"cld1tm1jb001ebsw700kr2rzp","_id":"cld1tm1jb001ibsw7gyel26sg"},{"post_id":"cld1tm1j2000jbsw7gjw18avb","tag_id":"cld1tm1jb001hbsw7eycf7ual","_id":"cld1tm1jb001kbsw742a4hnei"},{"post_id":"cld1tm1j3000mbsw777290vya","tag_id":"cld1tm1jb001jbsw7h4iygg6g","_id":"cld1tm1jb001mbsw704of1rlh"},{"post_id":"cld1tm1j4000obsw7bp3dfhcr","tag_id":"cld1tm1jb001lbsw75j1idmga","_id":"cld1tm1jc001obsw7g8y1eyh9"},{"post_id":"cld1tm1j5000sbsw7dwjr7pu6","tag_id":"cld1tm1jc001nbsw757196lla","_id":"cld1tm1jc001qbsw73jgl72rr"},{"post_id":"cld1tm1j5000sbsw7dwjr7pu6","tag_id":"cld1tm1j2000ibsw725c3bts4","_id":"cld1tm1jc001rbsw795xqhlez"},{"post_id":"cld1tm1j6000vbsw7fxpf549y","tag_id":"cld1tm1jc001pbsw76vdx3p8j","_id":"cld1tm1jc001sbsw780eeebu9"}],"Tag":[{"name":"MySQL","_id":"cld1tm1iu0004bsw794ea4bf0"},{"name":"docker","_id":"cld1tm1iz000cbsw715s34f4d"},{"name":"基础","_id":"cld1tm1j2000ibsw725c3bts4"},{"name":"git","_id":"cld1tm1j4000nbsw733gk97v7"},{"name":"hexo","_id":"cld1tm1j7000zbsw7apqxac5d"},{"name":"三剑客","_id":"cld1tm1j90015bsw704hh79ex"},{"name":"linux","_id":"cld1tm1ja001absw7hb5s7mqn"},{"name":"python基础","_id":"cld1tm1jb001ebsw700kr2rzp"},{"name":"源码学习","_id":"cld1tm1jb001hbsw7eycf7ual"},{"name":"requests","_id":"cld1tm1jb001jbsw7h4iygg6g"},{"name":"数据结构","_id":"cld1tm1jb001lbsw75j1idmga"},{"name":"shell","_id":"cld1tm1jc001nbsw757196lla"},{"name":"数据结构与算法","_id":"cld1tm1jc001pbsw76vdx3p8j"}]}}