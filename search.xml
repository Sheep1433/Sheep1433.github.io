<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>grep、sed、awk三剑客</title>
      <link href="/2022/12/01/grep-sed-awk-san-jian-ke/"/>
      <url>/2022/12/01/grep-sed-awk-san-jian-ke/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> 三剑客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git笔记</title>
      <link href="/2022/11/26/git-bi-ji/"/>
      <url>/2022/11/26/git-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="git核心"><a href="#git核心" class="headerlink" title="git核心"></a>git核心</h1><p>![Screenshot_20220416_171404_tv.danmaku.bili](D:\Huawei Share\Huawei Share\Screenshot_20220416_171404_tv.danmaku.bili.jpg)</p><h1 id="git登录"><a href="#git登录" class="headerlink" title="git登录"></a>git登录</h1><p>查看当前登录账号：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git config user.name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看当前登录邮箱</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git config user.email<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改用户名和邮箱：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git config --global user.name &quot;Your_username&quot;git config --global user.email &quot;Your_email&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>初始化一个Git仓库，使用<code>git init</code>命令。</p><p>添加文件到Git仓库，分两步：</p><ol><li>使用命令<code>git add &lt;file&gt;</code>，注意，可反复多次使用，添加多个文件；</li><li>使用命令<code>git commit -m &lt;message&gt;</code>，完成。</li></ol><ul><li>要随时掌握工作区的状态，使用<code>git status</code>命令。</li><li>如果<code>git status</code>告诉你有文件被修改过，用<code>git diff</code>可以查看修改内容。</li></ul><h1 id="版本切换"><a href="#版本切换" class="headerlink" title="版本切换"></a>版本切换</h1><ul><li><code>HEAD</code>指向的版本就是当前版本，HEAD^表示上一个版本，HEAD^^表示上上个版本，HEAD~100表示往上100个版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code>，commit_id版本号不需要写全，只需要写前几个。</li><li>穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。</li><li>要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</li></ul><p>git把本地仓库推到github上</p><pre class="line-numbers language-none"><code class="language-none">git remote add origin https:&#x2F;&#x2F;github.com&#x2F;Sheep1433&#x2F;learngit.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="C:\Users\Administrator\blog\newblog\source\picture\image-20211223210005615.png" alt="image-20211223210005615"></p><pre class="line-numbers language-none"><code class="language-none">git checkout -- file 撤销对file的修改<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在本机上创建ssh key，然后在主目录的.ssh文件夹中将公钥复制到github或者gitee中即可。</p><pre class="line-numbers language-none"><code class="language-none">ssh-keygen -t rsa -C &quot;youremail@example.com&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在本地仓库目录下运行以下命令，将本地仓库和远程库关联</p><pre class="line-numbers language-none"><code class="language-none">git remote add origin git@github.com:Sheep1433&#x2F;learngit.git或者git remote add origin https:&#x2F;&#x2F;github.com&#x2F;Sheep1433&#x2F;learngit.git# git支持多种协议，如ssh和https,默认的git:&#x2F;&#x2F;使用的是ssh协议，速度快<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>将本地仓库内容推送到远程库</p><pre class="line-numbers language-none"><code class="language-none">git push -u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第一次推送master分支时，加上-u参数，会同时将本地master和远程库的master关联起来，以后的推送或拉取可以简化命令</p><p>如</p><pre class="line-numbers language-none"><code class="language-none">git push 或者 git push origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>解除本地仓库和远程库的链接</strong></p><p>查看远程库信息</p><pre class="line-numbers language-none"><code class="language-none">git remote -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后删除</p><pre class="line-numbers language-none"><code class="language-none">git remote rm origin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h1><p>创建dev分支并且切换</p><pre class="line-numbers language-none"><code class="language-none">git checkout -b dev等同于 git branch dev 加上git checkout dev也等同于git switch -c dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用git branch查看分支</p><p>在dev分支中完成代码工作后，并使用git add和git commit 提交后，切换至master分支，是无法看到dev分支的工作的，通过在master分支中使用git merge dev命令合并分支。</p><pre class="line-numbers language-none"><code class="language-none">删除分支git branch -d dev创建分支并切换git checkout -b dev查看分支git branch查看日志git log合并分支git merge dev禁用Fast-Forward模式进行合并分支git merge --no-ff -m &quot;merge with no-ff&quot; devgit stash命令的场景假设：保留工作现场git stash切换master分支  git checkout master创建新分支git checkout -b issue001git add 和git commit -m提交修复切回master分支 git switch master将issue分支合并入master分支git merge --no-ff -m &quot;merge with no-ff&quot; issue001切回dev分支git switch dev查看工作现场git stash list恢复现场并删除git stash apply和git stash drop等同于git stash pop恢复指定的stashgit stash apply stash@&#123;0&#125;删除还没有合并的分支git branch -D feature-vulcan从本地推送分支git push origin branch-name如果推送失败，先用git pull抓取在本地创建和远程分支对应的分支git checkout -b branch-name origin&#x2F;branch-name建立本地分支和远程分支的管理git branch --set-upstream-to branch-name rigin&#x2F;branch-name查看日志git log查看日志git log --pretty&#x3D;oneline --abbrev-commit打上标签git tag v1.0查看标签git tag针对指定commit id打上标签git tag v0.9 f52c633删除远程分支 git push origin --delete 远程分支名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将推送的远程库名字改成不同的，就可以将一个本地库推送到多个平台</p><pre class="line-numbers language-none"><code class="language-none">git remote add github git@github.com:Sheep1433&#x2F;learngit.gitgit remote add gitee git@github.com:Sheep1433&#x2F;learngit.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>删除github上的文件夹，在本地仓库使用git rm -r –cached 文件夹名，再使用git commit和git push</p><p>下载源码时切换版本git clone 源码， git tag 列出所有版本，git checkout 版本号</p><p>参与到别人的开源项目中</p><p>在github中fork项目，然后git clone自己的仓库，这样才能提交推送，如果想让官方接受修改，在github上pr(pull requests)</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker入门</title>
      <link href="/2022/11/26/docker-ru-men/"/>
      <url>/2022/11/26/docker-ru-men/</url>
      
        <content type="html"><![CDATA[<h2 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h2><p>不支持windows10家庭版</p><p>CentOS 安装配置</p><p>yum install -y yum-utils device-mapper-persistent-data lvm2安装依赖</p><p> yum-config-manager –add-repo <a href="http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</a>添加源</p><p>yum -y install docker-ce 安装docker</p><p>或者curl -fsSL <a href="https://get.docker.com/">https://get.docker.com</a> | bash -s docker –mirror Aliyun</p><p>此时直接使用docker ps查看进程是无效的，需要先systemctl start docker启动</p><p>设置开机自启动：systemctl enable docker</p><p>docker pull nginx或者docker pull nginx:1.17.10</p><p>docker-compose安装</p><pre class="line-numbers language-none"><code class="language-none"># curl -L https:&#x2F;&#x2F;github.com&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;1.8.1&#x2F;docker-compose-&#96;uname -s&#96;-&#96;uname -m&#96; &gt; &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose# chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker versiondocker版本信息docker infodocker系统信息docker images查看所有镜像docker search busybox 在网上搜索镜像docker pull busybOx:latest拉取下载docker save busybox &gt; busybox.tar导出docker load &lt; busybox.tar导入docker rmi busybox:latest删除镜像docker tag busybox:latest busybox:test 更改镜像名docker history busybox 查看镜像创建历史docker run -d --name&#x3D;busybox busybox:latest ping 114.114.114.114运行容器docker ps, docker ps -a查看运行的容器docker top busybox 查看容器中运行的进程docker stats busybox 查看资源占用docker start&#x2F;restart&#x2F;stop&#x2F;kill busybox 容器docker pause&#x2F;unpause busybox 暂停容器docker rm -f busybox 强制删除容器docker exec -it busybox ls执行命令docker exec -it elasticsearch &#x2F;bin&#x2F;bash在该容器下执行bash命令docker cp busyboxL&#x2F;etc&#x2F;hosts hosts复制文件docker logs -f busybox查看容器日志docker inspect busybox查看容器&#x2F;镜像的元信息docker inspect -f&#39;&#123;&#123;.Id&#125;&#125;&#39; busybox格式化输出docker build基于dockerfile在构建镜像docker commit将容器转化为镜像<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Nginx容器</p><pre class="line-numbers language-none"><code class="language-none">docker run -d --name nginx -p 8088:80 nginx1.17.9运行docker run -d --name nginx1 -p 8089:80 -v $&#123;PWD&#125;&#x2F;html:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;nginx:1.17.9挂载目录docker stop 停止<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此外，还可以利用 <code>ADD</code> 命令复制本地文件到镜像；用 <code>EXPOSE</code> 命令来向外部开放端口；用 <code>CMD</code> 命令来描述容器启动后运行的程序等。例如</p><p>当利用 <code>docker run</code> 来创建容器时，Docker 在后台运行的标准操作包括：</p><ul><li>检查本地是否存在指定的镜像，不存在就从公有仓库下载</li><li>利用镜像创建并启动一个容器</li><li>分配一个文件系统，并在只读的镜像层外面挂载一层可读写层</li><li>从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去</li><li>从地址池配置一个 ip 地址给容器</li><li>执行用户指定的应用程序</li><li>执行完毕后容器被终止</li></ul><h2 id="守护态运行："><a href="#守护态运行：" class="headerlink" title="守护态运行："></a>守护态运行：</h2><p>更多的时候，需要让 Docker 容器在后台以守护态（Daemonized）形式运行。此时，可以通过添加 <code>-d</code> 参数来实现</p><h2 id="容器重启"><a href="#容器重启" class="headerlink" title="容器重启"></a>容器重启</h2><p>处于终止状态的容器，可以通过 <code>docker start</code> 命令来重新启动。</p><p>此外，<code>docker restart</code> 命令会将一个运行态的容器终止，然后再重新启动它。</p><h2 id="Dockerfile中命令"><a href="#Dockerfile中命令" class="headerlink" title="Dockerfile中命令"></a>Dockerfile中命令</h2><h3 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h3><p>格式为 <code>RUN &lt;command&gt;</code> 或 <code>RUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</code>。</p><p>前者将在 shell 终端中运行命令，即 <code>/bin/sh -c</code>；后者则使用 <code>exec</code> 执行。指定使用其它终端可以通过第二种方式实现，例如 <code>RUN [&quot;/bin/bash&quot;, &quot;-c&quot;, &quot;echo hello&quot;]</code>。</p><p>每条 <code>RUN</code> 指令将在当前镜像基础上执行指定命令，并提交为新的镜像。当命令较长时可以使用 <code>\</code> 来换行</p><h3 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h3><p>支持三种格式</p><ul><li><code>CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]</code> 使用 <code>exec</code> 执行，推荐方式；</li><li><code>CMD command param1 param2</code> 在 <code>/bin/sh</code> 中执行，提供给需要交互的应用；</li><li><code>CMD [&quot;param1&quot;,&quot;param2&quot;]</code> 提供给 <code>ENTRYPOINT</code> 的默认参数；</li></ul><p>指定启动容器时执行的命令，每个 Dockerfile 只能有一条 <code>CMD</code> 命令。如果指定了多条命令，只有最后一条会被执行。</p><p>如果用户启动容器时候指定了运行的命令，则会覆盖掉 <code>CMD</code> 指定的命令。</p><h3 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h3><p>格式为 <code>ENV &lt;key&gt; &lt;value&gt;</code>。 指定一个环境变量，会被后续 <code>RUN</code> 指令使用，并在容器运行时保持。</p><p>例如</p><pre class="line-numbers language-none"><code class="language-none">ENV PG_MAJOR 9.3ENV PG_VERSION 9.3.4RUN curl -SL http:&#x2F;&#x2F;example.com&#x2F;postgres-$PG_VERSION.tar.xz | tar -xJC &#x2F;usr&#x2F;src&#x2F;postgress &amp;&amp; …ENV PATH &#x2F;usr&#x2F;local&#x2F;postgres-$PG_MAJOR&#x2F;bin:$PATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h3><p>格式为 <code>EXPOSE &lt;port&gt; [&lt;port&gt;...]</code>。</p><p>告诉 Docker 服务端容器暴露的端口号，供互联系统使用。在启动容器时需要通过 -P，Docker 主机会自动分配一个端口转发到指定的端口。</p><h3 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h3><p>格式为 <code>ADD &lt;src&gt; &lt;dest&gt;</code>。</p><p>该命令将复制指定的 <code>&lt;src&gt;</code> 到容器中的 <code>&lt;dest&gt;</code>。 其中 <code>&lt;src&gt;</code> 可以是Dockerfile所在目录的一个相对路径；也可以是一个 URL；还可以是一个 tar 文件（自动解压为目录）。</p><h3 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h3><p>格式为 <code>COPY &lt;src&gt; &lt;dest&gt;</code>。</p><p>复制本地主机的 <code>&lt;src&gt;</code>（为 Dockerfile 所在目录的相对路径）到容器中的 <code>&lt;dest&gt;</code>。</p><p>当使用本地目录为源目录时，推荐使用 <code>COPY</code>。</p><h3 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h3><p>格式为 <code>WORKDIR /path/to/workdir</code>。</p><p>为后续的 <code>RUN</code>、<code>CMD</code>、<code>ENTRYPOINT</code> 指令配置工作目录。</p><p>可以使用多个 <code>WORKDIR</code> 指令，后续命令如果参数是相对路径，则会基于之前命令指定的路径</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell入门</title>
      <link href="/2022/11/26/shell-ru-men/"/>
      <url>/2022/11/26/shell-ru-men/</url>
      
        <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>在 shell 脚本，<code>#!</code> 告诉系统其后路径所指定的程序即是解释此脚本文件的 Shell 解释器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行shell脚本的方式：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sh</span> /path/to/script.sh<span class="token function">bash</span> /path/to/script.sh<span class="token builtin class-name">source</span> /path/to/script.sh./path/to/script.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>#！</code>标识后，如果文件具有可执行权限，可以直接通过<code>path/to/test.sh</code>执行</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">echo</span> -e <span class="token string">"YES<span class="token entity" title="\c">\c</span>"</span> <span class="token comment"># -e 开启转义 \c 不换行</span><span class="token builtin class-name">echo</span> <span class="token string">"NO"</span><span class="token comment">#  Output:</span><span class="token comment">#  YESNO</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="printf"><a href="#printf" class="headerlink" title="printf"></a>printf</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">printf</span> <span class="token string">"%s %s %s<span class="token entity" title="\n">\n</span>"</span> a b c d e f g h i j<span class="token comment">#  Output:</span><span class="token comment">#  a b c</span><span class="token comment">#  d e f</span><span class="token comment">#  g h i</span><span class="token comment">#  j</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>shell 字符串可以用单引号 <code>&#39;&#39;</code>，也可以用双引号 <code>“”</code>，也可以不用引号。</p><ul><li>单引号的特点<ul><li>单引号里不识别变量</li><li>单引号里不能出现单独的单引号（使用转义符也不行），但可成对出现，作为字符串拼接使用。</li></ul></li><li>双引号的特点<ul><li>双引号里识别变量</li><li>双引号里可以出现转义字符</li></ul></li></ul><h3 id="单引号和双引号"><a href="#单引号和双引号" class="headerlink" title="单引号和双引号"></a>单引号和双引号</h3><p>当局部变量和环境变量包含空格时，它们在引号中的扩展要格外注意。随便举个例子，假如我们用<code>echo</code>来输出用户的输入：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token assign-left variable">INPUT</span><span class="token operator">=</span><span class="token string">"A string  with   strange    whitespace."</span><span class="token builtin class-name">echo</span> <span class="token variable">$INPUT</span>   <span class="token comment">### A string with strange whitespace.</span><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$INPUT</span>"</span> <span class="token comment">### A string  with   strange    whitespace.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>调用第一个<code>echo</code>时给了它 5 个单独的参数 —— <code>$INPUT</code> 被分成了单独的词，<code>echo</code>在每个词之间打印了一个空格。第二种情况，调用<code>echo</code>时只给了它一个参数（整个$INPUT 的值，包括其中的空格）。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 使用单引号拼接</span><span class="token assign-left variable">name1</span><span class="token operator">=</span><span class="token string">'white'</span><span class="token assign-left variable">str1</span><span class="token operator">=</span><span class="token string">'hello, '</span><span class="token variable">$&#123;name1&#125;</span><span class="token string">''</span><span class="token assign-left variable">str2</span><span class="token operator">=</span><span class="token string">'hello, $&#123;name1&#125;'</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;str1&#125;</span>_<span class="token variable">$&#123;str2&#125;</span><span class="token comment"># Output:</span><span class="token comment"># hello, white_hello, $&#123;name1&#125;</span><span class="token comment"># 使用双引号拼接</span><span class="token assign-left variable">name2</span><span class="token operator">=</span><span class="token string">"black"</span><span class="token assign-left variable">str3</span><span class="token operator">=</span><span class="token string">"hello, "</span><span class="token variable">$&#123;name2&#125;</span><span class="token string">""</span><span class="token assign-left variable">str4</span><span class="token operator">=</span><span class="token string">"hello, <span class="token variable">$&#123;name2&#125;</span>"</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;str3&#125;</span>_<span class="token variable">$&#123;str4&#125;</span><span class="token comment"># Output:</span><span class="token comment"># hello, black_hello, black</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串常见操作"><a href="#字符串常见操作" class="headerlink" title="字符串常见操作"></a>字符串常见操作</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 获取字符串长度</span><span class="token assign-left variable">text</span><span class="token operator">=</span><span class="token string">"12345"</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;<span class="token operator">#</span>text&#125;</span><span class="token comment"># Output:</span><span class="token comment"># 5</span><span class="token comment"># 截取子字符串</span><span class="token assign-left variable">text</span><span class="token operator">=</span><span class="token string">"12345"</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;text<span class="token operator">:</span>2<span class="token operator">:</span>2&#125;</span><span class="token comment"># Output:</span><span class="token comment"># 34</span><span class="token comment"># 查找子字符串</span><span class="token assign-left variable">text</span><span class="token operator">=</span><span class="token string">"hello"</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> index <span class="token string">"<span class="token variable">$&#123;text&#125;</span>"</span> ll<span class="token variable">`</span></span><span class="token comment"># Execute: ./str-demo5.sh</span><span class="token comment"># Output:</span><span class="token comment"># 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>bash只支持一维数组</p><h3 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 创建数组的不同方式</span><span class="token assign-left variable">nums</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token assign-left variable">colors</span><span class="token operator">=</span><span class="token punctuation">(</span>red yellow <span class="token string">"dark blue"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="输出数组所有元素"><a href="#输出数组所有元素" class="headerlink" title="输出数组所有元素"></a>输出数组所有元素</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;colors<span class="token punctuation">[</span>*<span class="token punctuation">]</span>&#125;</span><span class="token comment"># Output: red yellow dark blue</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;colors<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span><span class="token comment"># Output: red yellow dark blue</span><span class="token builtin class-name">printf</span> <span class="token string">"+ %s<span class="token entity" title="\n">\n</span>"</span> <span class="token variable">$&#123;colors<span class="token punctuation">[</span>*<span class="token punctuation">]</span>&#125;</span><span class="token comment"># Output:</span><span class="token comment"># + red</span><span class="token comment"># + yellow</span><span class="token comment"># + dark</span><span class="token comment"># + blue</span><span class="token builtin class-name">printf</span> <span class="token string">"+ %s<span class="token entity" title="\n">\n</span>"</span> <span class="token string">"<span class="token variable">$&#123;colors<span class="token punctuation">[</span>*<span class="token punctuation">]</span>&#125;</span>"</span><span class="token comment"># Output:</span><span class="token comment"># + red yellow dark blue</span><span class="token builtin class-name">printf</span> <span class="token string">"+ %s<span class="token entity" title="\n">\n</span>"</span> <span class="token string">"<span class="token variable">$&#123;colors<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>"</span><span class="token comment"># Output:</span><span class="token comment"># + red</span><span class="token comment"># + yellow</span><span class="token comment"># + dark blue</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数组常见操作"><a href="#数组常见操作" class="headerlink" title="数组常见操作"></a>数组常见操作</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 访问数组部分元素</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;nums<span class="token punctuation">[</span>@<span class="token punctuation">]</span><span class="token operator">:</span>0<span class="token operator">:</span>2&#125;</span><span class="token comment"># 访问数组长度</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;<span class="token operator">#</span>nums<span class="token punctuation">[</span>*<span class="token punctuation">]</span>&#125;</span><span class="token comment"># Output:</span><span class="token comment"># 3</span><span class="token comment"># 向数组中添加元素</span><span class="token assign-left variable">colors</span><span class="token operator">=</span><span class="token punctuation">(</span>white <span class="token string">"<span class="token variable">$&#123;colors<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>"</span> green black<span class="token punctuation">)</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;colors<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span><span class="token comment"># Output:</span><span class="token comment"># white red yellow dark blue green black</span><span class="token comment"># 删除元素</span><span class="token builtin class-name">unset</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;nums<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span><span class="token comment"># Output:</span><span class="token comment"># 1 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字。</p><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td><code>-eq</code></td><td>检测两个数是否相等，相等返回 true。</td><td><code>[ $a -eq $b ]</code>返回 false。</td></tr><tr><td><code>-ne</code></td><td>检测两个数是否相等，不相等返回 true。</td><td><code>[ $a -ne $b ]</code> 返回 true。</td></tr><tr><td><code>-gt</code></td><td>检测左边的数是否大于右边的，如果是，则返回 true。</td><td><code>[ $a -gt $b ]</code> 返回 false。</td></tr><tr><td><code>-lt</code></td><td>检测左边的数是否小于右边的，如果是，则返回 true。</td><td><code>[ $a -lt $b ]</code> 返回 true。</td></tr><tr><td><code>-ge</code></td><td>检测左边的数是否大于等于右边的，如果是，则返回 true。</td><td><code>[ $a -ge $b ]</code> 返回 false。</td></tr><tr><td><code>-le</code></td><td>检测左边的数是否小于等于右边的，如果是，则返回 true。</td><td><code>[ $a -le $b ]</code>返回 true。</td></tr></tbody></table><h3 id="布尔运算符"><a href="#布尔运算符" class="headerlink" title="布尔运算符"></a>布尔运算符</h3><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td><code>!</code></td><td>非运算，表达式为 true 则返回 false，否则返回 true。</td><td><code>[ ! false ]</code> 返回 true。</td></tr><tr><td><code>-o</code></td><td>或运算，有一个表达式为 true 则返回 true。</td><td><code>[ $a -lt 20 -o $b -gt 100 ]</code> 返回 true。</td></tr><tr><td><code>-a</code></td><td>与运算，两个表达式都为 true 才返回 true。</td><td><code>[ $a -lt 20 -a $b -gt 100 ]</code> 返回 false。</td></tr></tbody></table><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td><code>&amp;&amp;</code></td><td>逻辑的 AND</td><td><code>[[ $&#123;x&#125; -lt 100 &amp;&amp; $&#123;y&#125; -gt 100 ]]</code> 返回 false</td></tr></tbody></table><h3 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h3><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td><code>=</code></td><td>检测两个字符串是否相等，相等返回 true。</td><td><code>[ $a = $b ]</code> 返回 false。</td></tr><tr><td><code>!=</code></td><td>检测两个字符串是否相等，不相等返回 true。</td><td><code>[ $a != $b ]</code> 返回 true。</td></tr><tr><td><code>-z</code></td><td>检测字符串长度是否为 0，为 0 返回 true。</td><td><code>[ -z $a ]</code> 返回 false。</td></tr><tr><td><code>-n</code></td><td>检测字符串长度是否为 0，不为 0 返回 true。</td><td><code>[ -n $a ]</code> 返回 true。</td></tr><tr><td><code>str</code></td><td>检测字符串是否为空，不为空返回 true。</td><td><code>[ $a ]</code> 返回 true。</td></tr></tbody></table><h3 id="文件测试运算符"><a href="#文件测试运算符" class="headerlink" title="文件测试运算符"></a>文件测试运算符</h3><table><thead><tr><th align="left">操作符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td align="left">-b file</td><td>检测文件是否是块设备文件，如果是，则返回 true。</td><td><code>[ -b $file ]</code> 返回 false。</td></tr><tr><td align="left">-c file</td><td>检测文件是否是字符设备文件，如果是，则返回 true。</td><td><code>[ -c $file ]</code> 返回 false。</td></tr><tr><td align="left">-d file</td><td>检测文件是否是目录，如果是，则返回 true。</td><td><code>[ -d $file ]</code> 返回 false。</td></tr><tr><td align="left">-f file</td><td>检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。</td><td><code>[ -f $file ]</code> 返回 true。</td></tr><tr><td align="left">-g file</td><td>检测文件是否设置了 SGID 位，如果是，则返回 true。</td><td><code>[ -g $file ]</code> 返回 false。</td></tr><tr><td align="left">-k file</td><td>检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。</td><td><code>[ -k $file ]</code>返回 false。</td></tr><tr><td align="left">-p file</td><td>检测文件是否是有名管道，如果是，则返回 true。</td><td><code>[ -p $file ]</code> 返回 false。</td></tr><tr><td align="left">-u file</td><td>检测文件是否设置了 SUID 位，如果是，则返回 true。</td><td><code>[ -u $file ]</code> 返回 false。</td></tr><tr><td align="left">-r file</td><td>检测文件是否可读，如果是，则返回 true。</td><td><code>[ -r $file ]</code> 返回 true。</td></tr><tr><td align="left">-w file</td><td>检测文件是否可写，如果是，则返回 true。</td><td><code>[ -w $file ]</code> 返回 true。</td></tr><tr><td align="left">-x file</td><td>检测文件是否可执行，如果是，则返回 true。</td><td><code>[ -x $file ]</code> 返回 true。</td></tr><tr><td align="left">-s file</td><td>检测文件是否为空（文件大小是否大于 0），不为空返回 true。</td><td><code>[ -s $file ]</code> 返回 true。</td></tr><tr><td align="left">-e file</td><td>检测文件（包括目录）是否存在，如果是，则返回 true。</td><td><code>[ -e $file ]</code> 返回 true。</td></tr></tbody></table><h2 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h2><p>[]和[[]]的区别：</p><p>优先考虑使用[[]]，它是内置在shell中的一个命令，支持字符串的模式匹配等，比如[[ hello &#x3D;&#x3D; hell? ]]，结果为真。</p><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><p>if语句</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token assign-left variable">x</span><span class="token operator">=</span><span class="token number">10</span><span class="token assign-left variable">y</span><span class="token operator">=</span><span class="token number">20</span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$&#123;x&#125;</span> <span class="token operator">></span> <span class="token variable">$&#123;y&#125;</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>   <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$&#123;x&#125;</span> > <span class="token variable">$&#123;y&#125;</span>"</span><span class="token keyword">elif</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$&#123;x&#125;</span> <span class="token operator">&lt;</span> <span class="token variable">$&#123;y&#125;</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>   <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$&#123;x&#125;</span> &lt; <span class="token variable">$&#123;y&#125;</span>"</span><span class="token keyword">else</span>   <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$&#123;x&#125;</span> = <span class="token variable">$&#123;y&#125;</span>"</span><span class="token keyword">fi</span><span class="token comment"># Output: 10 &lt; 20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>case语句</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">exec</span><span class="token keyword">case</span> <span class="token variable">$&#123;oper&#125;</span> <span class="token keyword">in</span>  <span class="token string">"+"</span><span class="token punctuation">)</span>    <span class="token assign-left variable">val</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $<span class="token punctuation">&#123;</span>x<span class="token punctuation">&#125;</span> + $<span class="token punctuation">&#123;</span>y<span class="token punctuation">&#125;</span><span class="token variable">`</span></span>    <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$&#123;x&#125;</span> + <span class="token variable">$&#123;y&#125;</span> = <span class="token variable">$&#123;val&#125;</span>"</span>  <span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token string">"-"</span><span class="token punctuation">)</span>    <span class="token assign-left variable">val</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $<span class="token punctuation">&#123;</span>x<span class="token punctuation">&#125;</span> - $<span class="token punctuation">&#123;</span>y<span class="token punctuation">&#125;</span><span class="token variable">`</span></span>    <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$&#123;x&#125;</span> - <span class="token variable">$&#123;y&#125;</span> = <span class="token variable">$&#123;val&#125;</span>"</span>  <span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token string">"*"</span><span class="token punctuation">)</span>    <span class="token assign-left variable">val</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $<span class="token punctuation">&#123;</span>x<span class="token punctuation">&#125;</span> <span class="token punctuation">\</span>* $<span class="token punctuation">&#123;</span>y<span class="token punctuation">&#125;</span><span class="token variable">`</span></span>    <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$&#123;x&#125;</span> * <span class="token variable">$&#123;y&#125;</span> = <span class="token variable">$&#123;val&#125;</span>"</span>  <span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token string">"/"</span><span class="token punctuation">)</span>    <span class="token assign-left variable">val</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $<span class="token punctuation">&#123;</span>x<span class="token punctuation">&#125;</span> / $<span class="token punctuation">&#123;</span>y<span class="token punctuation">&#125;</span><span class="token variable">`</span></span>    <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$&#123;x&#125;</span> / <span class="token variable">$&#123;y&#125;</span> = <span class="token variable">$&#123;val&#125;</span>"</span>  <span class="token punctuation">;</span><span class="token punctuation">;</span>  *<span class="token punctuation">)</span>    <span class="token builtin class-name">echo</span> <span class="token string">"Unknown oper!"</span>  <span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>for循环的几种使用方法</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token keyword">for</span> <span class="token for-or-select variable">arg</span> <span class="token keyword">in</span> elem1 elem2 <span class="token punctuation">..</span>. elemN<span class="token keyword">do</span>  <span class="token comment">### 语句</span><span class="token keyword">done</span><span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>  <span class="token builtin class-name">echo</span> <span class="token variable">$i</span><span class="token keyword">done</span><span class="token assign-left variable">DIR</span><span class="token operator">=</span>/home/zp<span class="token keyword">for</span> <span class="token for-or-select variable">FILE</span> <span class="token keyword">in</span> <span class="token variable">$&#123;DIR&#125;</span>/*.sh<span class="token punctuation">;</span> <span class="token keyword">do</span>  <span class="token function">mv</span> <span class="token string">"<span class="token variable">$FILE</span>"</span> <span class="token string">"<span class="token variable">$&#123;DIR&#125;</span>/scripts"</span><span class="token keyword">done</span><span class="token comment"># 将 /home/zp 目录下所有 sh 文件拷贝到 /home/zp/scripts</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token keyword">while</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$&#123;x&#125;</span> -lt <span class="token number">10</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">do</span>  <span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$((</span>x <span class="token operator">*</span> x<span class="token variable">))</span></span>  <span class="token assign-left variable">x</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token variable">))</span></span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="select循环"><a href="#select循环" class="headerlink" title="select循环"></a>select循环</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token keyword">select</span> <span class="token for-or-select variable">answer</span> <span class="token keyword">in</span> elem1 elem2 <span class="token punctuation">..</span>. elemN<span class="token keyword">do</span>  <span class="token comment">### 语句</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>select</code>会打印<code>elem1..elemN</code>以及它们的序列号到屏幕上，之后会提示用户输入。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token assign-left variable"><span class="token environment constant">PS3</span></span><span class="token operator">=</span><span class="token string">"Choose the package manager: "</span><span class="token keyword">select</span> <span class="token for-or-select variable">ITEM</span> <span class="token keyword">in</span> bower <span class="token function">npm</span> gem pip<span class="token keyword">do</span><span class="token builtin class-name">echo</span> -n <span class="token string">"Enter the package name: "</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">read</span> PACKAGE<span class="token keyword">case</span> <span class="token variable">$&#123;ITEM&#125;</span> <span class="token keyword">in</span>  bower<span class="token punctuation">)</span> bower <span class="token function">install</span> <span class="token variable">$&#123;PACKAGE&#125;</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token function">npm</span><span class="token punctuation">)</span> <span class="token function">npm</span> <span class="token function">install</span> <span class="token variable">$&#123;PACKAGE&#125;</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>  gem<span class="token punctuation">)</span> gem <span class="token function">install</span> <span class="token variable">$&#123;PACKAGE&#125;</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>  pip<span class="token punctuation">)</span> pip <span class="token function">install</span> <span class="token variable">$&#123;PACKAGE&#125;</span> <span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span><span class="token builtin class-name">break</span> <span class="token comment"># 避免无限循环</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行这个脚本，会得到如下输出：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ./my_script<span class="token number">1</span><span class="token punctuation">)</span> bower<span class="token number">2</span><span class="token punctuation">)</span> <span class="token function">npm</span><span class="token number">3</span><span class="token punctuation">)</span> gem<span class="token number">4</span><span class="token punctuation">)</span> pipChoose the package manager: <span class="token number">2</span>Enter the package name: gitbook-cli<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function-name function">calc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token assign-left variable"><span class="token environment constant">PS3</span></span><span class="token operator">=</span><span class="token string">"choose the oper: "</span>  <span class="token keyword">select</span> <span class="token for-or-select variable">oper</span> <span class="token keyword">in</span> + - <span class="token punctuation">\</span>* / <span class="token comment"># 生成操作符选择菜单</span>  <span class="token keyword">do</span>  <span class="token builtin class-name">echo</span> -n <span class="token string">"enter first num: "</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">read</span> x <span class="token comment"># 读取输入参数</span>  <span class="token builtin class-name">echo</span> -n <span class="token string">"enter second num: "</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">read</span> y <span class="token comment"># 读取输入参数</span>  <span class="token builtin class-name">exec</span>  <span class="token keyword">case</span> <span class="token variable">$&#123;oper&#125;</span> <span class="token keyword">in</span>    <span class="token string">"+"</span><span class="token punctuation">)</span>      <span class="token builtin class-name">return</span> <span class="token variable"><span class="token variable">$((</span>$&#123;x&#125; <span class="token operator">+</span> $&#123;y&#125;<span class="token variable">))</span></span>    <span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token string">"-"</span><span class="token punctuation">)</span>      <span class="token builtin class-name">return</span> <span class="token variable"><span class="token variable">$((</span>$&#123;x&#125; <span class="token operator">-</span> $&#123;y&#125;<span class="token variable">))</span></span>    <span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token string">"*"</span><span class="token punctuation">)</span>      <span class="token builtin class-name">return</span> <span class="token variable"><span class="token variable">$((</span>$&#123;x&#125; <span class="token operator">*</span> $&#123;y&#125;<span class="token variable">))</span></span>    <span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token string">"/"</span><span class="token punctuation">)</span>      <span class="token builtin class-name">return</span> <span class="token variable"><span class="token variable">$((</span>$&#123;x&#125; <span class="token operator">/</span> $&#123;y&#125;<span class="token variable">))</span></span>    <span class="token punctuation">;</span><span class="token punctuation">;</span>    *<span class="token punctuation">)</span>      <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$&#123;oper&#125;</span> is not support!"</span>      <span class="token builtin class-name">return</span> <span class="token number">0</span>    <span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token keyword">esac</span>  <span class="token builtin class-name">break</span>  <span class="token keyword">done</span><span class="token punctuation">&#125;</span>calc<span class="token builtin class-name">echo</span> <span class="token string">"the result is: <span class="token variable">$?</span>"</span> <span class="token comment"># $? 获取 calc 函数返回值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>💡 说明：</p><ol><li>函数定义时，<code>function</code> 关键字可有可无。</li><li>函数返回值 - return 返回函数返回值，返回值类型只能为整数（0-255）。如果不加 return 语句，shell 默认将以最后一条命令的运行结果，作为函数返回值。</li><li>函数返回值在调用该函数后通过 <code>$?</code> 来获得。</li><li>所有函数在使用前必须定义。这意味着必须将函数放在脚本开始部分，直至 shell 解释器首次发现它时，才可以使用。调用函数仅使用其函数名即可。</li></ol><h3 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h3><p><strong>位置参数</strong>是在调用一个函数并传给它参数时创建的变量。</p><p>位置参数变量表：</p><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td><code>$0</code></td><td>脚本名称</td></tr><tr><td><code>$1 … $9</code></td><td>第 1 个到第 9 个参数列表</td></tr><tr><td><code>$&#123;10&#125; … $&#123;N&#125;</code></td><td>第 10 个到 N 个参数列表</td></tr><tr><td><code>$*</code> or <code>$@</code></td><td>除了<code>$0</code>外的所有位置参数</td></tr><tr><td><code>$#</code></td><td>不包括<code>$0</code>在内的位置参数的个数</td></tr><tr><td><code>$FUNCNAME</code></td><td>函数名称（仅在函数内部有值）</td></tr></tbody></table><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token shebang important">#!/usr/bin/env bash</span><span class="token assign-left variable">x</span><span class="token operator">=</span><span class="token number">0</span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> -n <span class="token variable">$1</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token builtin class-name">echo</span> <span class="token string">"第一个参数为：<span class="token variable">$1</span>"</span>  <span class="token assign-left variable">x</span><span class="token operator">=</span><span class="token variable">$1</span><span class="token keyword">else</span>  <span class="token builtin class-name">echo</span> <span class="token string">"第一个参数为空"</span><span class="token keyword">fi</span><span class="token assign-left variable">y</span><span class="token operator">=</span><span class="token number">0</span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> -n <span class="token variable">$2</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token builtin class-name">echo</span> <span class="token string">"第二个参数为：<span class="token variable">$2</span>"</span>  <span class="token assign-left variable">y</span><span class="token operator">=</span><span class="token variable">$2</span><span class="token keyword">else</span>  <span class="token builtin class-name">echo</span> <span class="token string">"第二个参数为空"</span><span class="token keyword">fi</span><span class="token function-name function">paramsFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token builtin class-name">echo</span> <span class="token string">"函数第一个入参：<span class="token variable">$1</span>"</span>  <span class="token builtin class-name">echo</span> <span class="token string">"函数第二个入参：<span class="token variable">$2</span>"</span><span class="token punctuation">&#125;</span>paramsFunction <span class="token variable">$&#123;x&#125;</span> <span class="token variable">$&#123;y&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果：</p><pre class="line-numbers language-none"><code class="language-none">$ .&#x2F;function-demo2.sh第一个参数为空第二个参数为空函数第一个入参：0函数第二个入参：0$ .&#x2F;function-demo2.sh 10 20第一个参数为：10第二个参数为：20函数第一个入参：10函数第二个入参：20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数处理参数"><a href="#函数处理参数" class="headerlink" title="函数处理参数"></a>函数处理参数</h3><p>另外，还有几个特殊字符用来处理参数：</p><table><thead><tr><th>参数处理</th><th>说明</th></tr></thead><tbody><tr><td><code>$#</code></td><td>返回参数个数</td></tr><tr><td><code>$*</code></td><td>返回所有参数</td></tr><tr><td>&#96;$</td><td>参数处理</td></tr><tr><td>$!</td><td>后台运行的最后一个进程的 ID 号</td></tr><tr><td><code>$@</code></td><td>返回所有参数</td></tr><tr><td>$-</td><td>返回 Shell 使用的当前选项，与 set 命令功能相同。</td></tr><tr><td>$?</td><td>函数返回值</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客搭建</title>
      <link href="/2022/11/25/hexo-bo-ke-da-jian/"/>
      <url>/2022/11/25/hexo-bo-ke-da-jian/</url>
      
        <content type="html"><![CDATA[<p>参照<a href="https://blog.csdn.net/sinat_37781304/article/details/82729029">hexo史上最全搭建教程</a>搭建了hexo个人网站。</p><h1 id="hexo简介"><a href="#hexo简介" class="headerlink" title="hexo简介"></a>hexo简介</h1><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入<a href="https://hexo.io/zh-cn/">hexo官网</a>进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。</p><h1 id="hexo搭建步骤"><a href="#hexo搭建步骤" class="headerlink" title="hexo搭建步骤"></a>hexo搭建步骤</h1><ol><li><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2></li><li><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2></li><li><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2></li><li><h2 id="GitHub创建个人仓库"><a href="#GitHub创建个人仓库" class="headerlink" title="GitHub创建个人仓库"></a>GitHub创建个人仓库</h2></li><li><h2 id="生成SSH添加到GitHub"><a href="#生成SSH添加到GitHub" class="headerlink" title="生成SSH添加到GitHub"></a>生成SSH添加到GitHub</h2></li><li><h2 id="将hexo部署到GitHub"><a href="#将hexo部署到GitHub" class="headerlink" title="将hexo部署到GitHub"></a>将hexo部署到GitHub</h2></li><li><h2 id="设置个人域名"><a href="#设置个人域名" class="headerlink" title="设置个人域名"></a>设置个人域名</h2></li><li><h2 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h2></li><li><h2 id="安装Git-1"><a href="#安装Git-1" class="headerlink" title="安装Git"></a>安装Git</h2></li><li><h2 id="安装Node-js-1"><a href="#安装Node-js-1" class="headerlink" title="安装Node.js"></a>安装Node.js</h2></li><li><h2 id="安装Hexo-1"><a href="#安装Hexo-1" class="headerlink" title="安装Hexo"></a>安装Hexo</h2></li><li><h2 id="GitHub创建个人仓库-1"><a href="#GitHub创建个人仓库-1" class="headerlink" title="GitHub创建个人仓库"></a>GitHub创建个人仓库</h2></li><li><h2 id="生成SSH添加到GitHub-1"><a href="#生成SSH添加到GitHub-1" class="headerlink" title="生成SSH添加到GitHub"></a>生成SSH添加到GitHub</h2></li><li><h2 id="将hexo部署到GitHub-1"><a href="#将hexo部署到GitHub-1" class="headerlink" title="将hexo部署到GitHub"></a>将hexo部署到GitHub</h2></li><li><h2 id="设置个人域名-1"><a href="#设置个人域名-1" class="headerlink" title="设置个人域名"></a>设置个人域名</h2></li><li><h2 id="发布文章-1"><a href="#发布文章-1" class="headerlink" title="发布文章"></a>发布文章</h2></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>requests源码学习</title>
      <link href="/2022/04/25/requests-yuan-ma-xue-xi/"/>
      <url>/2022/04/25/requests-yuan-ma-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="init-模块"><a href="#init-模块" class="headerlink" title="__init__模块"></a>__init__模块</h1><p>init总体结构只包含check_compatibility和_check_ctyptography两个函数，对版本信息进行校验</p><p>收获：</p><p>在函数内部多次assert，如果没有完全通过，则会抛出AssertError</p><p>对版本信息验证是否在2.0.0~3.0.0之间，可以使用 assert (2,0,0) &lt;&#x3D; (major, minor, patch) &lt; (3,0,0) 或者assert [2,0,0] &lt;&#x3D; (major, minor, patch) &lt; [3,0,0]，归因于python列表(元组)比较大小</p><p>导包过程中 from . import utils中的.表示当前位置</p><h1 id="compat、-internal-utils模块"><a href="#compat、-internal-utils模块" class="headerlink" title="compat、_internal_utils模块"></a>compat、_internal_utils模块</h1><p>负责python2、python3以及简单的编码处理</p><h1 id="certs模块"><a href="#certs模块" class="headerlink" title="certs模块"></a>certs模块</h1><p>CA证书相关</p><h1 id="exceptions模块"><a href="#exceptions模块" class="headerlink" title="exceptions模块"></a>exceptions模块</h1><p>异常处理模块，应用到了super、hasattr、多继承等，还有字典的pop方法，pop方法可以加一个默认返回值kwargs.pop(‘response’, None)，具体工作原理还需要结合调用时学习</p><p>cookies模块</p><p>hooks模块</p><p>packages模块</p><h1 id="status-codes模块"><a href="#status-codes模块" class="headerlink" title="status_codes模块"></a>status_codes模块</h1><p>该模块中有所有的状态信息，但是内部直接通过_init()执行，似乎没有被调用类或变量，还需要models等模块中结合学习</p><h1 id="auth模块"><a href="#auth模块" class="headerlink" title="auth模块"></a>auth模块</h1><p>身份认证相关，在models、adapter、sessions等模块中调用了，学习这几个模块再返回学习</p><h1 id="API模块"><a href="#API模块" class="headerlink" title="API模块"></a>API模块</h1><p>api模块中，包含request、get、option、post等函数，而get等通过调用request实现函数功能，而request调用的是session.request函数，同时使用with sessions.Session() as session:对session进行上下文管理，确保会话及时关闭，避免出现类似内存泄漏的情况</p><h1 id="structures模块"><a href="#structures模块" class="headerlink" title="structures模块"></a>structures模块</h1><p>新建了两种数据结构，CaseInsensitiveDict和LookupDict，其中CaseInsensitiveDict继承于MutableMapping，实现了__setitem__,<strong>getitem</strong>,<strong>delitem</strong>,<strong>iter</strong>,__len__等方法，解决大小写问题，在self._store中存储的键值形式为 “lower_key” : (“real_key”,”value”)，查询时用小写查询，同时能保留原信息，具体实现方法很值得学习</p><h1 id="session模块"><a href="#session模块" class="headerlink" title="session模块"></a>session模块</h1><ol><li><p>为什么通过requests.Session能访问sessions模块中的Session类，因为在requests库的__init__文件中导入了Session</p><p>实现了跨请求保持cookies方法，具体实现方法还没有看懂，核心在于request方法，首先通过models模块中生成Request类，再执行相应的prepare_request方法，最后执行send方法实现功能，常规通过requests.get方法不能保持cookies可能是因为在get方法中调用的是及时关闭session的请求方法</p><p>session和api中都有request、get等方法，api中的本质上仍然调用的是session的方法</p></li></ol><h1 id="models模块"><a href="#models模块" class="headerlink" title="models模块"></a>models模块</h1><p> models模块中首先创建了RequestEncodingMixin、RequestHooksMixin基类，类中只有相关方法，供后续子类调用，其中RequestHooksMixin类中使用了self.hooks属性，hooks属性由其子类创建，因此此处使用了Mixin模式，并且父类调用了子类的属性。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">RequestHooksMixin</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">register_hook</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">,</span> hook<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Properly register a hook."""</span>        <span class="token keyword">if</span> event <span class="token keyword">not</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>hooks<span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">'Unsupported event specified, with event name "%s"'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>hook<span class="token punctuation">,</span> Callable<span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>hooks<span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>hook<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此外用到了Callable，这是一种可调用执行对象，并且可以执行参数，也就是在对象后面使用小括号执行代码，那么这个对象就是Callable对象，callable包含函数、类、类里的方法、实现了__callable__方法的实例对象</p><pre class="line-numbers language-python3" data-language="python3"><code class="language-python3">class Stu(object):    def __init__(self, name):        self.name &#x3D; name    def __call__(self, *args, **kwargs):        self.run()    def run(self):        print(&#39;&#123;name&#125; is running&#39;.format(name&#x3D;self.name))stu &#x3D; Stu(&#39;小明&#39;)print(callable(stu))    # Truestu() <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个stu就是实例对象，但是在内部实现了__callable__方法，就可以像函数一样调用</p><p>在该模块中定义了request和response类，并实现了相关方法</p>]]></content>
      
      
      <categories>
          
          <category> requests </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>requests学习</title>
      <link href="/2022/04/17/requests-xue-xi/"/>
      <url>/2022/04/17/requests-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="init-模块"><a href="#init-模块" class="headerlink" title="__init__模块"></a>__init__模块</h1><p>init总体结构只包含check_compatibility和_check_ctyptography两个函数，对版本信息进行校验</p><p>收获：</p><p>在函数内部多次assert，如果没有完全通过，则会抛出AssertError</p><p>对版本信息验证是否在2.0.0~3.0.0之间，可以使用 assert (2,0,0) &lt;&#x3D; (major, minor, patch) &lt; (3,0,0) 或者assert [2,0,0] &lt;&#x3D; (major, minor, patch) &lt; [3,0,0]，归因于python列表(元组)比较大小</p><p>导包过程中 from . import utils中的.表示当前位置</p><h1 id="compat、-internal-utils模块"><a href="#compat、-internal-utils模块" class="headerlink" title="compat、_internal_utils模块"></a>compat、_internal_utils模块</h1><p>负责python2、python3以及简单的编码处理</p><h1 id="certs模块"><a href="#certs模块" class="headerlink" title="certs模块"></a>certs模块</h1><p>CA证书相关</p><h1 id="exceptions模块"><a href="#exceptions模块" class="headerlink" title="exceptions模块"></a>exceptions模块</h1><p>异常处理模块，应用到了super、hasattr、多继承等，还有字典的pop方法，pop方法可以加一个默认返回值kwargs.pop(‘response’, None)，具体工作原理还需要结合调用时学习</p><p>cookies模块</p><p>hooks模块</p><p>packages模块</p><h1 id="status-codes模块"><a href="#status-codes模块" class="headerlink" title="status_codes模块"></a>status_codes模块</h1><p>该模块中有所有的状态信息，但是内部直接通过_init()执行，似乎没有被调用类或变量，还需要models等模块中结合学习</p><h1 id="auth模块"><a href="#auth模块" class="headerlink" title="auth模块"></a>auth模块</h1><p>身份认证相关，在models、adapter、sessions等模块中调用了，学习这几个模块再返回学习</p><h1 id="API模块"><a href="#API模块" class="headerlink" title="API模块"></a>API模块</h1><p>api模块中，包含request、get、option、post等函数，而get等通过调用request实现函数功能，而request调用的是session.request函数，同时使用with sessions.Session() as session:对session进行上下文管理，确保会话及时关闭，避免出现类似内存泄漏的情况</p><h1 id="structures模块"><a href="#structures模块" class="headerlink" title="structures模块"></a>structures模块</h1><p>新建了两种数据结构，CaseInsensitiveDict和LookupDict，其中CaseInsensitiveDict继承于MutableMapping，实现了__setitem__,<strong>getitem</strong>,<strong>delitem</strong>,<strong>iter</strong>,__len__等方法，解决大小写问题，在self._store中存储的键值形式为 “lower_key” : (“real_key”,”value”)，查询时用小写查询，同时能保留原信息，具体实现方法很值得学习</p><h1 id="session模块"><a href="#session模块" class="headerlink" title="session模块"></a>session模块</h1><h1 id="models模块"><a href="#models模块" class="headerlink" title="models模块"></a>models模块</h1><p> models模块中首先创建了RequestEncodingMixin、RequestHooksMixin基类，类中只有相关方法，供后续子类调用，其中RequestHooksMixin类中使用了self.hooks属性，hooks属性由其子类创建，因此此处使用了Mixin模式，并且父类调用了子类的属性。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">RequestHooksMixin</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">register_hook</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">,</span> hook<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Properly register a hook."""</span>        <span class="token keyword">if</span> event <span class="token keyword">not</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>hooks<span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">'Unsupported event specified, with event name "%s"'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>hook<span class="token punctuation">,</span> Callable<span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>hooks<span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>hook<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此外用到了Callable，这是一种可调用执行对象，并且可以执行参数，也就是在对象后面使用小括号执行代码，那么这个对象就是Callable对象，callable包含函数、类、类里的方法、实现了__callable__方法的实例对象</p><pre class="line-numbers language-python3" data-language="python3"><code class="language-python3">class Stu(object):    def __init__(self, name):        self.name &#x3D; name    def __call__(self, *args, **kwargs):        self.run()    def run(self):        print(&#39;&#123;name&#125; is running&#39;.format(name&#x3D;self.name))stu &#x3D; Stu(&#39;小明&#39;)print(callable(stu))    # Truestu() <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个stu就是实例对象，但是在内部实现了__callable__方法，就可以像函数一样调用</p>]]></content>
      
      
      
        <tags>
            
            <tag> requests </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反转链表</title>
      <link href="/2022/03/12/fan-zhuan-lian-biao/"/>
      <url>/2022/03/12/fan-zhuan-lian-biao/</url>
      
        <content type="html"><![CDATA[<p>给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。</p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg" alt="img"></p><pre class="line-numbers language-none"><code class="language-none">输入：head &#x3D; [1,2,3,4,5]输出：[5,4,3,2,1]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Definition for singly-linked list.</span><span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> x        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token comment"># 双指针迭代法</span>    <span class="token comment"># def reverseList(self, head: ListNode) -> ListNode:</span>    <span class="token comment">#     pre, cur = None, head</span>    <span class="token comment">#     while cur:</span>    <span class="token comment">#         tmp = cur.next</span>    <span class="token comment">#         cur.next = pre</span>    <span class="token comment">#         pre, cur = cur, tmp</span>    <span class="token comment">#     return pre        </span>    <span class="token keyword">def</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> ListNode<span class="token punctuation">:</span>        <span class="token keyword">if</span> head <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> head        p <span class="token operator">=</span> self<span class="token punctuation">.</span>reverseList<span class="token punctuation">(</span>head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">)</span>        head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> head        head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span>        <span class="token keyword">return</span> p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树的前中后序遍历.md</title>
      <link href="/2022/03/10/er-cha-shu-de-qian-zhong-hou-xu-bian-li/"/>
      <url>/2022/03/10/er-cha-shu-de-qian-zhong-hou-xu-bian-li/</url>
      
        <content type="html"><![CDATA[<p>给定一个二叉树的根节点 <code>root</code> ，返回它的 <strong>中序</strong> 遍历。</p><pre class="line-numbers language-none"><code class="language-none">输入：root &#x3D; [1,null,2,3]输出：[1,3,2]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Definition for a binary tree node.</span><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token punctuation">,</span> Optional<span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> left<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> right<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val        self<span class="token punctuation">.</span>left <span class="token operator">=</span> left        self<span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>TreeNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token comment"># 递归方法</span>        <span class="token comment"># res = []</span>        <span class="token comment"># def inOrder(node):</span>        <span class="token comment">#     if not node: return </span>        <span class="token comment">#     inOrder(node.left)</span>        <span class="token comment">#     res.append(node.val)</span>        <span class="token comment">#     inOrder(node.right)</span>                <span class="token comment"># if not root: return </span>        <span class="token comment"># inOrder(root)</span>        <span class="token comment"># return res</span>        <span class="token comment"># 迭代方法 颜色标记法</span>        WHITE<span class="token punctuation">,</span> GRAY <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>WHITE<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> stack<span class="token punctuation">:</span>            color<span class="token punctuation">,</span> node <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> node <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span> <span class="token keyword">continue</span>            <span class="token keyword">if</span> color <span class="token operator">==</span> WHITE<span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>WHITE<span class="token punctuation">,</span> node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>GRAY<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>WHITE<span class="token punctuation">,</span> node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上方法可以推广至前序和后序，只需要简单更换入栈顺序和递归顺序</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL中limit和offset的用法</title>
      <link href="/2022/03/06/mysql-zhong-limit-he-offset-de-yong-fa/"/>
      <url>/2022/03/06/mysql-zhong-limit-he-offset-de-yong-fa/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-python" data-language="python"><code class="language-python">select<span class="token operator">*</span> <span class="token keyword">from</span> article LIMIT <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span> 等价于 select <span class="token operator">*</span> <span class="token keyword">from</span> article LIMIT <span class="token number">3</span> OFFSET <span class="token number">1</span>取出第<span class="token number">2</span><span class="token operator">-</span><span class="token number">4</span>条数据select<span class="token operator">*</span> <span class="token keyword">from</span> article LIMIT <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span>  等价于 select<span class="token operator">*</span> <span class="token keyword">from</span> article LIMIT <span class="token number">3</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>map函数的使用</title>
      <link href="/2022/03/04/map-han-shu-de-shi-yong/"/>
      <url>/2022/03/04/map-han-shu-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<p><strong>map()</strong> 会根据提供的函数对指定序列做映射。</p><p>map() 函数语法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">map</span><span class="token punctuation">(</span>function<span class="token punctuation">,</span> iterable<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>python2.x版本中，返回的是列表</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">map</span><span class="token punctuation">(</span>square<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>python3.x版本中，返回的是迭代器</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">map</span><span class="token punctuation">(</span>square<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token builtin">map</span> <span class="token builtin">object</span> at <span class="token number">0x100d3d550</span><span class="token operator">></span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span>square<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
