<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo博客搭建</title>
      <link href="/2022/11/25/hexo-bo-ke-da-jian/"/>
      <url>/2022/11/25/hexo-bo-ke-da-jian/</url>
      
        <content type="html"><![CDATA[<p>参照<a href="https://blog.csdn.net/sinat_37781304/article/details/82729029">hexo史上最全搭建教程</a>搭建了hexo个人网站。</p><h1 id="hexo简介"><a href="#hexo简介" class="headerlink" title="hexo简介"></a>hexo简介</h1><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入<a href="https://hexo.io/zh-cn/">hexo官网</a>进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。</p><h1 id="hexo搭建步骤"><a href="#hexo搭建步骤" class="headerlink" title="hexo搭建步骤"></a>hexo搭建步骤</h1><ol><li><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2></li><li><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2></li><li><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2></li><li><h2 id="GitHub创建个人仓库"><a href="#GitHub创建个人仓库" class="headerlink" title="GitHub创建个人仓库"></a>GitHub创建个人仓库</h2></li><li><h2 id="生成SSH添加到GitHub"><a href="#生成SSH添加到GitHub" class="headerlink" title="生成SSH添加到GitHub"></a>生成SSH添加到GitHub</h2></li><li><h2 id="将hexo部署到GitHub"><a href="#将hexo部署到GitHub" class="headerlink" title="将hexo部署到GitHub"></a>将hexo部署到GitHub</h2></li><li><h2 id="设置个人域名"><a href="#设置个人域名" class="headerlink" title="设置个人域名"></a>设置个人域名</h2></li><li><h2 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h2></li><li><h2 id="安装Git-1"><a href="#安装Git-1" class="headerlink" title="安装Git"></a>安装Git</h2></li><li><h2 id="安装Node-js-1"><a href="#安装Node-js-1" class="headerlink" title="安装Node.js"></a>安装Node.js</h2></li><li><h2 id="安装Hexo-1"><a href="#安装Hexo-1" class="headerlink" title="安装Hexo"></a>安装Hexo</h2></li><li><h2 id="GitHub创建个人仓库-1"><a href="#GitHub创建个人仓库-1" class="headerlink" title="GitHub创建个人仓库"></a>GitHub创建个人仓库</h2></li><li><h2 id="生成SSH添加到GitHub-1"><a href="#生成SSH添加到GitHub-1" class="headerlink" title="生成SSH添加到GitHub"></a>生成SSH添加到GitHub</h2></li><li><h2 id="将hexo部署到GitHub-1"><a href="#将hexo部署到GitHub-1" class="headerlink" title="将hexo部署到GitHub"></a>将hexo部署到GitHub</h2></li><li><h2 id="设置个人域名-1"><a href="#设置个人域名-1" class="headerlink" title="设置个人域名"></a>设置个人域名</h2></li><li><h2 id="发布文章-1"><a href="#发布文章-1" class="headerlink" title="发布文章"></a>发布文章</h2></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git学习笔记</title>
      <link href="/2022/04/25/git-xue-xi-bi-ji/"/>
      <url>/2022/04/25/git-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="git核心"><a href="#git核心" class="headerlink" title="git核心"></a>git核心</h1><p>![Screenshot_20220416_171404_tv.danmaku.bili](D:\Huawei Share\Huawei Share\Screenshot_20220416_171404_tv.danmaku.bili.jpg)</p><h1 id="git登录"><a href="#git登录" class="headerlink" title="git登录"></a>git登录</h1><p>查看当前登录账号：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git config user.name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看当前登录邮箱</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git config user.email<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改用户名和邮箱：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git config --global user.name &quot;Your_username&quot;git config --global user.email &quot;Your_email&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>初始化一个Git仓库，使用<code>git init</code>命令。</p><p>添加文件到Git仓库，分两步：</p><ol><li>使用命令<code>git add &lt;file&gt;</code>，注意，可反复多次使用，添加多个文件；</li><li>使用命令<code>git commit -m &lt;message&gt;</code>，完成。</li></ol><ul><li>要随时掌握工作区的状态，使用<code>git status</code>命令。</li><li>如果<code>git status</code>告诉你有文件被修改过，用<code>git diff</code>可以查看修改内容。</li></ul><h1 id="版本切换"><a href="#版本切换" class="headerlink" title="版本切换"></a>版本切换</h1><ul><li><code>HEAD</code>指向的版本就是当前版本，HEAD^表示上一个版本，HEAD^^表示上上个版本，HEAD~100表示往上100个版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code>，commit_id版本号不需要写全，只需要写前几个。</li><li>穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。</li><li>要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</li></ul><p>git把本地仓库推到github上</p><pre class="line-numbers language-none"><code class="language-none">git remote add origin https:&#x2F;&#x2F;github.com&#x2F;Sheep1433&#x2F;learngit.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="C:\Users\DESKTOP\AppData\Roaming\Typora\typora-user-images\image-20211223210005615.png" alt="image-20211223210005615"></p><pre class="line-numbers language-none"><code class="language-none">git checkout -- file 撤销对file的修改<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在本机上创建ssh key，然后在主目录的.ssh文件夹中将公钥复制到github或者gitee中即可。</p><pre class="line-numbers language-none"><code class="language-none">ssh-keygen -t rsa -C &quot;youremail@example.com&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在本地仓库目录下运行以下命令，将本地仓库和远程库关联</p><pre class="line-numbers language-none"><code class="language-none">git remote add origin git@github.com:Sheep1433&#x2F;learngit.git或者git remote add origin https:&#x2F;&#x2F;github.com&#x2F;Sheep1433&#x2F;learngit.git# git支持多种协议，如ssh和https,默认的git:&#x2F;&#x2F;使用的是ssh协议，速度快<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>将本地仓库内容推送到远程库</p><pre class="line-numbers language-none"><code class="language-none">git push -u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第一次推送master分支时，加上-u参数，会同时将本地master和远程库的master关联起来，以后的推送或拉取可以简化命令</p><p>如</p><pre class="line-numbers language-none"><code class="language-none">git push 或者 git push origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>解除本地仓库和远程库的链接</strong></p><p>查看远程库信息</p><pre class="line-numbers language-none"><code class="language-none">git remote -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后删除</p><pre class="line-numbers language-none"><code class="language-none">git remote rm origin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h1><p>创建dev分支并且切换</p><pre class="line-numbers language-none"><code class="language-none">git checkout -b dev等同于 git branch dev 加上git checkout dev也等同于git switch -c dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用git branch查看分支</p><p>在dev分支中完成代码工作后，并使用git add和git commit 提交后，切换至master分支，是无法看到dev分支的工作的，通过在master分支中使用git merge dev命令合并分支。</p><pre class="line-numbers language-none"><code class="language-none">删除分支git branch -d dev创建分支并切换git checkout -b dev查看分支git branch查看日志git log合并分支git merge dev禁用Fast-Forward模式进行合并分支git merge --no-ff -m &quot;merge with no-ff&quot; devgit stash命令的场景假设：保留工作现场git stash切换master分支  git checkout master创建新分支git checkout -b issue001git add 和git commit -m提交修复切回master分支 git switch master将issue分支合并入master分支git merge --no-ff -m &quot;merge with no-ff&quot; issue001切回dev分支git switch dev查看工作现场git stash list恢复现场并删除git stash apply和git stash drop等同于git stash pop恢复指定的stashgit stash apply stash@&#123;0&#125;删除还没有合并的分支git branch -D feature-vulcan从本地推送分支git push origin branch-name如果推送失败，先用git pull抓取在本地创建和远程分支对应的分支git checkout -b branch-name origin&#x2F;branch-name建立本地分支和远程分支的管理git branch --set-upstream-to branch-name rigin&#x2F;branch-name查看日志git log查看日志git log --pretty&#x3D;oneline --abbrev-commit打上标签git tag v1.0查看标签git tag针对指定commit id打上标签git tag v0.9 f52c633<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将推送的远程库名字改成不同的，就可以将一个本地库推送到多个平台</p><pre class="line-numbers language-none"><code class="language-none">git remote add github git@github.com:Sheep1433&#x2F;learngit.gitgit remote add gitee git@github.com:Sheep1433&#x2F;learngit.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>参与到别人的开源项目中</p><p>在github中fork项目，然后git clone自己的仓库，这样才能提交推送，如果想让官方接受修改，在github上pr(pull requests)</p>]]></content>
      
      
      <categories>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>requests源码学习</title>
      <link href="/2022/04/25/requests-yuan-ma-xue-xi/"/>
      <url>/2022/04/25/requests-yuan-ma-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="init-模块"><a href="#init-模块" class="headerlink" title="__init__模块"></a>__init__模块</h1><p>init总体结构只包含check_compatibility和_check_ctyptography两个函数，对版本信息进行校验</p><p>收获：</p><p>在函数内部多次assert，如果没有完全通过，则会抛出AssertError</p><p>对版本信息验证是否在2.0.0~3.0.0之间，可以使用 assert (2,0,0) &lt;&#x3D; (major, minor, patch) &lt; (3,0,0) 或者assert [2,0,0] &lt;&#x3D; (major, minor, patch) &lt; [3,0,0]，归因于python列表(元组)比较大小</p><p>导包过程中 from . import utils中的.表示当前位置</p><h1 id="compat、-internal-utils模块"><a href="#compat、-internal-utils模块" class="headerlink" title="compat、_internal_utils模块"></a>compat、_internal_utils模块</h1><p>负责python2、python3以及简单的编码处理</p><h1 id="certs模块"><a href="#certs模块" class="headerlink" title="certs模块"></a>certs模块</h1><p>CA证书相关</p><h1 id="exceptions模块"><a href="#exceptions模块" class="headerlink" title="exceptions模块"></a>exceptions模块</h1><p>异常处理模块，应用到了super、hasattr、多继承等，还有字典的pop方法，pop方法可以加一个默认返回值kwargs.pop(‘response’, None)，具体工作原理还需要结合调用时学习</p><p>cookies模块</p><p>hooks模块</p><p>packages模块</p><h1 id="status-codes模块"><a href="#status-codes模块" class="headerlink" title="status_codes模块"></a>status_codes模块</h1><p>该模块中有所有的状态信息，但是内部直接通过_init()执行，似乎没有被调用类或变量，还需要models等模块中结合学习</p><h1 id="auth模块"><a href="#auth模块" class="headerlink" title="auth模块"></a>auth模块</h1><p>身份认证相关，在models、adapter、sessions等模块中调用了，学习这几个模块再返回学习</p><h1 id="API模块"><a href="#API模块" class="headerlink" title="API模块"></a>API模块</h1><p>api模块中，包含request、get、option、post等函数，而get等通过调用request实现函数功能，而request调用的是session.request函数，同时使用with sessions.Session() as session:对session进行上下文管理，确保会话及时关闭，避免出现类似内存泄漏的情况</p><h1 id="structures模块"><a href="#structures模块" class="headerlink" title="structures模块"></a>structures模块</h1><p>新建了两种数据结构，CaseInsensitiveDict和LookupDict，其中CaseInsensitiveDict继承于MutableMapping，实现了__setitem__,<strong>getitem</strong>,<strong>delitem</strong>,<strong>iter</strong>,__len__等方法，解决大小写问题，在self._store中存储的键值形式为 “lower_key” : (“real_key”,”value”)，查询时用小写查询，同时能保留原信息，具体实现方法很值得学习</p><h1 id="session模块"><a href="#session模块" class="headerlink" title="session模块"></a>session模块</h1><ol><li><p>为什么通过requests.Session能访问sessions模块中的Session类，因为在requests库的__init__文件中导入了Session</p><p>实现了跨请求保持cookies方法，具体实现方法还没有看懂，核心在于request方法，首先通过models模块中生成Request类，再执行相应的prepare_request方法，最后执行send方法实现功能，常规通过requests.get方法不能保持cookies可能是因为在get方法中调用的是及时关闭session的请求方法</p><p>session和api中都有request、get等方法，api中的本质上仍然调用的是session的方法</p></li></ol><h1 id="models模块"><a href="#models模块" class="headerlink" title="models模块"></a>models模块</h1><p> models模块中首先创建了RequestEncodingMixin、RequestHooksMixin基类，类中只有相关方法，供后续子类调用，其中RequestHooksMixin类中使用了self.hooks属性，hooks属性由其子类创建，因此此处使用了Mixin模式，并且父类调用了子类的属性。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">RequestHooksMixin</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">register_hook</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">,</span> hook<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Properly register a hook."""</span>        <span class="token keyword">if</span> event <span class="token keyword">not</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>hooks<span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">'Unsupported event specified, with event name "%s"'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>hook<span class="token punctuation">,</span> Callable<span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>hooks<span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>hook<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此外用到了Callable，这是一种可调用执行对象，并且可以执行参数，也就是在对象后面使用小括号执行代码，那么这个对象就是Callable对象，callable包含函数、类、类里的方法、实现了__callable__方法的实例对象</p><pre class="line-numbers language-python3" data-language="python3"><code class="language-python3">class Stu(object):    def __init__(self, name):        self.name &#x3D; name    def __call__(self, *args, **kwargs):        self.run()    def run(self):        print(&#39;&#123;name&#125; is running&#39;.format(name&#x3D;self.name))stu &#x3D; Stu(&#39;小明&#39;)print(callable(stu))    # Truestu() <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个stu就是实例对象，但是在内部实现了__callable__方法，就可以像函数一样调用</p><p>在该模块中定义了request和response类，并实现了相关方法</p>]]></content>
      
      
      <categories>
          
          <category> requests </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>requests学习</title>
      <link href="/2022/04/17/requests-xue-xi/"/>
      <url>/2022/04/17/requests-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="init-模块"><a href="#init-模块" class="headerlink" title="__init__模块"></a>__init__模块</h1><p>init总体结构只包含check_compatibility和_check_ctyptography两个函数，对版本信息进行校验</p><p>收获：</p><p>在函数内部多次assert，如果没有完全通过，则会抛出AssertError</p><p>对版本信息验证是否在2.0.0~3.0.0之间，可以使用 assert (2,0,0) &lt;&#x3D; (major, minor, patch) &lt; (3,0,0) 或者assert [2,0,0] &lt;&#x3D; (major, minor, patch) &lt; [3,0,0]，归因于python列表(元组)比较大小</p><p>导包过程中 from . import utils中的.表示当前位置</p><h1 id="compat、-internal-utils模块"><a href="#compat、-internal-utils模块" class="headerlink" title="compat、_internal_utils模块"></a>compat、_internal_utils模块</h1><p>负责python2、python3以及简单的编码处理</p><h1 id="certs模块"><a href="#certs模块" class="headerlink" title="certs模块"></a>certs模块</h1><p>CA证书相关</p><h1 id="exceptions模块"><a href="#exceptions模块" class="headerlink" title="exceptions模块"></a>exceptions模块</h1><p>异常处理模块，应用到了super、hasattr、多继承等，还有字典的pop方法，pop方法可以加一个默认返回值kwargs.pop(‘response’, None)，具体工作原理还需要结合调用时学习</p><p>cookies模块</p><p>hooks模块</p><p>packages模块</p><h1 id="status-codes模块"><a href="#status-codes模块" class="headerlink" title="status_codes模块"></a>status_codes模块</h1><p>该模块中有所有的状态信息，但是内部直接通过_init()执行，似乎没有被调用类或变量，还需要models等模块中结合学习</p><h1 id="auth模块"><a href="#auth模块" class="headerlink" title="auth模块"></a>auth模块</h1><p>身份认证相关，在models、adapter、sessions等模块中调用了，学习这几个模块再返回学习</p><h1 id="API模块"><a href="#API模块" class="headerlink" title="API模块"></a>API模块</h1><p>api模块中，包含request、get、option、post等函数，而get等通过调用request实现函数功能，而request调用的是session.request函数，同时使用with sessions.Session() as session:对session进行上下文管理，确保会话及时关闭，避免出现类似内存泄漏的情况</p><h1 id="structures模块"><a href="#structures模块" class="headerlink" title="structures模块"></a>structures模块</h1><p>新建了两种数据结构，CaseInsensitiveDict和LookupDict，其中CaseInsensitiveDict继承于MutableMapping，实现了__setitem__,<strong>getitem</strong>,<strong>delitem</strong>,<strong>iter</strong>,__len__等方法，解决大小写问题，在self._store中存储的键值形式为 “lower_key” : (“real_key”,”value”)，查询时用小写查询，同时能保留原信息，具体实现方法很值得学习</p><h1 id="session模块"><a href="#session模块" class="headerlink" title="session模块"></a>session模块</h1><h1 id="models模块"><a href="#models模块" class="headerlink" title="models模块"></a>models模块</h1><p> models模块中首先创建了RequestEncodingMixin、RequestHooksMixin基类，类中只有相关方法，供后续子类调用，其中RequestHooksMixin类中使用了self.hooks属性，hooks属性由其子类创建，因此此处使用了Mixin模式，并且父类调用了子类的属性。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">RequestHooksMixin</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">register_hook</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">,</span> hook<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Properly register a hook."""</span>        <span class="token keyword">if</span> event <span class="token keyword">not</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>hooks<span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">'Unsupported event specified, with event name "%s"'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>hook<span class="token punctuation">,</span> Callable<span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>hooks<span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>hook<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此外用到了Callable，这是一种可调用执行对象，并且可以执行参数，也就是在对象后面使用小括号执行代码，那么这个对象就是Callable对象，callable包含函数、类、类里的方法、实现了__callable__方法的实例对象</p><pre class="line-numbers language-python3" data-language="python3"><code class="language-python3">class Stu(object):    def __init__(self, name):        self.name &#x3D; name    def __call__(self, *args, **kwargs):        self.run()    def run(self):        print(&#39;&#123;name&#125; is running&#39;.format(name&#x3D;self.name))stu &#x3D; Stu(&#39;小明&#39;)print(callable(stu))    # Truestu() <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个stu就是实例对象，但是在内部实现了__callable__方法，就可以像函数一样调用</p>]]></content>
      
      
      
        <tags>
            
            <tag> requests </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反转链表</title>
      <link href="/2022/03/12/fan-zhuan-lian-biao/"/>
      <url>/2022/03/12/fan-zhuan-lian-biao/</url>
      
        <content type="html"><![CDATA[<p>给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。</p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg" alt="img"></p><pre class="line-numbers language-none"><code class="language-none">输入：head &#x3D; [1,2,3,4,5]输出：[5,4,3,2,1]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Definition for singly-linked list.</span><span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> x        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token comment"># 双指针迭代法</span>    <span class="token comment"># def reverseList(self, head: ListNode) -> ListNode:</span>    <span class="token comment">#     pre, cur = None, head</span>    <span class="token comment">#     while cur:</span>    <span class="token comment">#         tmp = cur.next</span>    <span class="token comment">#         cur.next = pre</span>    <span class="token comment">#         pre, cur = cur, tmp</span>    <span class="token comment">#     return pre        </span>    <span class="token keyword">def</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> ListNode<span class="token punctuation">:</span>        <span class="token keyword">if</span> head <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> head        p <span class="token operator">=</span> self<span class="token punctuation">.</span>reverseList<span class="token punctuation">(</span>head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">)</span>        head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> head        head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span>        <span class="token keyword">return</span> p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树的前中后序遍历.md</title>
      <link href="/2022/03/10/er-cha-shu-de-qian-zhong-hou-xu-bian-li/"/>
      <url>/2022/03/10/er-cha-shu-de-qian-zhong-hou-xu-bian-li/</url>
      
        <content type="html"><![CDATA[<p>给定一个二叉树的根节点 <code>root</code> ，返回它的 <strong>中序</strong> 遍历。</p><pre class="line-numbers language-none"><code class="language-none">输入：root &#x3D; [1,null,2,3]输出：[1,3,2]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Definition for a binary tree node.</span><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token punctuation">,</span> Optional<span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> left<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> right<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val        self<span class="token punctuation">.</span>left <span class="token operator">=</span> left        self<span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>TreeNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token comment"># 递归方法</span>        <span class="token comment"># res = []</span>        <span class="token comment"># def inOrder(node):</span>        <span class="token comment">#     if not node: return </span>        <span class="token comment">#     inOrder(node.left)</span>        <span class="token comment">#     res.append(node.val)</span>        <span class="token comment">#     inOrder(node.right)</span>                <span class="token comment"># if not root: return </span>        <span class="token comment"># inOrder(root)</span>        <span class="token comment"># return res</span>        <span class="token comment"># 迭代方法 颜色标记法</span>        WHITE<span class="token punctuation">,</span> GRAY <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>WHITE<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> stack<span class="token punctuation">:</span>            color<span class="token punctuation">,</span> node <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> node <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span> <span class="token keyword">continue</span>            <span class="token keyword">if</span> color <span class="token operator">==</span> WHITE<span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>WHITE<span class="token punctuation">,</span> node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>GRAY<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>WHITE<span class="token punctuation">,</span> node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上方法可以推广至前序和后序，只需要简单更换入栈顺序和递归顺序</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL中limit和offset的用法</title>
      <link href="/2022/03/06/mysql-zhong-limit-he-offset-de-yong-fa/"/>
      <url>/2022/03/06/mysql-zhong-limit-he-offset-de-yong-fa/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-python" data-language="python"><code class="language-python">select<span class="token operator">*</span> <span class="token keyword">from</span> article LIMIT <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span> 等价于 select <span class="token operator">*</span> <span class="token keyword">from</span> article LIMIT <span class="token number">3</span> OFFSET <span class="token number">1</span>取出第<span class="token number">2</span><span class="token operator">-</span><span class="token number">4</span>条数据select<span class="token operator">*</span> <span class="token keyword">from</span> article LIMIT <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span>  等价于 select<span class="token operator">*</span> <span class="token keyword">from</span> article LIMIT <span class="token number">3</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>map函数的使用</title>
      <link href="/2022/03/04/map-han-shu-de-shi-yong/"/>
      <url>/2022/03/04/map-han-shu-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<p><strong>map()</strong> 会根据提供的函数对指定序列做映射。</p><p>map() 函数语法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">map</span><span class="token punctuation">(</span>function<span class="token punctuation">,</span> iterable<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>python2.x版本中，返回的是列表</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">map</span><span class="token punctuation">(</span>square<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>python3.x版本中，返回的是迭代器</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">map</span><span class="token punctuation">(</span>square<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token builtin">map</span> <span class="token builtin">object</span> at <span class="token number">0x100d3d550</span><span class="token operator">></span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span>square<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
